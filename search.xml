<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[log016]]></title>
      <url>http://yoursite.com/2018/03/05/log016/</url>
      <content type="html"><![CDATA[<p>开学第一周要给假期做一个收尾工作，主要包括，数据结构2篇文章，学校相关的两篇文章，一篇自我成长记录的日记。</p>
<p>及其明确安排自己的时间，并且确定在这个学期中，将要完成的东西。</p>
<p>重新提醒一下，自己上午的时间安排，是以1个小时为单位，下午是以1.5个小时为单位，穿插学习得到和英语的时间</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[QucikSort]]></title>
      <url>http://yoursite.com/2018/03/03/quciksort-1/</url>
      <content type="html"><![CDATA[<p>2018.3.3 初稿<br>2018.3.9 修改</p>
<hr>
<p>快速排序，也叫做轴点排序。它和归并排序都属于分治算法，并且算法复杂度都在 $nlog^n$ 这个级别。和之前的插入排序、选择排序、归并排序，还有之后会说到的堆排序，其中每一个都是非常有代表性的思想，不管怎么说都应该去熟练的掌握这些思想。</p>
<p>同一种算法思想，每种不同的定义都意味着一种不太相同的解法，但这只区分在具体实现层次，对于更高层级的算法思想内还是相同的。随着算法复杂度的增加，定义的重要性也会随之增加。简单的算法稍加思考就可以得出结论，甚至都没有感觉到定义的存在，但在之后的算法中，会越来越感到定义的重要性。它不仅仅可以使你的思路明确，还会简化很多问题。</p>
<p>下面去具体感受一下快速排序的思想</p>
<h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a><strong>基本思想</strong></h2><blockquote>
<p> 将要排序的数据将会分割成独立的两部分，对于要排序元素的前面的元素都比它小，其后面都比它大。</p>
</blockquote>
<p>更明确点说，是经过排序之后，要排序的元素将会放置到他应该放的位置，同时在这个元素前面都是比它小的元素，在它后面都是比它大的元素。之后对分出来的两部分再进行如此算法。把这个过程叫做 <strong>partition</strong></p>
<p>我们需要一个变量 v 来记录当前排序的元素，也就是说排序结束后一定会放到正确位置上的元素。还需要一个变量 j 来区分，比 v 小的部分和比 v 大的部分之间的分界点。最后用变量 i 来确定当前正在比较的对象。基本概念结合下图来理解</p>
<p><img src="http://p3o1bechg.bkt.clouddn.com/Fo0AqY1xFLGG-4gjyjvEFB-P6BLc" alt="图片"></p>
<p>我们维护了<strong>[ l + 1, j ]</strong> 和 <strong>[ j + 1, i )</strong> 这两个范围。当正在比较的对象 <strong>大于</strong> v 时，仅需要将 i 往后移动一个位置，将其归入<strong>[ j + 1, i )</strong>这个范文 。当 <strong>小于</strong> v 时，我们需要和 j + 1 位置上的元素换一下位置，并且更新 j 的位置，进行 + 1 操作。直到最后，所有元素比较完成之后，我们只需要和 j 位置的元素交换一下位置。</p>
<p><img src="http://p3o1bechg.bkt.clouddn.com/FkNkkW8niJQuEp2UAZz-Ne2gz7tl" alt="finish"></p>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a><strong>算法实现</strong></h2><p>定义 quickSort，它将对大小为 n 的 arr 数组进行排序。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(T arr[], <span class="keyword">int</span> n )</span></span>&#123;</div><div class="line">    __quickSort(arr, <span class="number">0</span> , n - <span class="number">1</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义 __quickSort 它将排序 arr数组 [l, r] 范围内的数据,其内部首先对递归到底的数据进行处理,然后调用 partition 算法，我们默认总是将 位置 为 l 的元素作为排序元素，然后返回这个元素的正确位置 p 。接下来，对范围 [ l , p - 1 ] 和 [ p + 1 , r ] 进行进一步排序。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">void</span> __quickSort(T arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)&#123;</div><div class="line">    <span class="keyword">if</span>( l &gt;= r )</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> p = __partition(arr, l, r);</div><div class="line">    __quickSort(arr, l, p<span class="number">-1</span>);</div><div class="line">    __qucikSort(arr, p+<span class="number">1</span>, r);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义 partition ，是对 [ l , r ] 这个区间进行排序<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </div><div class="line"><span class="keyword">int</span> __partition(T arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)&#123;</div><div class="line">    T v = arr[l];</div><div class="line">    <span class="keyword">int</span> j = l;</div><div class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt;= r; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(arr[i] &gt; v)&#123;</div><div class="line">            <span class="comment">//什么都不做</span></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            j++</div><div class="line">            swap(arr[j], arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    swap(arr[l], arr[j]);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> j ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>来和我们已经优化过的归并排序作一下比较，不同机器结果可能会有比较大的差异，不过我们后续还是会继续优化快速排序的。</p>
<p><img src="http://p3o1bechg.bkt.clouddn.com/FowPOx1pPvtaCDsparO7LlRcQrdb" alt="result"></p>
<hr>
<p>从理论上来说，QuickSort 要比 MergeSort 快 30% 左右，但是结果并非如此，我多次尝试结果都没有太大的变化，最后找到问题所在，是 <strong>swap函数</strong>执行时间过长，这会说到C++的泛型问题，在之后会写一篇文章，这里只需手动写一个swap函数即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">T tmp = arr[j];</div><div class="line">arr[j] = arr[i];</div><div class="line">arr[i] = tmp;</div></pre></td></tr></table></figure></p>
<p>修改之后的结果是（好了很多）<br><img src="http://p3o1bechg.bkt.clouddn.com/FuaQJ1sKjj27owKi6FhEz7L0PbP5" alt="fixed"></p>
]]></content>
      
        <categories>
            
            <category> 2018-3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[go|面向「对象」]]></title>
      <url>http://yoursite.com/2018/03/01/go-object-oriented/</url>
      <content type="html"><![CDATA[<p>go语言仅支持封装，不支持继承和多态，所以go语言没有class 只有struct</p>
<h2 id="结构的定义"><a href="#结构的定义" class="headerlink" title="结构的定义"></a><strong>结构的定义</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> treeNode <span class="keyword">struct</span>&#123;</div><div class="line">    left, right *treeNode</div><div class="line">    value <span class="keyword">int</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结构的创建"><a href="#结构的创建" class="headerlink" title="结构的创建"></a><strong>结构的创建</strong></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//空值创建</span></div><div class="line"><span class="keyword">var</span> root treeNode</div><div class="line">r := <span class="built_in">new</span>(treeNode)</div><div class="line"></div><div class="line"><span class="comment">//带值</span></div><div class="line">root1 := treeNode&#123;value: <span class="number">3</span>&#125;</div><div class="line">root2 := treeNode&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">//通过slice的创建</span></div><div class="line">nodes := []treeNode&#123;</div><div class="line">    &#123;value: <span class="number">3</span>&#125;,</div><div class="line">    &#123;&#125;,</div><div class="line">    &#123;<span class="number">6</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>为结构定义方法</strong></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node treeNode)</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">    fmt.Println(node.value)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实这和普通方法基本都是一样的，而且依旧是传值,如果有下面这段代码，他是不可以改变结构体内部的数据的，只能通过指针的方式</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不可以改变</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node treeNode)</span> <span class="title">setValue</span><span class="params">(value <span class="keyword">int</span>)</span></span>&#123;</div><div class="line">    node.value = value</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//可以改变</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(node *treeNode)</span> <span class="title">setValue</span><span class="params">(value <span class="keyword">int</span>)</span></span>&#123;</div><div class="line">    node.value = value</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h2><p>struct 没有构造函数的说法</p>
<p>方法中可以返回局部变量的地址</p>
<p>无论是地址还是结构，一律使「 . 」来访问成员</p>
<p>只有使用指针才可以改变结构内容</p>
<p><strong>nil 指针也可以调用方法</strong></p>
<p>##<strong>封装</strong></p>
<ul>
<li><p><strong>针对包来说，首字母大写代表 public，首字母小写代表 private</strong></p>
</li>
<li><p><strong>每个目录一个包，包名不和目录名要一样，但每个目录只能有一个包。main包 包含可执行入口</strong></p>
</li>
<li><p><strong>为结构定义的方法必须放在同一个包内，但是可以是不同的文件</strong></p>
</li>
</ul>
<h2 id="如果扩展一个已有的类型"><a href="#如果扩展一个已有的类型" class="headerlink" title="如果扩展一个已有的类型"></a><strong>如果扩展一个已有的类型</strong></h2><p>两种方法，一种定义别名，另一种是定义组合</p>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">type</span> myTreeNode <span class="keyword">struct</span> &#123;</div><div class="line">    node *tree.Node</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(myNode *myTreeNode)</span> <span class="title">postOrder</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> myNode == <span class="literal">nil</span> || myNode.node == <span class="literal">nil</span>&#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    left := myTreeNode&#123;myNode.node.Left&#125;</div><div class="line">    left.postOrder()</div><div class="line">    right := myTreeNode&#123;myNode.node.Right&#125;</div><div class="line">    right.postOrder()</div><div class="line">    myNode.node.Print()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Queue []<span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Push</span><span class="params">(v <span class="keyword">int</span>)</span></span>&#123;</div><div class="line">    *q = <span class="built_in">append</span>(*q,v)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">int</span></span>&#123;</div><div class="line">    head := (*q)[<span class="number">0</span>]</div><div class="line">    *q = (*q)[<span class="number">1</span>:]</div><div class="line">    <span class="keyword">return</span> head</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(*q) == <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="GOPATH-环境变量"><a href="#GOPATH-环境变量" class="headerlink" title="GOPATH 环境变量"></a>GOPATH 环境变量</h2><p>默认在 ～/go(unix, linux)</p>
<p>官方推荐: 所有项目和第三库都放在同一个 GOPATH 下面</p>
<p>也可以将每个项目放在不同的 GOPATH 中</p>
]]></content>
      
        <categories>
            
            <category> 2018-3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> go </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[go|内建容器]]></title>
      <url>http://yoursite.com/2018/02/28/go-inner-container-1/</url>
      <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h2><p>数组是值类型，也就是说传递的时候，是通过拷贝的方式，进行传递</p>
<h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a><strong>定义数组</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr [<span class="number">5</span>]<span class="keyword">int</span>  </div><div class="line">arr2 := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;   <span class="comment">//如果使用 : 去定义数组，那么必须赋初值</span></div><div class="line">arr3 := [...]<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;    <span class="comment">//让系统自己识别，有几个数字</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> grid [<span class="number">4</span>][<span class="number">5</span>]<span class="keyword">int</span>      <span class="comment">//定义多维数组</span></div></pre></td></tr></table></figure>
<h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a><strong>遍历数组</strong></h3><p>最基本的形式<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i := <span class="number">0</span> ; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</div><div class="line">    fmt.Println(arr[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用 <strong>range</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i , v : = <span class="keyword">range</span> arr &#123;   <span class="comment">//i 是数组的下表， v 是数组的值</span></div><div class="line">    fmt.Println(i, v)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h3><ul>
<li><p><strong>[10]int</strong> 和 <strong>[20]int</strong> 是不同的类型</p>
</li>
<li><p>[]int 和 [5]int 代表完全不同的含义，前者表示切片，后者才表示数组</p>
</li>
<li><p>数组是值类型</p>
</li>
<li><p>它不像C，数组头指针并不代表数组的地址</p>
</li>
</ul>
<p><strong>go语言中不直接使用数组</strong></p>
<h2 id="Slice"><a href="#Slice" class="headerlink" title="Slice"></a><strong>Slice</strong></h2><h3 id="Slice-是什么"><a href="#Slice-是什么" class="headerlink" title="Slice 是什么"></a><strong>Slice 是什么</strong></h3><p>Slice 是 数组 的一个 View<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;  <span class="comment">//数组</span></div><div class="line">s := arr[<span class="number">2</span>:<span class="number">6</span>]   <span class="comment">//slice     s =&gt; 2,3,4,5  [2,6)</span></div></pre></td></tr></table></figure></p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a><strong>基本用法</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;  <span class="comment">//数组</span></div><div class="line">s := arr[<span class="number">2</span>:<span class="number">6</span>]   <span class="comment">//slice     s =&gt; 2,3,4,5  [2,6)</span></div><div class="line">s1 := arr[:<span class="number">6</span>]   <span class="comment">//slice     s =&gt; 0,1,2,3,4,5  [0,6)</span></div><div class="line">s2 := arr[<span class="number">2</span>:]   <span class="comment">//slice     s =&gt; 2,3,4,5,6,7,8  [2, len(arr) )</span></div><div class="line">s3 := arr[:]   <span class="comment">//slice     s =&gt; 0,1,2,3,4,5,6,7,8  [0,len(arr) )</span></div></pre></td></tr></table></figure>
<p>s[0] 代表当前Slice 的第一个数组</p>
<p><strong>可以通过修改Slice中的值去修改原来数组当中的值</strong></p>
<h3 id="进一步操作"><a href="#进一步操作" class="headerlink" title="进一步操作"></a><strong>进一步操作</strong></h3><p>下面的Slice 的都是投影同一个数组的arr<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;  <span class="comment">//数组</span></div><div class="line">s := arr[:]     <span class="comment">//  0,1,2,3,4,5,6,7,8</span></div><div class="line">s = s[:<span class="number">5</span>]     <span class="comment">//    0,1,2,3,4</span></div><div class="line">s = s[<span class="number">2</span>:]     <span class="comment">//    2,3,4</span></div></pre></td></tr></table></figure></p>
<p>试图理解一下，下面这些代码<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;  <span class="comment">//数组</span></div><div class="line">s1 := arr[<span class="number">2</span>,<span class="number">6</span>]  <span class="comment">//2,3,4,5</span></div><div class="line"><span class="comment">//s1 只有四个数字</span></div><div class="line">s2 := s1[<span class="number">3</span>,<span class="number">5</span>]   <span class="comment">//5,6   s[3]    s[4]</span></div><div class="line">fmt.Println(s1[<span class="number">4</span>]   <span class="comment">//error 直接取是取不出来的</span></div></pre></td></tr></table></figure></p>
<p>为了正确理解上面代码，我们有必要深入了解一下slice</p>
<p><img src="http://p3o1bechg.bkt.clouddn.com/FnsLz75IFKrn5b9r1Mc6Ji94k0IP" alt="slice"></p>
<ul>
<li><p>slice中一个ptr的指针，指向slice开头的那一个元素</p>
</li>
<li><p>len是slice的大小，通过下标的方式，只能访问到len以内的元素</p>
</li>
<li><p>cap是从slice第一个元素到投影数组的最后一个元素的大小，在cap范围内的，可以通过再切片来访问到</p>
</li>
</ul>
<p><strong>为此，我们可以通过 len() 和 cap() 方法获取该slice的值</strong></p>
<h3 id="向Slice添加元素"><a href="#向Slice添加元素" class="headerlink" title="向Slice添加元素"></a><strong>向Slice添加元素</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</div><div class="line">s1 := arr[<span class="number">2</span>:<span class="number">6</span>]</div><div class="line">s2 := s1[<span class="number">3</span>:<span class="number">5</span>]</div><div class="line">s3 := <span class="built_in">append</span>(s2,<span class="number">10</span>)</div><div class="line">s4 := <span class="built_in">append</span>(s3,<span class="number">11</span>)</div><div class="line">s5 := <span class="built_in">append</span>(s4,<span class="number">12</span>)</div></pre></td></tr></table></figure>
<p>进过上面代码之后，arr最后会是多少</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">s1  <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span></div><div class="line">s2  <span class="number">5</span>,<span class="number">6</span></div><div class="line">s3  <span class="number">5</span>,<span class="number">6</span>,<span class="number">10</span></div><div class="line">s4  <span class="number">5</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">11</span></div><div class="line">s5  <span class="number">5</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span></div><div class="line"></div><div class="line">arr <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">10</span></div></pre></td></tr></table></figure>
<p>s4,s5 当中的 11 和 12 去哪里了？</p>
<p>他们的视图已经不是原来的arr，而是一个新数组，因为已经超过了 s2 的 cap，系统重新开一个更大cap的数组</p>
<h3 id="slice的创建"><a href="#slice的创建" class="headerlink" title="slice的创建"></a><strong>slice的创建</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s []<span class="keyword">int</span> <span class="comment">//len=0 cap=0   s = nil</span></div><div class="line"></div><div class="line"><span class="comment">//先建立了一个arr，他的值为2,4,6,8</span></div><div class="line"><span class="comment">//再创建了一个slice的视图</span></div><div class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;</div><div class="line"></div><div class="line">s2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">16</span>)   <span class="comment">//len(s2) = 16 cap(s2) = 16</span></div><div class="line"></div><div class="line">s3 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">16</span>,<span class="number">32</span>) <span class="comment">//len(s3) = 16 cap(s3) = 32</span></div></pre></td></tr></table></figure>
<h3 id="slice-的复制"><a href="#slice-的复制" class="headerlink" title="slice 的复制"></a><strong>slice 的复制</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">copy(s2,s1)//把s1的内容拷贝到s2当中</div><div class="line">//s2  [2,4,6,8,0,0,0,0,0,0,0,0,0,0,0,0]</div></pre></td></tr></table></figure>
<h3 id="slice-的-删除"><a href="#slice-的-删除" class="headerlink" title="slice 的 删除"></a><strong>slice 的 删除</strong></h3><p>系统没有内建函数，但是我们可以通过append来</p>
<p>如果我们想删除 s2 中的8的话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// s2   [2,4,6,8,0,0,0,0,0,0,0,0,0,0,0,0]</div><div class="line">append(s2[:3], s2[4:])</div></pre></td></tr></table></figure></p>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a><strong>Map</strong></h2><p>go语言的 nil 是可以参与运算的</p>
<p>这个Map是一个HashMap</p>
<h3 id="定义map"><a href="#定义map" class="headerlink" title="定义map"></a><strong>定义map</strong></h3><p>定义格式：map[K]V, map[K1]map[K2]V</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">m := map[string]string &#123;</div><div class="line">    &quot;name&quot;: &quot;jianran&quot;,</div><div class="line">    &quot;sex&quot;: &quot;nan&quot;,</div><div class="line">    &quot;age&quot;: &quot;20&quot;,</div><div class="line">&#125;</div><div class="line"></div><div class="line">//定义空map</div><div class="line">var m2 map[string]int       m2 == nil </div><div class="line"></div><div class="line">m3 := make(map[string]int)  m3 == empty map</div></pre></td></tr></table></figure>
<h3 id="遍历map"><a href="#遍历map" class="headerlink" title="遍历map"></a><strong>遍历map</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</div><div class="line">    fmt.Println(k, v)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="getting-value"><a href="#getting-value" class="headerlink" title="getting value"></a><strong>getting value</strong></h3><p>一般情况<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name := m[<span class="string">"name"</span>]</div></pre></td></tr></table></figure></p>
<p>如果我们的键在map当中并没有会怎么样？<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">n := m[<span class="string">"nme"</span>]</div></pre></td></tr></table></figure></p>
<p>它并不会报错，会打一个空串。那么如果是这样，我们应该如何判断这个 key 是否存在呢？<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">n, ok := m[<span class="string">"nme"</span>]   <span class="comment">//如果 OK 的 变量是 true 说明存在，为 false 说明不存在</span></div></pre></td></tr></table></figure></p>
<h3 id="Deleting-value"><a href="#Deleting-value" class="headerlink" title="Deleting value"></a><strong>Deleting value</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">delete</span>(m, <span class="string">"name"</span>)   <span class="comment">//将会删除 m 中 键为 name 的这对键值对</span></div></pre></td></tr></table></figure>
<h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a><strong>注意</strong></h3><p>map使用哈希表，必须可以比较相等</p>
<p>除了 slice，map，function的内建类型都可以作为key</p>
<p>struct 类型不包括上述字段，也可以作为key</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> go </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[extends和implements的一些思考]]></title>
      <url>http://yoursite.com/2018/02/27/extends%E5%92%8Cimplements%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<h2 id="extends-amp-implements"><a href="#extends-amp-implements" class="headerlink" title="extends &amp; implements"></a><strong>extends &amp; implements</strong></h2><p>继承和接口，在 java 中简单来说就是 extend 和 implements。继承从语义上来说，就是会得到父类的一些东西（方法，参数），无论你是否愿意。而接口，它本身就是空的，并不会得到什么东西，我画了个图来更加的感受一下</p>
<p><img src="http://p3o1bechg.bkt.clouddn.com/FnaG4YHoc8Gei1MR50NsTqI4fCWO" alt="extends"> <img src="http://p3o1bechg.bkt.clouddn.com/FoJK7B-8HZD49aOVrEnIZIQ-tHAr" alt="implements"></p>
<p>当我们使用 extends 的时候，子类会得到一些具体实现的代码。这样做有好有坏，好的地方上，我们可以提高的代码的复用性，使我们不需要去重复的去写一些代码。坏的地方，就是增加了耦合，强制我们去依赖细节。</p>
<p>使用 implements 的时候，有点反过来的味道。我们操作的永远会是interface或者 abstract 的子类。也就是在抽象层次上进行操作。这样我们会更少的去依赖细节，增加可拓展性。</p>
<p>在写代码的过程中，时刻要应对的变化。我们所创造的系统应该更加的容易的扩展，而不是每次都去修改原先的代码，这样对系统无论是安全性还是维护成本来说，都是应该尽量避免的行为。虽然无法预测未来的事情，但我们至少可以掌控当下写的内容。</p>
<h2 id="尽量遵循一些原则"><a href="#尽量遵循一些原则" class="headerlink" title="尽量遵循一些原则"></a><strong>尽量遵循一些原则</strong></h2><p>在设计写代码时，我们应该尽可能的避免直接依赖细节，尽可能的操作抽象，尤其是在写框架的时候。我们<strong>应该针对接口编程，而不是针对特定的实现</strong>。</p>
<p>应该去尽量<strong>使用组合</strong>，这里举一个例子</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Class Duck&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</div><div class="line">        ....    <span class="comment">// 具体代码</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果想去修改fly中的方法，除了覆写别无它法，而且覆写的成本会很高，如果换一种方式。我们只需要去改变Flayable的变量值即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Class Duck&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> Flyable flyBehavior</span></div><div class="line">    <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span>&#123;</div><div class="line">        flyBehavior.fly();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除以上以外，我们应该去<strong>隔离变化</strong>。</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java编程思想 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[go|基本语法糖]]></title>
      <url>http://yoursite.com/2018/02/27/go_syntactic_sugar1/</url>
      <content type="html"><![CDATA[<p>go语言中变量的声名和很多语言都是反着来的,而且go语言只有值传递</p>
<h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a><strong>定义变量</strong></h2><p>go语言是强类型<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//go语言会动态的识别类型</span></div><div class="line"><span class="keyword">var</span> aa</div><div class="line"><span class="keyword">var</span> aa = <span class="number">3</span></div><div class="line"><span class="keyword">var</span> a, b, c, s = <span class="number">3</span>, <span class="number">4</span>, <span class="literal">true</span>, <span class="string">"def"</span></div><div class="line"> </div><div class="line"></div><div class="line"><span class="keyword">var</span> ss <span class="keyword">string</span></div><div class="line"><span class="keyword">var</span> cc ww <span class="keyword">string</span></div><div class="line"><span class="keyword">var</span> a, b <span class="keyword">int</span> = <span class="number">3</span>, <span class="number">4</span></div><div class="line"></div><div class="line"><span class="comment">//定义包内部变量，不可以使用 `:` 来定义变量</span></div><div class="line">bb := <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">//扎堆定义变量</span></div><div class="line"><span class="keyword">var</span> &#123;</div><div class="line">    cc = <span class="number">4</span></div><div class="line">    ee = <span class="number">6</span></div><div class="line">    ff = <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a><strong>枚举</strong></h2><p>go语言没有像java一样的enum，但可以通过 const 关键字来(const 的意思是不可改变的)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//类型一    手动输入</span></div><div class="line"><span class="keyword">const</span>(</div><div class="line">    	cpp = <span class="number">0</span></div><div class="line">		java = <span class="number">1</span></div><div class="line">		python = <span class="number">2</span></div><div class="line">		golang = <span class="number">3</span></div><div class="line">	)</div><div class="line"><span class="comment">//类型二    不想手动输入，可以使用iota 自增长</span></div><div class="line"><span class="keyword">const</span>(</div><div class="line">    cpp = <span class="literal">iota</span>  <span class="comment">//0</span></div><div class="line">    java        <span class="comment">//1</span></div><div class="line">    python      <span class="comment">//2</span></div><div class="line">    golang      <span class="comment">//3</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//类型三    对于iota的进一步使用</span></div><div class="line"><span class="comment">//	b,	kb,	mb,	gb,	tb,	pb</span></div><div class="line"><span class="keyword">const</span>(</div><div class="line">	b = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)    <span class="comment">//1</span></div><div class="line">	kb                      <span class="comment">//1024</span></div><div class="line">	mb                      <span class="comment">//1048576</span></div><div class="line">	gb                      ...</div><div class="line">	tb</div><div class="line">	pb</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a><strong>Branch</strong></h2><p>go语言对于语句像 分支语句和循环语句尽量，省略括号</p>
<p>go 语言 的 nil 相当于 其他语言的 NULL、null，但 nil 还有其他特别的地方</p>
<h3 id="If"><a href="#If" class="headerlink" title="If"></a><strong>If</strong></h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//普通</span></div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</div><div class="line">    ...</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>语言在条件判断的基础上还加入了向for语言的赋初值<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> a:=<span class="number">0</span>; a&lt;<span class="number">10</span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a><strong>Switch</strong></h3><p>依然保留一般性的语法<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//普通</span></div><div class="line"><span class="keyword">switch</span> op &#123;</div><div class="line">	<span class="keyword">case</span> <span class="string">"+"</span>:</div><div class="line">		<span class="keyword">return</span> a + b</div><div class="line">	<span class="keyword">case</span> <span class="string">"-"</span>:</div><div class="line">		<span class="keyword">return</span> a - b</div><div class="line">	<span class="keyword">case</span> <span class="string">"/"</span>:</div><div class="line">		<span class="keyword">return</span> a / b</div><div class="line">	<span class="keyword">case</span> <span class="string">"*"</span>:</div><div class="line">		<span class="keyword">return</span> a * b</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		<span class="built_in">panic</span>(<span class="string">"unsupported operation:"</span> + op)</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>switch语句相应做了扩展。语句可以在case当中直接写条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">g:= &quot;&quot;</div><div class="line">switch &#123;</div><div class="line">    case score &lt; 0 || score &gt; 100:</div><div class="line">    	panic(fmt.Sprintf(</div><div class="line">    		&quot;Wrong score: %d&quot;, score))</div><div class="line">    case score &lt; 60:</div><div class="line">    	g = &quot;F&quot;</div><div class="line">    case score &lt; 80:</div><div class="line">    	g = &quot;C&quot;</div><div class="line">    case score &lt; 90:</div><div class="line">    	g = &quot;B&quot;</div><div class="line">    case score &lt;= 100:</div><div class="line">    	g = &quot;A&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a><strong>Loop</strong></h2><p>go没有while语句，但是 for 已足以</p>
<p>基本形式<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ; ; &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果没有任何条件，就相当一个死循环<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//死循环</div><div class="line">for&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果只有一个判断条件，可以省略两个冒号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for n &lt; 10 &#123;</div><div class="line">	fmt.Print(n)</div><div class="line">	n++</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a><strong>Function</strong></h2><p>go语言的函数可以返回多个返回值，同时声明方式也是反着的</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回一个值</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">eval</span><span class="params">(a,b <span class="keyword">int</span>, op <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">返回多个值</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">div</span><span class="params">(a,b <span class="keyword">int</span>)</span> <span class="params">(q,r <span class="keyword">int</span>)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a / b,a % b</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>go语言是支持函数式编程的</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">apply</span><span class="params">(op <span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>,<span class="title">a</span>, <span class="title">b</span> <span class="title">int</span>) <span class="title">int</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> op(a, b)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Point"><a href="#Point" class="headerlink" title="Point"></a><strong>Point</strong></h2><p>在go语言中，指针是不允许进行运算的。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> a <span class="keyword">int</span>  = <span class="number">2</span></div><div class="line"><span class="keyword">var</span> pa *<span class="keyword">int</span> = &amp;a</div><div class="line">*pa = <span class="number">3</span></div><div class="line">fmt.Println(a)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> go </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log015]]></title>
      <url>http://yoursite.com/2018/02/27/log015/</url>
      <content type="html"><![CDATA[<p>假期最后几天，父母要出差。只能转移到奶奶家。</p>
<p>效率变得会比以往低一点，但每天必须要做的事情，还是要做的。</p>
<p>在积极做总结中…</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浮点数]]></title>
      <url>http://yoursite.com/2018/02/21/float/</url>
      <content type="html"><![CDATA[<p>浮点数总是给我一种朦朦胧胧的感觉，知道它描述的数字有偏差，知道它在C语言中不能和整数型直接转换，却始终不敢拍着胸膛说“我懂了”。float的种种疑惑和仅停留在可以表达小数的认识上。</p>
<hr>
<p>我们需要先了解一下计算机的浮点数表示法。在 C 语言中计算机的浮点数用的是 IEEE 754 标准</p>
<p>IEEE 754标准中规定float单精度浮点数在机器中表示用 </p>
<ul>
<li>用 1 位表示数字的符号 S (Sign)</li>
<li>用 8 位来表示指数 E (Exponent)</li>
<li>用23 位来表示尾数 M (Mantissa)</li>
</ul>
<p>对于double双精度浮点数</p>
<ul>
<li>用 1 位表示符号 S (Sign)</li>
<li>用 11 位表示指数 E (Exponent)</li>
<li>用 52 位表示尾数 M (Mantissa)</li>
</ul>
<p>IEEE 浮点值的格式如下图所示:<br><img src="http://p3o1bechg.bkt.clouddn.com/FhyIhmiWMhg9CXzHfIvwVzmKEzXI" alt="IEEE 754"></p>
<p>这里我们以32位为例，来展示计算公式</p>
<p>$$(-1)^S * (1 + \frac{M}{2^{23}}) * 2^{\textrm{(E - 127)}}$$</p>
<p>让我们更进步的解释一下浮点数的三段各部分的意思</p>
<ul>
<li><p>第一段是符号位。</p>
</li>
<li><p>第二段是指数位，对于任何数ｘ，其都可以找到一个ｎ，使得$2^n&lt;=x&lt;=2^{n+1} $，比如，拿３来说，因为$2^1&lt;3&lt;2^2$,所以 $n=1$，同时，为了表示 0.00x 这样的数，所以需要有负数。8个比特位，总共能表示 255 个数字，为了表示负数,也就是在[-127,128]这个区间中，才有$2^{\textrm{(E - 127)}}$</p>
</li>
<li>第三段叫做偏移量会更准确一些，如果没有所谓的偏移量，我们展示的将是一个$2^{\textrm{(E - 127)}}$,精简一点也就是$2^x$，不如说这个数字就是一个基值，我们将会在这个基值上面再进行偏移，偏移的总量同样是$2^x$。偏移量为23位，就是说把这段数字分为了$2^{23}$份，展开公式会更好的展示出来:<br>$$(-1)^S * (1 * 2^{E - 127} + \frac{M}{2^{23}} * 2^{E - 127})$$</li>
</ul>
<p>正因为我们是在$2^x$的基础上偏移$\frac{M}{2^{23}}$,难免会有些数字无法完全吻合，只能依靠近似数来模拟。偏差由此而来。</p>
<p>为了更好的理解我们来拿3.14来看看</p>
<ol>
<li>3.14是正数，S的值为1</li>
<li>$2^1 &lt; 3.14 &lt; 2^2$ 所以$E - 127 = 1$,E 等于128</li>
<li>$(3.14 - 2^1)/2^1 = 0.57$, $\frac{M}{2^{23}} = 0.57$ ，求出来的M不是一个整数，到这里就出现了精度问题</li>
</ol>
<p>这里可以看出，计算浮点数的计算量还是很大的，如果没有硬件的直接支持对于计算机的消耗可想而知。同样依照这样的一条思路，也可以事先算好这么一个对应规格的浮点数，去和其他数字进行运算。曾经的<strong>魔数</strong>就是一个典型的例子。</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log014]]></title>
      <url>http://yoursite.com/2018/02/21/log014/</url>
      <content type="html"><![CDATA[<p>假期余量尽管不多，收货还是不错的</p>
<p>以15分钟为英语学习单位的方式，感觉不错</p>
<p>不带今天，还有十天假期</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log013]]></title>
      <url>http://yoursite.com/2018/02/20/log013/</url>
      <content type="html"><![CDATA[<p>这几天大部分时间都花在陪家人身上，对于一些项目时间难免有些不够，但依然会做，</p>
<p>log 已经中断了几天，还包括英语。</p>
<p>只能说自己的时间安排不恰当，有很大的调整空间</p>
<p>计划到开学之前，基本学完20小时的go语言</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SharedPreferences]]></title>
      <url>http://yoursite.com/2018/02/17/SharedPreferences/</url>
      <content type="html"><![CDATA[<p>如果想保存相对较小键值对集合，应该使用SharedPerference</p>
<h2 id="获取共享首选项句柄"><a href="#获取共享首选项句柄" class="headerlink" title="获取共享首选项句柄"></a><strong>获取共享首选项句柄</strong></h2><ul>
<li><p>getSharedPerferences() –如果需要指定文件名称，应该使用这个方法,第一个参数指定文件名称，第二个阐述文件权限。MODE_PRIVATE(Defalut)，仅能被创建者访问。还有MODE_WORLD_READABLE和MODE_WORLD_WRITEABLE</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Context context = getActivity(); </div><div class="line">SharedPreferences sharedPreference =    context.getSharedPreferences(</div><div class="line">       getString(R.string.preference_file_key), Context.MODE_PRIVATE);</div></pre></td></tr></table></figure>
</li>
<li><p>getPreferences() – 如果您只需使用 Activity 的一个共享首选项，请从 Activity 中使用此方法。 因为此方法会检索属于该 Activity 的默认共享首选项文件，您无需提供名称</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SharedPreferences sharedPref = getActivity().getPreferences(Context.MODE_PRIVATE);</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="写入共享首选项"><a href="#写入共享首选项" class="headerlink" title="写入共享首选项"></a><strong>写入共享首选项</strong></h2><p>通过SharedPreferences引用调用edit() 来创建一个 SharedPreferences.Editor。使用putXXX() 来写入键和值，然后，调用 commit() 以保存所做的更改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SharedPreferences sharedPref = getActivity().getPreferences(Context.MODE_PRIVATE);</div><div class="line">SharedPreferences.Editor editor = sharedPref.edit();</div><div class="line">editor.putInt(getString(R.string.saved_high_score), newHighScore);</div><div class="line">editor.commit();</div></pre></td></tr></table></figure></p>
<h2 id="读取信息"><a href="#读取信息" class="headerlink" title="读取信息"></a><strong>读取信息</strong></h2><p>通过SharedPreferences引用的getXXX() 方法，去获取你想要减的值，并且根据需要提空，在键不存在的情况下返回默认值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SharedPreferences sharedPref = getActivity().getPreferences(Context.MODE_PRIVATE);</div><div class="line">int defaultValue = getResources().getInteger(R.string.saved_high_score_default);</div><div class="line">long highScore = sharedPref.getInt(getString(R.string.saved_high_score), defaultValue);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log012]]></title>
      <url>http://yoursite.com/2018/02/15/log012/</url>
      <content type="html"><![CDATA[<p>对于英语的学习，将会专注于英语流利说</p>
<p>意识到自己欠缺一些金融知识</p>
<p>从自己很久不看的一个专栏中又学会一些东西</p>
<p>技术应该继续下去，但是重要性在持续走低</p>
<p>重新定义技术的意义：技术将会成为我的谋生工具</p>
<p>但真正要成为精英还需很多其他的东西</p>
<p>非常需要再次重新去规划自己</p>
<p>此刻应该立刻睡觉</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log011]]></title>
      <url>http://yoursite.com/2018/02/13/log011/</url>
      <content type="html"><![CDATA[<p>重新确定英语的学习方式，应该渗透到每天的生活中。学习计划将要重新安排，一切以两个小时为单位， 每过两小时就学半个小时英语。其实就是以2.5小时为一个单位。</p>
<p>确定未来一定会考人类的最高学历</p>
<p>10点过后，不再学习<strong>英语流利说</strong>。</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序结构]]></title>
      <url>http://yoursite.com/2018/02/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<p>在创建了一个小程序项目之后，可能在这个项目里会看见不同类型的文件。这些文件分别是</p>
<ol>
<li><p>.json 后缀的 JSON 配置文件</p>
</li>
<li><p>.wxml 后缀的 WXML 模板文件</p>
</li>
<li><p>.wxss 后缀的 WXSS 样式文件</p>
</li>
<li><p>.js 后缀的 JS 脚本逻辑文件</p>
</li>
</ol>
<p>初看结构十分类似 HTML + CSS + JS 三剑客，进一步了解后他们的作用也大抵相同。在小程序总体结构上，分成两部分。一部分是全局文件，都是以<code>app</code>开头，承载整个小程序的全局信息,例如 <code>app.json</code>, <code>app.wxss</code>, <code>app.js</code>。另一部分是局部文件，具体到每个一个页面都拥有自己的一套配置信息，局部文件的优先级会大于全局文件。例如 <code>index.wxml</code>, <code>index.wxss</code>, <code>index.js</code>, <code>index.json</code></p>
<p>下面我们以这样一个目录结构来依次介绍</p>
<p><img src="http://p3o1bechg.bkt.clouddn.com/Fj5LUc4w_wTHXa7QCyMSGwcbivc1" alt="tree"></p>
<p>先忽略掉 typinggs 目录。</p>
<h2 id="JSON配置"><a href="#JSON配置" class="headerlink" title="JSON配置"></a><strong>JSON配置</strong></h2><p>从项目根目录，我们依次看到 app.json, project.config.json 和 index.json。我们依次来说明用途。</p>
<p><strong>app.json</strong> 是对当前小程序的全局配置，包括了<strong>小程序的所有页面路径</strong>，<strong>界面表现</strong>， <strong>网络超时时间</strong>， <strong>底部tab</strong> 等信息。结构如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "pages":[</div><div class="line">    ...</div><div class="line">  ],</div><div class="line">  "window":&#123;</div><div class="line">    ...</div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>project.config.json</strong> 是对于微信开发者工具一些个性化配置。当你换了一台电脑或者重新安装工具时，你只要载入同一个项目的代码。开发者工具就会根据这些配置进行恢复。</p>
<p><strong>index.json</strong> 去设置一个页面的配置，当 app.json 配置了属性，而 index.json 没有配置就默认使用 app.json 的。当两者都配置了，则使用 index.json 的 </p>
<h2 id="WXML-WXSS-JS"><a href="#WXML-WXSS-JS" class="headerlink" title="WXML WXSS JS"></a><strong>WXML WXSS JS</strong></h2><p>它其实类似 HTML + CSS + JS 这个，只不过他们都有一些细微的差距。</p>
<p>WXML 于 HTML 的差别，我们直接用微信文档中的一段话。</p>
<ol>
<li><p>标签名字有点不一样 往往写 HTML 的时候，经常会用到的标签是 div, p, span，开发者在写一个页面的时候可以根据这些基础的标签组合出不一样的组件，例如日历、弹窗等等。换个思路，既然大家都需要这些组件，为什么我们不能把这些常用的组件包装起来，大大提高我们的开发效率。 从上边的例子可以看到，小程序的 WXML 用的标签是 view, button, text 等等，这些标签就是小程序给开发者包装好的基本能力，我们还提供了地图、视频、音频等等组件能力 更多详细的组件讲述参考下个章节 小程序的能力</p>
</li>
<li><p>多了一些 wx:if 这样的属性以及 { { } } 这样的表达式 在网页的一般开发流程中，我们通常会通过 JS 操作 DOM (对应 HTML 的描述产生的树)，以引起界面的一些变化响应用户的行为。例如，用户点击某个按钮的时候，JS 会记录一些状态到 JS 变量里边，同时通过 DOM API 操控 DOM 的属性或者行为，进而引起界面一些变化。当项目越来越大的时候，你的代码会充斥着非常多的界面交互逻辑和程序的各种状态变量，显然这不是一个很好的开发模式，因此就有了 MVVM 的开发模式(例如 React, Vue)，提倡把渲染和逻辑分离。简单来说就是不要再让 JS 直接操控 DOM，JS只需要管理状态即可，然后再通过一种模板语法来描述状态和界面结构的关系即可。 小程序的框架也是用到了这个思路，如果你需要把一个 Hello World 的字符串显示在界面上。 WXML 是这么写 :</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;text&gt;&lt;/text&gt;</div></pre></td></tr></table></figure>
<p>JS 只需要管理状态即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.setData(&#123; msg: &quot;Hello World&quot; &#125;)</div></pre></td></tr></table></figure></p>
<p>通过 { { } } 的语法把一个变量绑定到界面上，我们称为数据绑定。仅仅通过数据绑定还不够完整的描述状态和界面的关系，还需要 if/else, for等控制能力，在小程序里边，这些控制能力都用 wx: 开头的属性来表达。 更详细的文档可以参考 WXML</p>
<p>WXSS 具有CSS大部分特性，除此也做了一些扩充和修改。增加了尺寸单位 rpx，提供了全局样式和局部样式，此外仅支持 css 部分选择器</p>
]]></content>
      
        <categories>
            
            <category> 2018-02 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log010]]></title>
      <url>http://yoursite.com/2018/02/12/log010/</url>
      <content type="html"><![CDATA[<p>找不到顺手的图床插件，干脆自动动手写了一个。尽管用的他们的sdk，但好歹是自己给自己写的第一个东西,值得纪念。</p>
<p>帮同学解决了技术上面的小问题，还是挺开心的。</p>
<p>对于英语的执行力依然很差，需要提高！</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log009]]></title>
      <url>http://yoursite.com/2018/02/11/log009/</url>
      <content type="html"><![CDATA[<p>对于自己的未来规划，有了一个方向。重新定义了，我目前处于的阶段，大学沉淀期。</p>
<p>总体计划按目标完成。</p>
<p>作息再次修改成，24点准时睡觉，7点起床.</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log008]]></title>
      <url>http://yoursite.com/2018/02/10/log008/</url>
      <content type="html"><![CDATA[<p>重心持续的转移，并不意味比之前懒散。但要去做什么最近一直在思考。希望短时间内可以想出。</p>
<p>每次的任务不要给自己太过于紧张。</p>
<p>英语应该保持警惕。一不注意它，就有点松动的迹象。</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log007]]></title>
      <url>http://yoursite.com/2018/02/09/log007/</url>
      <content type="html"><![CDATA[<p>技术方面并没有提升多少，但自己意识到了通识教育的重要性。随着自身的发展，技术已经不再成为短板。</p>
<p>现阶段的主要目标还是技术。不过看一些小说的时间，可以变成另外一些特定的书籍。</p>
<p>再次下定义，纯粹的知识没有任何意义，纯粹的思想同样也是。需要更多的文化点缀。</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mergesSortAdvance]]></title>
      <url>http://yoursite.com/2018/02/08/mergesSortAdvance/</url>
      <content type="html"><![CDATA[<p>对于<a href="https://jinfangzhang.github.io/2018/02/07/mergeSort/" target="_blank" rel="external">之前的归并排序</a>的文章，刻意的留了一部分，单独拿出来说下。这部分还是很有趣和重要的一块。不记得算法的同志得自己去回顾一下。</p>
<h2 id="第一个优化"><a href="#第一个优化" class="headerlink" title="第一个优化"></a><strong>第一个优化</strong></h2><p>在几乎所有采用分而治之思想的算法中，当问题规模被分解到某种程度时，可以采用插入排序，将这些近乎有序的数组进行排序。</p>
<p>我们对应优化的点在于不在让问题规模分解成1为止，而是当问题规模减小到<strong>X</strong>(某个未知数）的时候，采用插入排序。为此我们重载了一个insertionSort，如下。这里不妨分析下这个重载后的算法定义是什么</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(T arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt;= r; i++)&#123;</div><div class="line">        T e = arr[i];</div><div class="line">        <span class="keyword">int</span> j;</div><div class="line">        <span class="keyword">for</span>(j = i - <span class="number">1</span>; j&gt;=l; j--)&#123;</div><div class="line">            <span class="keyword">if</span>(e &lt; arr[j])</div><div class="line">                arr[j+<span class="number">1</span>] = arr[j];</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        arr[j+<span class="number">1</span>] = e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>归并排序的优化。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">void</span> __mergeSort(T arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)&#123;</div><div class="line">    <span class="keyword">if</span>(r-l &lt;= <span class="number">15</span>)&#123;</div><div class="line">        insertionSort(arr,l,r);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    </div><div class="line">    <span class="keyword">int</span> mi = (l+r)/<span class="number">2</span>;</div><div class="line">    __mergeSort(arr, l, mi);</div><div class="line">    __mergeSort(arr, mi + <span class="number">1</span>, r);</div><div class="line"></div><div class="line">    __merge(arr, l, mi, r);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果<br><img src="http://p3o1bechg.bkt.clouddn.com/mergeSort_advance&amp;&amp;mergeSort.png" alt="比较结果"></p>
<h2 id="第二个优化"><a href="#第二个优化" class="headerlink" title="第二个优化"></a>第二个优化</h2><p>除了要测试无序数组外，还要测试几乎有序的数组。其实不需要测试就已经很明白，对于几乎有序的数组插入排序是$O(n)$的时间复杂度，而即便是优化过的归并排序，也不过是$O(nlog^n)$。</p>
<p>我在这里的修改很简单。</p>
<p>就是对于$merge$算法而言，如果第二部分的第一个元素大于或等于第一部分的第最后一个元素，就说明这个数组是有序的，直接返回即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">template&lt;typename T&gt;</div><div class="line">void __mergeSort(T arr[], int l, int r)&#123;</div><div class="line">    if(r-l &lt;= 15)&#123;</div><div class="line">        insertionSort(arr,l,r);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    </div><div class="line">    int mi = (l+r)/2;</div><div class="line">    __mergeSort(arr, l, mi);</div><div class="line">    __mergeSort(arr, mi + 1, r);</div><div class="line"></div><div class="line">    //加了一个if判断</div><div class="line">    if(arr[mi] &gt; arr[mi + 1])</div><div class="line">        __merge(arr, l, mi, r);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>尽管最终依然无法优于在几乎有序数组中的插入排序，但是已经是在同一个数量级上面了。<br><img src="http://p3o1bechg.bkt.clouddn.com/mergeSort%E4%BC%98%E5%8C%96%E4%BA%8C.png" alt="比较结果"></p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log006]]></title>
      <url>http://yoursite.com/2018/02/08/log006/</url>
      <content type="html"><![CDATA[<p>总的来说，今天的效率好了很多。几乎在战斗的时候，都属于认真状态。但是错过了本可以完成所有今天任务的机会。</p>
<p>对于娱乐，应该先把主要任务完成。</p>
<p>休息的话，现在改成以15分钟为一个单位进行休息。</p>
<p>自己的身体终究还是适应了晚睡，所以作息，往后顺延一个小时，说不出呢还是7点起床呢～。哈哈哈</p>
<p>新的一天加油。</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mergeSort]]></title>
      <url>http://yoursite.com/2018/02/07/mergeSort/</url>
      <content type="html"><![CDATA[<p>2018.2.7 初稿<br>2018.2.8 修改</p>
<hr>
<p>归并排序算是比较高级的排序，采用分而治之的算法思想，相较插入排序和选择排序这类采用减而治之思想的算法。分而治之的思想可以更快使问题规模下降，进而求解。当问题规模开始下降，那么也意味着该问题的有序性正在变得越来越强。在对于几乎有序的数组，插入排序拥有 $O(n)$ 级别的算法复杂度。 换言之，当问题规模下降到某一程度时，我们可以采用插入排序作为分而治之算法的子过程。</p>
<p>分治算法的基本思想是将一个规模为$N$的问题分解为$K$个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解。</p>
<p>分治算法的一般步骤：</p>
<ol>
<li><p>分解，将要解决的问题划分成若干规模较小的同类问题</p>
</li>
<li><p>求解，当子问题划分足够小时，用较简单的方法解决</p>
</li>
<li><p>合并，按原问题的要求，将子问题的解逐层合并构成原问题的解</p>
</li>
</ol>
<p>归并排序是分之思想的一个典型体现，主要思想是：把问题分解成对两部分已经排好序的序列进行排序。</p>
<p>这里我们采用递归的方式逐步实现该算法。</p>
<p>还记得我们创建的工具中的排序模板吗？$void(*sort)(T[\ ],\ int)$,因为要将问题划分成两部分，为此我们有必要规定一个明确的范围，就像下面这个样子一样。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(T arr[], <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    __mergeSort(arr, <span class="number">0</span>, n - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>$mergeSort$要对一个规模为 n 的 数组arr 进行排序，实质上是通过$\_\_mergeSort$ 在<strong>[ 0, n - 1 ]</strong> 范围内对 arr 进行排序，当然，也可以理解成在<strong>[ 0, n ）</strong> 这个范围内。但我们应该去保证这个定义的正确性与不变性，从这点出发，很多问题将被简化。</p>
<p>终止条件是递归算法整体退出的唯一出口，即便是终止条件，也应该去维护 $\_\_mergeSort$ 要返回一个指定区间的有序数组的基本条件。同时基于<em>当数组只含一个元素是有序的</em> 的认识。对于终止条件就可以是<strong>当区间只含有一个元素时，应该终止算法</strong>。</p>
<p>那么我的算法就是下面<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="keyword">void</span> __mergeSort(T arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)&#123;</div><div class="line">    <span class="keyword">if</span>(l &gt;= r)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> mi = (l+r)/<span class="number">2</span>;</div><div class="line">    __mergeSort(arr, l, mi);</div><div class="line">    __mergeSort(arr, mi + <span class="number">1</span>, r);</div><div class="line"></div><div class="line">    __merge(arr, l, mi, r);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这个方法中，我们将 <strong>[l, r]</strong> 划分成两个范围 <strong>[l, (l+r)/2]</strong> 和 <strong>[l, (l+r)/2 + 1]</strong> 并对他们排序，之后再将这两部分进行合并得出结果。同时当数组只含有一个元素时，直接返回，不需要任何处理，因为当数组只含一个元素，他怎么都是有序的。</p>
<p>所以$\_\_merge$ 只需要将这两个有序区间合并即可,在阅读下面算法的时候，要时刻注意定义的保持性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">template&lt;typename T&gt;</div><div class="line">void __merge(T arr[],int l, int mi, int r)&#123;</div><div class="line">    </div><div class="line">    //1</div><div class="line">    T aux[r-l + 1]; </div><div class="line">    for(int i = l; i &lt;= r;i++)&#123;</div><div class="line">        aux[i - l] = arr[i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //2</div><div class="line">    int j = mi - l + 1;</div><div class="line">    int i = l -l;</div><div class="line">    </div><div class="line">    //3</div><div class="line">    for(int k = l; k &lt;= r;k++)&#123;</div><div class="line">        if(i+l &gt; mi )&#123;</div><div class="line">            arr[k] = aux[j];</div><div class="line">            j++;</div><div class="line">        &#125;else if(j+l &gt; r)&#123;</div><div class="line">            arr[k] = aux[i];</div><div class="line">            i++;</div><div class="line">        &#125;else if(aux[i] &lt; aux[j])&#123;</div><div class="line">            arr[k] = aux[i];</div><div class="line">            i++;</div><div class="line">        &#125;else&#123;</div><div class="line">            arr[k] = aux[j];</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在 $1$ 这个标记处，我们对arr 满足<strong>[l, r]</strong>这个区间的数进行复制，在这部分数当中，里面包含了两部分<strong>[l, mi]</strong> 和 <strong>[mi+1, r]</strong>。紧接着，我们在 $2$ 这个标记处，将 j 指向 <strong>aux</strong> 第二部分的首元素，将 i 指向 <strong>aux</strong> 第一部分的首元素。之后，我们通过<strong>K</strong> 依次遍历，最终得到有序数组。</p>
<p>最后用实际的例子来感受一下$O(log^n)$和$O(n^2)$算法的差距。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">int main()&#123;</div><div class="line">    int n = 100000;</div><div class="line">    </div><div class="line">    cout&lt;&lt;&quot;Test for random array, size = &quot;&lt;&lt;n&lt;&lt;&quot;, random range [0, &quot;&lt;&lt;n&lt;&lt;&quot;]&quot;&lt;&lt;endl;</div><div class="line">    int* arr1 = SortTestHelper::generateRandomArray(n,0,n);</div><div class="line">    int* arr2 = SortTestHelper::copyIntArray(arr1, n);</div><div class="line"></div><div class="line">    SortTestHelper::testSort(&quot;Insertion Sort&quot;, insertionSort, arr1, n);</div><div class="line">    SortTestHelper::testSort(&quot;Merge Sort&quot;,     mergeSort,arr2, n);</div><div class="line"></div><div class="line">    cout&lt;&lt;endl;</div><div class="line">    delete[] arr1;</div><div class="line">    delete[] arr2;</div><div class="line"></div><div class="line">    cout&lt;&lt;endl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://p3o1bechg.bkt.clouddn.com/mergeSort%E5%92%8CInsertionSort.png" alt="MergeSort和InsertionSort的比较"></p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log005]]></title>
      <url>http://yoursite.com/2018/02/06/log005/</url>
      <content type="html"><![CDATA[<p>昨晚的关于优化ss的问题，让我熬到凌晨3点，严重影响了今天的计划。坏事情总是接连发生，我在本该做这个事情的时间段，做了其他。对于一个难题的解决，对问题的坚持固然重要，但这并不是延误其他事情的一个好理由。</p>
<p>每天的任务是定量的，所有的行为，应该把每天的任务放在首位。在明知，无法全部完成时，应该尽可能多的完成。</p>
<p>我想要的不仅仅是进步，而是高效的进步。你应该集中注意力的去做每一件事情。</p>
<p>我无法做到十全十美，但是应该将自己可以做到完成。</p>
<p>我要竭尽全力，而不是尽力。不要让自己变成自己所拒绝的人。</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log004]]></title>
      <url>http://yoursite.com/2018/02/06/log004/</url>
      <content type="html"><![CDATA[<p>别的我倒不认为有什么优势，但唯独可以坚持下来。</p>
<p>和最近任务有关系，没有很明确的一个目标，现在每天过得可以说自我感觉十分糟糕，虽然每天都有在提</p>
<p>高，但我想要更高的效率。</p>
<p>也谈不上匆忙，总而言之，这件事情必须睡觉之前做完。</p>
<hr>
<p>明天任务：</p>
<ul>
<li>英语学习两小时，完成英语流利说的任务，其余时间看英文视频</li>
<li>完成归并和快速排序的算法，并且写一篇文章</li>
<li>看完Android网络框架，记录并且解决部分问题</li>
<li>学习一种新的设计模式</li>
</ul>
<hr>
<p>起床： 7:00</p>
<p>算法的战斗： 8:00 – 12:00</p>
<p>Android的战斗： 14:00 – 17:00</p>
<p>英语的战斗：    17:00 – 18:00</p>
<p>设计模式的战斗：20:00 – 22:00 </p>
<p>其余时间自由安排。</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log003]]></title>
      <url>http://yoursite.com/2018/02/04/log003/</url>
      <content type="html"><![CDATA[<p>节奏渐入佳境，无论是博客还是技术 。尽管所有的时间安排都在按照计划执行，但是在安排任务上面，从任务量来说并没有完成。过分纠结于一个问题，导致解决时间过长。</p>
<p>在资源已经充分利用的前提下，下来比拼的就是效率了。</p>
<p>在思考之后，决定继续学习太极拳。</p>
<p>假期本来是打算去静下来看会书，结果最终也成了战场。</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[编写算法时一些思想与实践]]></title>
      <url>http://yoursite.com/2018/02/04/%E7%BC%96%E5%86%99%E7%AE%97%E6%B3%95%E6%97%B6%E4%B8%80%E4%BA%9B%E6%80%9D%E6%83%B3%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p>初稿    2018.2.4<br>修改    2018.2.9</p>
<hr>
<h2 id="明确定义"><a href="#明确定义" class="headerlink" title="明确定义"></a>明确定义</h2><p>在普通的排序问题上面，经常会因为在边界条件的角标越界而出错。或直接因为代码逻辑问题而崩溃，究其原因是对于<strong>数据定义不明确</strong>或 <strong>不能始终维护定义的正确性</strong>。</p>
<p>大多数问题，相信都出自其手。反过来，应该时刻的注意并保持定义的正确性。对于我们理解别人的代码，还是看自己的代码都会顺畅很多。在这个系列中，我们同样会时刻注意这一点。</p>
<p>不要看文字简短，但是上面的这两句话是很重的。</p>
<h2 id="理解选择排序"><a href="#理解选择排序" class="headerlink" title="理解选择排序"></a><strong>理解选择排序</strong></h2><p>对于算法来说，最重要的是理解其思想。这不是说实现不重要，理解其思想是始终正确实现的重要前提。</p>
<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a><strong>基本思想</strong></h3><blockquote>
<p>在一个未排序的序列中，选择最大或者最小的那个数据，去与未排序序列中的首个元素交换位置</p>
</blockquote>
<p>在排序问题上会分为已排序和未排序序列，我们选择用 <strong>i</strong> 来定义未排序序列的首个元素的位置，所以说在 <strong>[0, i-1]</strong> 区间内它是有序的，而在 <strong>[i, n -1]</strong> 的区间内是无序的，我们应该不断的在未排序的区间中选择最大或最小的一个放到未排序队列的首部，然后收缩未排序序列直到没有元素为止。</p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a><strong>算法实现</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(T arr[], <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> minIndex = i;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</div><div class="line">            <span class="keyword">if</span>(arr[minIndex] &gt; arr[j])</div><div class="line">                minIndex = j;</div><div class="line"></div><div class="line">        swap(arr[i], arr[minIndex]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <strong>[i, n-1]</strong> 这个未排序序列中，我们通过for循环来不断的缩减范围，直至未排序序列没有元素。每次缩减范围之前，我们都要筛选出在未排序序列中的最小的元素，去放到未排序序列的首部，也可以说是有序序列尾部。筛选出最小元素的想法是，先假定未排序序列的第一个元素是最小的，然后依次去和其他未排序的元素比较，j 指向的是未排序序列中正与最小元素比较的元素。最终会选出最小的那一个。</p>
<h2 id="理解插入排序"><a href="#理解插入排序" class="headerlink" title="理解插入排序"></a><strong>理解插入排序</strong></h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a><strong>基本思想</strong></h3><blockquote>
<p>每次从未排序序列中拿一个元素，去放到已经有序序列的正确位置</p>
</blockquote>
<p>这回我们依然定义一个变量 <strong>i</strong> 去指向 <em>未排序序列中拿出来的那个元素</em>。所以在<strong>[0, i-1]</strong> 这个区间代表着已经排序的序列，而在 <strong>[i, n -1]</strong> 的区间内是无序的序列，</p>
<h3 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a><strong>算法实现</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(T arr[], <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line"></div><div class="line">        T e = arr[i];</div><div class="line">        <span class="keyword">int</span> j ;</div><div class="line">        <span class="keyword">for</span>(j = i <span class="number">-1</span>; j&gt;=<span class="number">0</span> ;j--)</div><div class="line">            <span class="keyword">if</span>(e &lt; arr[j])</div><div class="line">                arr[j+<span class="number">1</span>] = arr[j];</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        arr[j+<span class="number">1</span>] = e;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当序列为一个元素时是有序的，所以初始无序序列的区间为<strong>[ 1, n-1 ]</strong>，我们不断的去缩小无序序列的范围，直至它一无所有～。每次缩减之前，需要在有序序列中找到对于 <strong>arr[ i ]</strong> 来讲的恰当位置。并且把他放置到该放的位置。</p>
<p>我们定义 <strong>j</strong> 在for循环内是指，从未排序序列中拿的那一个元素想去放置的位置，当确定 可以放置到j指向的位置时 退出for循环，但是因为最后for循环一定会执行 <strong>j–</strong>，因此在for循环外，<strong>j</strong> 是指该放置位置的前一个， 所以在最后放置元素时候，应该进行 <strong>+1</strong> 操作。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>虽然二者属于$O(n^2)$的算法，但是插入排序，相比较选择排序来说，可以提前终止。插入排序还有一个优点，对于几乎有序的数组来说，他的速度是$O(n)$的时间复杂度，正是因为这个特点，插入排序会成为很多高级算法的子过程。</p>
<p>那下面通过之前实现的<a href="https://jinfangzhang.github.io/2018/02/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/" target="_blank" rel="external">工具</a>，去进一步感受的他们特点。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n = <span class="number">20000</span>;</div><div class="line">    </div><div class="line"><span class="comment">// 测试1 一般测试</span></div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Test for random array, size = "</span>&lt;&lt;n&lt;&lt;<span class="string">", random range [0, "</span>&lt;&lt;n&lt;&lt;<span class="string">"]"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"><span class="keyword">int</span> *arr1 = SortTestHelper::generateRandomArray(n,<span class="number">0</span>,n);</div><div class="line"><span class="keyword">int</span> *arr2 = SortTestHelper::copyIntArray(arr1, n);</div><div class="line">    </div><div class="line">SortTestHelper::testSort(<span class="string">"Insertion Sort"</span>, insertionSort,arr1,n);</div><div class="line">SortTestHelper::testSort(<span class="string">"Selection Sort"</span>, selectionSort,arr2,n);</div><div class="line">    </div><div class="line"><span class="keyword">delete</span>[] arr1;</div><div class="line"><span class="keyword">delete</span>[] arr2;</div><div class="line">    </div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="comment">// 测试3 测试近乎有序的数组</span></div><div class="line"><span class="keyword">int</span> swapTimes = <span class="number">100</span>;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Test for nearly ordered array, size = "</span>&lt;&lt;n&lt;&lt;<span class="string">", swap time = "</span>&lt;&lt;swapTimes&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">arr1 = SortTestHelper::generateNearlyOrderArray(n,swapTimes);</div><div class="line">arr2 = SortTestHelper::copyIntArray(arr1, n);</div><div class="line">    </div><div class="line">SortTestHelper::testSort(<span class="string">"Insertion Sort"</span>, insertionSort,arr1,n);</div><div class="line">SortTestHelper::testSort(<span class="string">"Selection Sort"</span>, selectionSort,arr2,n);</div><div class="line">    </div><div class="line"><span class="keyword">delete</span>[] arr1;</div><div class="line"><span class="keyword">delete</span>[] arr2;</div><div class="line">    </div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Test for random array, size = 20000, random range [0, 20000]</div><div class="line">Insertion Sort : 0.268021 s</div><div class="line">Selection Sort : 0.46862 s</div><div class="line"></div><div class="line">Test for nearly ordered array, size = 20000, swap time = 100</div><div class="line">Insertion Sort : 0.003808 s</div><div class="line">Selection Sort : 0.468284 s</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Log002]]></title>
      <url>http://yoursite.com/2018/02/03/log002/</url>
      <content type="html"><![CDATA[<p>今天可以说，最大的收获是听谷歌方法论，对于计算机思维的一些思考。同时也因为着迷漫画而打乱了一天的节奏。</p>
<p>并且重新发问一个新问题，我每天都在学习新知识，那么太极拳我是否有时间去思考和学习呢？可能这需要我严密的去组织时间。</p>
<p>中午的时间浪费的出奇的严重，这是需要改正的一点。</p>
<p>当然今天还有很多没有完成的事情。周遭环境的不适应，应该更加快快速的的调整。</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法的一些准备工作]]></title>
      <url>http://yoursite.com/2018/02/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>初稿    2018.2.3<br>修改    2018.2.9</p>
<hr>
<p>对算法而言，虽然我们可以从理论上面分析该算法时间复杂度是$O(nlog^n)$,还是$O(n^2)$ 再或者是其他，但难免有点抽象，不好理解。为此，我们应该去准备一些必要的工具，从正面直接理解和观察他们，它们也是进一步理解和解决问题的基础。</p>
<p>毕竟算法是一种思想，语言只是我们使用的一种工具。</p>
<p>在语言上，我们选择<code>C++</code>，来进行实现。</p>
<p>下面是一些未来可能会用到的算法。</p>
<h2 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a><strong>生成数据</strong></h2><p>涉及的问题主要是一些排序问题，数据源是最应该解决的。在生成数据上，应该至少生成两种数据组，一种是完全随机的，而另一种是几乎有序的数组。</p>
<p>选择在一个<strong>SortTestHelper</strong> 的命名空间之下（如果不知道的同学，可以简单去了解下，还是比较容易理解的）</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> SortTestHelper&#123;</div><div class="line">    <span class="comment">//工具代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生成无序数据源"><a href="#生成无序数据源" class="headerlink" title="生成无序数据源"></a><strong>生成无序数据源</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//生成一个大小为n的随机数组，每个元素的随机范围在[rangeL,rangeR]。</span></div><div class="line"><span class="function"><span class="keyword">int</span>* <span class="title">generateRandomArray</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> rangeL, <span class="keyword">int</span> rangeR)</span></span>&#123;</div><div class="line">    assert( rangeL &lt;= rangeR);</div><div class="line">    <span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">    srand(time(<span class="literal">NULL</span>));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">        arr[i] = rand() % (rangeR - rangeL + <span class="number">1</span>) + rangeL;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生成几乎有序的数组"><a href="#生成几乎有序的数组" class="headerlink" title="生成几乎有序的数组"></a><strong>生成几乎有序的数组</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 先 生成 一个从0到n - 1的完全有序的数据，然后在这个的基础之上交换几次。</span></div><div class="line"><span class="function"><span class="keyword">int</span>* <span class="title">generateNearlyOrderArray</span><span class="params">(<span class="keyword">int</span> n ,<span class="keyword">int</span> swapTimes)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line">        arr[i] = i;</div><div class="line">    &#125;</div><div class="line">    srand(time(<span class="literal">NULL</span>));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;swapTimes;i++)&#123;</div><div class="line">        <span class="keyword">int</span> posx = rand()%n;</div><div class="line">        <span class="keyword">int</span> posy = rand()%n;</div><div class="line">        swap(arr[posx],arr[posy]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="打印数据"><a href="#打印数据" class="headerlink" title="打印数据"></a><strong>打印数据</strong></h2><p>能用模板，我们尽量会用到模板。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(T arr[],<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">" "</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="判断是否有序"><a href="#判断是否有序" class="headerlink" title="判断是否有序"></a><strong>判断是否有序</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSorted</span><span class="params">(T arr[], <span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; n<span class="number">-1</span>;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(arr[i] &gt; arr[i + <span class="number">1</span>])</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="真正的测试"><a href="#真正的测试" class="headerlink" title="真正的测试"></a><strong>真正的测试</strong></h2><p>在这里我们会默认，我们之后的测试方法都是同一种声明顺序与结构 $$void(*sort)(T[\ ]\ arr, int\  size)$$</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//我们会测试整个排序完的数据是否有序，在有序的前提下，我们会给出运行所需要的时间。</div><div class="line">template&lt;typename T&gt; </div><div class="line">void testSort( string sortName, void(*sort)(T[], int), T arr[], int n)&#123;</div><div class="line">    clock_t startTime = clock();</div><div class="line">    sort(arr,n);</div><div class="line">    clock_t endTime = clock();</div><div class="line">    </div><div class="line">    assert( isSorted(arr,n));</div><div class="line">    cout &lt;&lt; sortName &lt;&lt; " : " &lt;&lt; double(endTime - startTime) / CLOCKS_PER_SEC &lt;&lt; " s" &lt;&lt; endl;</div><div class="line"></div><div class="line">    return ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="复制数组"><a href="#复制数组" class="headerlink" title="复制数组"></a><strong>复制数组</strong></h2><pre><code class="cpp"><span class="function"><span class="keyword">int</span>* <span class="title">copyIntArray</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span>{
    <span class="keyword">int</span>* arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];
    copy(a,a+n,arr);
    <span class="keyword">return</span> arr;
}
</code></pre>
<p><strong>以上我们的数组是采用new的方式来开辟内存空间的，所以在使用完了之后需要delete，虽然不delete并不会影响什么，但你应该去养成这样的一个好习惯。</strong></p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[对于是否选择进一步教育的的思考]]></title>
      <url>http://yoursite.com/2018/02/03/%E5%AF%B9%E4%BA%8E%E6%98%AF%E5%90%A6%E9%80%89%E6%8B%A9%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%95%99%E8%82%B2%E7%9A%84%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>对于这个问题，其实根本上可以理解为两个方面的问题。一种是自上而下的理解，这是一种高屋建瓴，俯视问题的一看法。而另一中则相反，就是自下而上的方式。</p>
<p>对于后者来说，在进一步普及到人们的生产生活当中，被叫做<strong>工匠式</strong>的方式。经过长期经验的积累从量变到质变的过程。或许一提及工匠两字会感觉不好，但他们在日常生活中依然起了很重要的作用。</p>
<p>但是在某些问题上面，想根本性的解决，或者解决一些用直觉无法解决的问题时，就必须用自上而下的思考方式去理解。</p>
<p>拿一道Google面试体来说：在一个房间里面可以容纳多少高尔夫球？如果拿常规思维，一听到这个题目估计就懵逼了，接下来的问题只能交给直接去解决，往往得到的是一种错误的。</p>
<p>如果想成，一个高尔夫球4厘米宽，在一个15平方米，高约3米的房间内，瞬间问题就可以被当做一个小学问题去解决。尽管最后没有一个明确的答案，但是在量级上面是不会错的。</p>
<p>进一步的例子，在创造计算机的过程中，常人想问题的方式是先做一两个能解决简单问题的计算机，然后越做越复杂。这种方式在设计出来的计算机中会不断的遇见问题，甚至有时候要推翻之前的重新来设计计算机。</p>
<p>实际上在图灵之前，计算机的发展都是沿袭这个思路来的。而图灵的思路与常人正好相反，它现在思考以下三个问题</p>
<p>第一个问题，世界上是否所有数学问题都有明确的答案？</p>
<p>第二个问题，如果有明确的答案，是否可以通过有限步骤的计算得到答案？</p>
<p>第三个问题，那些有可能在有限步骤计算出来的数学问题，是否有一种假象的机械，让他不断运行，最后当机器停下来的时候，那个数学问题就解决了。</p>
<p>经过时间的检验，以这样问题，去理解计算机，并且设计出来的计算机思想，直到现在都在沿用。这是一种从细节跳脱出来，就好比，你要观察一只蚂蚁的行进路线，跟在它屁股后面是办不到的，你必须从他头顶上观察。</p>
<p>但是要跳脱细节，把问题抽象出来的这种工程思维，是有前提的，你需要足够多的理论知识去丰富自己。</p>
<p>在设计一个东西之初，通过理论看到它的极限在哪里，从而不必要去为了一些不切实际的想法的去浪费努力。</p>
<p>同样对于进一步教育来说，如果你想去透彻的解决并理解某问题，必须拥有足够多的知识，从这个问题出发，无非就是一个复合型的数学问题。从下而上的思考方式，无非一点点递进，深陷细节到头来只能跟着别人的脚步来走。但只有从上而下，教育就不仅仅是知识的简单提升。</p>
<p>21世纪，计算机改变了整个世界，对于新时代的发展，这样从顶至下的思维方式，会是解决问题的前提。</p>
<p>回过头来，最终还是要明确你要成为怎么样的一个人。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[log001]]></title>
      <url>http://yoursite.com/2018/02/02/log001/</url>
      <content type="html"><![CDATA[<p>订阅得到的专栏也有一年时间了，但他们多是碎片话的知识，我至今累计订阅的5个专栏，一个专栏一年至少365篇文章，5个就是将近1600篇文章，每一篇文章都具有一个观点，或者说几篇文章一个系列。庞大的知识，经过一次阅读也就一些产生共鸣的些许文章有影响，说收获的话还真说不上来，可能更过的是潜移默化的吧，曾今也计划逐步的开始整理这些文章，但终究成为曾今。</p>
<p>不过这件事情，不管结果怎样都是应该继续做下去的。不说结果有多好，但至少是对自己有帮助的事情。</p>
<hr>
<p>今天从新听了一遍VOA，竟然感觉他说的好慢，虽然它本来就是慢速英语，但对于半年前的我来说，依然理解吃力。</p>
<hr>
<p>TODO List</p>
<ul>
<li>[x] 学太极</li>
<li>[ ] 七点起床</li>
<li>[x] 早上起来学习英语</li>
<li>[x] 基础2小时</li>
<li>[x] 项目2-3小时</li>
<li>[x] 下午英语学习</li>
<li>[x] 10点开会总结</li>
<li>[x] 得到两篇文章</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[log000]]></title>
      <url>http://yoursite.com/2018/02/01/log000/</url>
      <content type="html"><![CDATA[<p>起源是在Yotube上面看到有很多人在拍<code>vlog</code>，于是乎，就联想到现在的状况。订阅了三个按年付费的知识付费栏目，基本上都是日更，刚开始可能会觉的很新鲜，但是随着时间的推移，自己每天需要的做的事情，也慢慢开始变得多起来。有时，真的只能记住一些花一天绝大部分时间z在做的事情。现在每天要干的事情，有学英语、学技术、写项目、练太极、看书、看日常订阅的专栏。如果你稍微偷懒或者不注意，时间就悄悄的溜走了。索性，直接给自己开一个活动，用来记录一天自己的成长与发生的事情～。</p>
]]></content>
      
        <categories>
            
            <category> 2018-2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计划]]></title>
      <url>http://yoursite.com/2018/02/01/Splan/</url>
      <content type="html"><![CDATA[<h2 id="曾经"><a href="#曾经" class="headerlink" title="曾经"></a><strong>曾经</strong></h2><p>刚开始自己主动制定计划还是因为在那段时间，事情多到用脑子经常发生冲突,只能简单用笔和纸记录一下接下来要做的事情。对于计划的固有映象还保留在，想去依靠一个死的计划，来约束一个随时充满变数的人，根本就是一个笑话。但，当我渐渐习惯之后，开始有些意识到，通过它好像得到了些很不错的东西。</p>
<ol>
<li><p>更好的理解自己</p>
</li>
<li><p>拿回时间的控制权</p>
</li>
</ol>
<p>它的收获抽象的超乎想象，但除此以外，我想，自己还学会了些许坚持。</p>
<h2 id="开始的开始"><a href="#开始的开始" class="headerlink" title="开始的开始"></a><strong>开始的开始</strong></h2><p><strong>只在你下定决心并且迈出第一步时，才会真正的开始。仅仅从单纯的做规划来说，其本身意义并不大，一定要找到这件事属于自己的那唯一的意义。</strong>这两句话，应该是在做任何想做成的事情上面，都应该遵守的。</p>
<p>制定规划，效果并没有想象中的那么的快，要不，也不会有那么多人认为无用。任何需要努力才会得到的东西都已经不属于<strong>低垂的果实</strong>。当你们把它定义为这么一件事情时，成功摘取它的收获就不仅仅限于那颗果实了。想得到它并不容易，但是想轻而易举的得到，那根本就是一个无稽之谈。这一切都应该是你应该意识到的东西，通往优秀之路，并不是仅仅是你想象中的那么难而已，你为此你也应该付出足够多的代价。</p>
<p>给自己一个明确的规划，是你最应该的完成的，同时它也是使你变得优秀的第一步。</p>
<h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a><strong>规划</strong></h2><p>对于计划，实施起来你所需要的工具，一个根笔和一张纸，并且还是一个正在想此刻这件事情的大脑就够了。接下来开动你的双手和大脑在纸上面写入如下类似的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">7:00            起床</div><div class="line">7:05 -- 8:05    早饭，洗漱，看早报</div><div class="line">...</div><div class="line">...</div><div class="line">...</div><div class="line">24:00           睡觉</div></pre></td></tr></table></figure></p>
<p>顺带写上分析和为什么要做计划也是不错的。到这里，我的计划就算完成，接着开始执行就可以了。下面我们来简单总结一下。</p>
<p>开个玩笑～，但是在这里就结束的人，你们根本就没有做好任何准备，或许，你们想去做一个让自己心灵得到安慰的事情仅仅而已，除此以外我真的为你们找不到其他理由。</p>
<p>在这就结束的人，我想你们应该缺乏一些认知。如果你在一张白纸上随意点一个点，并看不出什么，但随着你点点数量的增加，你会在某块区域聚集，到此这张纸你才能看出一点规律。这张纸才有了它的价值。对于现在这个大数据时代，只要拥有足够的信息，你会得到对于一个社会群体很多具有预测性的知识，进而去使用它们，例如广告，视频推送等。如果把它落到一个人身上，表面上你可以很大几率预测你的行为，本质上，你会得到你生活中那些恒定不变的东西。</p>
<p>在基于这样认知的前提的下，你需要的就不仅仅是一张计划表了，你需要随着时间推移，不断的去修正你的计划，只要你在执行计划的过程中，意识到这个计划已经不太适合自己，就应该去调整计划并且调整自己。这是一个不断自我了解，自我提高的一个过程。我常常说一句话：<strong>要常立志，而不能立常志</strong>，只有你不断的检省，你才会不断在这个过程中认识到自己不足，进而去不断的提高。最后你将会得到的东西就让你去感受吧。</p>
<p>所以你应该不断的重复下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">制定计划</div><div class="line">执行计划</div><div class="line">反思计划</div></pre></td></tr></table></figure></p>
<h2 id="坚持"><a href="#坚持" class="headerlink" title="坚持"></a><strong>坚持</strong></h2><p>坚持是一种能力，而能力是可以后期培养的。如果你还认为自己并不具备这种能力，那么接下来的事情很简单，Just do it。</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a><strong>结束语</strong></h2><p>我也是一名不断在这条通往更优秀的路上前进的人，希望我的一些话可以帮助到你。并且我也十分愿意去结交正在变得更优秀的你们。在这里并不会留联系方式，如果咱们彼此足够优秀，那我们迟早会见面的，所以在这里提前说一句：”你好，我的朋友”。</p>
]]></content>
      
        <categories>
            
            <category> 2018-02 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JianRan </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[感谢我前进路上所有帮助过我的人以及我自己]]></title>
      <url>http://yoursite.com/2017/12/14/%E6%84%9F%E8%B0%A2%E6%88%91%E5%89%8D%E8%BF%9B%E8%B7%AF%E4%B8%8A%E6%89%80%E6%9C%89%E5%B8%AE%E5%8A%A9%E8%BF%87%E6%88%91%E7%9A%84%E4%BA%BA%E4%BB%A5%E5%8F%8A%E6%88%91%E8%87%AA%E5%B7%B1/</url>
      <content type="html"><![CDATA[<p>2017年后半年我升大三以后，紧接是三门专业课，都算是重量级的——操作系统、计算机网络、数据库。因为自从大二开始以来，到现在，基本所有的专业课已经适应了自学，感觉在课堂上效率确实有那么一点低。好吧，不仅仅是有点低～。之后，就一门课一门课的去和代课老师谈，好让老师们同意，我想自学的这个想法。在自己的圈子中，我建议很多人都这样做，无奈不知道是什么原因，所有拥有我这样想法的人都碰了一鼻子灰，但自己去做的时候，反而一帆风顺，无论是班主任还是代课老师，经过几次沟通之后，都得到了许可。</p>
<p>说实话，当时的心情是真的开心。好像世界总是在眷顾我一样，从最初的班干部，到后来尝试着接一些项目来做，再到之后的已经历时一年的不上课计划，每一次当我想要什么样的资源的时候，总是十分自然的就得到了。而在大学开始之前，凡是个坎我都能摔的，前仰后翻的。</p>
<p>这么巧合的事情，刚开始时，落到谁身上，谁能不乱想。相信只要你认知以内的可能性，保证都去想过了，妖魔鬼怪, 风水，运势，星座等肯定都在脑子里面浮想联翩。</p>
<hr>
<blockquote>
<p>时间是任何人的老师，他会教会你，在人生路上所有的事情。</p>
</blockquote>
<p>渐渐我意识到，所有的这些都是在我努力提升自己之后的发生的，这里并不单单想说，努力可以改变人生之类的话，对努力而言，我抱着和知识基本一致的看法，「 纯粹的知识是没有任何意义的，同样的，努力同样也基本如此 」 。而更想表达，这个世界真的会让正确的人出现在正确的地点，彼此相同的人会相互吸引。这些某种特质相同的人，会更好的理解你的想法，进而认同并且给予我资源，我想感谢的恰恰是这是这些人，当然还有我的亲人，尽管我的很多做法，都是在做异类，已经超出一般人的限度，但他们还是一如既往的支持我。</p>
<p>在我前进路上，帮助过我的人，真的太多，虽然仅仅是发生在大学两年半的时间里面，但恰恰就是因为在如此短的时间内，有这么多人帮助过我，我能做的也仅仅是以我当时的能力来最大限度的感谢你们了。未来的路还很长，我也必然被很多人帮助，但是凡是帮助过我的，无论大小，我都会牢牢记在心里。</p>
<hr>
<p>大三上半学期即将结束，这个学期唯一的遗憾就是，自己太过于忙碌，忙的甚至没有片刻时间，让自己回头来看看和驻足思考。</p>
<p>除了技术外，这学期收货的更多的感恩。</p>
<p>最后希望自己在下一个半年，自己可以找到一个平衡点。</p>
<p>#That’s All</p>
]]></content>
      
        <categories>
            
            <category> 2017-12 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[心态前言]]></title>
      <url>http://yoursite.com/2017/10/13/%E5%BF%83%E6%80%81%E5%89%8D%E8%A8%80/</url>
      <content type="html"><![CDATA[<blockquote>
<p>唯有冷静去接收一切，才会真正的持久。激情背后的浮躁往往是使一件事情变的糟糕的源头。学会在激情中冷静是恰当的进步之道</p>
</blockquote>
<p>深入呼吸 3min …</p>
<hr>
<p>哪怕是跟着前人的脚印，写懂一个操作系统都绝非易事。无论你的平台是什么，你的每一个脚印务必踏的坚实。你的前进才是真正的前进。</p>
<p>在写操作系统的时候，必须处在一个冷静的状态下去完成。何为冷静？遇事不慌不乱，有条不紊。不在乎时间成本，只求写一点懂一点（这是针对当前计划来说的）。</p>
<p>在接下来的工作中，将会接触到很多工具，而且这些工具很多将会是没有接触过得，同时也包括很多新的知识点。当我们遇到的时候应该兴平气和的看懂之后才可以前进，遇到不会的地方及时停止去解决掉，在必要的时候要写文档总结记录。每一篇文章力求 <strong>只字不差</strong> 的冷静阅读。</p>
<hr>
<p>当然这里的「不在乎时间成本」实际是节约时间，不过实际怎么样无所谓，它的结果会导致计划周期变长，为了不让他变得不可控，我们来简单计算一下，首先这个目标计划在12月底完成，距离现在还有77天时间，这本书的总页数469，还有大概450页，平均每天大概要看6页，我们每天花费的时间大概是 90min，平均下来每页15分钟看完。</p>
<p>这么算下来时间是很充足的，更不用说，这本书讲的会很明白很好懂，另外书中有很大一部分实在聊天。</p>
<p>时间很充足，请耐心的学习</p>
<h1 id="That’s-All"><a href="#That’s-All" class="headerlink" title="That’s All"></a>That’s All</h1>]]></content>
      
        <categories>
            
            <category> 2017-10 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Adapter设计模式与 ListView 和 RecylerView]]></title>
      <url>http://yoursite.com/2017/09/05/Adapter%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E-ListView-%E5%92%8C-RecylerView/</url>
      <content type="html"><![CDATA[<blockquote>
<p>永远不做超出当前认知的事情</p>
</blockquote>
<p>简单谈谈 Adapter设计模式，及其在 Android 中的简单应用，尝试着去理解这些设计。</p>
<p> Adapter模式的<strong>定义：</strong>适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配的问题而无法一起工作的两个类能够一起工作。</p>
<p> Adapter模式 换句话说，就像条想要给手机充电的USB线，光有USB插头是无法插到插座上给手机充电的，需要连接个充电头才可以实现。那么这个充电头就是 Adapter。提供了一个转换接头，让USB接口与插座完全解耦，两者之间没有任何联系。在代码中实现其实就是在这二者中间加入了一个类获取其他可以实现这种功能的代码。</p>
<p> 比较经典的是 ListView 和 RecylerView 的 Adapter 类，两者的结构完全相同。</p>
<p> 首先，ListView 和 RecylerView 直接需要View的引用，及其View的数量等信息，但是我们能提供的只能是什么信息都没有的View 和 独立的一堆信息，这个工作如果直接传给 ListView 和 RecylerView 他们来做，就会直接耦合在一起，ListView 和 RecylerView 将会过于臃肿，结构混乱。</p>
<p> 我们做的事情是把对于他们而言，他们所需要的信息由Adapter直接提供。而 Adapter的具体细节他们不需要知道了。我们把 信息全部传递给 Adapter，让它进行内部的组合，组合处合理的信息即可。</p>
<blockquote>
<p>说白了就是USB接口和充电头之间的关系</p>
</blockquote>
<h2 id="两种不同的实现方式"><a href="#两种不同的实现方式" class="headerlink" title="两种不同的实现方式"></a>两种不同的实现方式</h2><p><strong>类适配器模式</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">//USB</div><div class="line">public class USB&#123;</div><div class="line"></div><div class="line">    //使用USB传输电能</div><div class="line">    public void usbEnergy()&#123;&#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">//转换头</div><div class="line">public  interface TransHead&#123;</div><div class="line"></div><div class="line">    //使用插头传输电能</div><div class="line">    public void usbEnergy;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class EnergyAdapter extends USB implements TransHead&#123;</div><div class="line"></div><div class="line">    public void usbEnergy()&#123;</div><div class="line">        usbEnergy()&#123;&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>对象适配器模式</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class EnergyAdapter implements TransHead&#123;</div><div class="line">    USB usb;</div><div class="line">    </div><div class="line">    EnergyAdapter(USB usb)&#123;</div><div class="line">        this.usb = usb;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void usbEnergy()&#123;</div><div class="line">        usb.usbEnergy();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="That’s-All"><a href="#That’s-All" class="headerlink" title="That’s All"></a>That’s All</h2>]]></content>
      
        <categories>
            
            <category> 2017-9 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fragment详解——管理Fragment]]></title>
      <url>http://yoursite.com/2017/09/04/Fragment%E8%AF%A6%E8%A7%A3%E2%80%94%E2%80%94%E7%AE%A1%E7%90%86Fragment/</url>
      <content type="html"><![CDATA[<p>在之前的文章当中，我们总览性的了解到 Fragment 的基本使用和用途。一些最为基础的知识已经学习完毕。接下来我们就要深入到更加具体的内容来进行学习。</p>
<p>##FragmentManager</p>
<p>它的作用是对Fragment的状态进行保存与恢复。对 Fragment 的一些管理操作都被封装到这个类当中，最让我们熟知的用法，想必是获取一个 FragmentManager 实例，进而开启一个事务对 Fragment 进行相关操作。获取 FragmentManager 是 Activity 本身的一个方法的结果（getFragmentManager）。仔细思考其中的道理，不难想清楚，对于 Activity 而言它本身是可以依赖多个 Fragment，如果对于每个Fragment单独操作，不免费事费力，不如提供一个统一的一个接口来进行使用。</p>
<p>常用的方法如下：</p>
<ol>
<li>findFragmentById()<br>根据 ID 来获取对应的 Fragment 实例，主要使用在静态绑定中</li>
<li>findFragmentByTag()<br>意思基本和上面相同</li>
<li>beginTransaction()<br>开启一个事务</li>
</ol>
<p>##FragmentTransaction</p>
<p>常用方法如下：</p>
<ol>
<li><p>add(int containerViewId, Fragment fragment, String tag)<br>将一个fragment实例添加到Activity的最上层 </p>
</li>
<li><p>remove(Fragment fragment)<br>将一个fragment实例从Activity的fragment队列中删除  </p>
</li>
<li><p>replace(int containerViewId, Fragment fragment)<br>替换 containerViewId 中的 fragment 实例，注意，它首先把 containerViewId 中所有 fragment 删除，然后再 add 进去当前的 fragment  </p>
</li>
</ol>
<p>##有关回滚——FragmentTransaction</p>
<p>上面简单记录了一个相关的主要方法，现在我们来简单说一个回滚功能。要实现回滚只需要 commit() 和 addToBackStack(String tag)这个两个方法，每次在commit()之前，使用<strong>addToBackStack()</strong>将其添加到回退栈中。需要回退的时候只需要使用 popBackStack() 方法即可，回退的单位是以一次 commit() 为主。</p>
<blockquote>
<p>另外补充说明一下，FragmentManager 还提供了监听回退栈的方法<br>FragmentManager::addOnBackStackChangedListener(listener);//添加监听器<br>FragmentManager::removeOnBackStackChangedListener(listener);//移除监听器 </p>
<p>不过,这里你们要注意理解为什么 FragmentManager 提供监听回退栈的方法。</p>
</blockquote>
<p>##That’s All</p>
]]></content>
      
        <categories>
            
            <category> 2017-9 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fragment详解——基本使用]]></title>
      <url>http://yoursite.com/2017/07/21/Fragment%E8%AF%A6%E8%A7%A3%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>我们先从一个总览的角度去理解什么是「 静态 」添加 Fragment 和「 动态 」添加 Fragment？</p>
<p>先让我们来看一个图片，关系显然易见，对于 Fragment 来说他是 Activity 与 View 中间用来衔接的。 Activity 使用 Fragment 的形式是通过控件的形式来进行使用的，对于静和动态两种不同的形式，是对于 Activity 与 Fragment 之间这一层关系来说。写死了，那就说明是「 静态 」，运行时添加的，那就说明是「 动态 」。关系理清楚了，对于 Fragment 的使用方式也容易记忆并且使用了，具体的一些其他细节会在下面写出并且说明。<br><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fhrlstqlzkj30ks0bq74c.jpg" alt=""></p>
<p>##公共资源的准备</p>
<p>上面说了，对于静态和动态两种方式使用 Fragment，主要差别在于 Activity 与 Fragment的关系是否是可以活动的。而 Fragment 与 View 的关系自然是一一对应的。一个 Fragment 操作一个 View 的业务逻辑。</p>
<p>在这里我们可以简单思考一下，因为 Fragment 的存在 Activity 与 View 彻底解耦，任何 View 可以随意结合任何一个 Activty，使用更加灵活。并且一个好消息是  创建一个 Fragment 的消耗很小，虽然 Fragment 本身也有很多的 Bug 存在，但是与之也有对应的解决方案，同时 Google 也在慢慢修改中。</p>
<p><strong>让我们开始:</strong><br>1、创建第一个 fragmeng_1.xml, 代码如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:background="#00ff00" &gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width="wrap_content"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:text="This is fragment 1"</div><div class="line">        android:textColor="#000000"</div><div class="line">        android:textSize="25sp" /&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>2、创建第二个 fragment_2.xml，代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;  </div><div class="line">    android:layout_width=&quot;match_parent&quot;  </div><div class="line">    android:layout_height=&quot;match_parent&quot;  </div><div class="line">    android:background=&quot;#ffff00&quot; &gt;  </div><div class="line">  </div><div class="line">    &lt;TextView  </div><div class="line">        android:layout_width=&quot;wrap_content&quot;  </div><div class="line">        android:layout_height=&quot;wrap_content&quot;  </div><div class="line">        android:text=&quot;This is fragment 2&quot;  </div><div class="line">        android:textColor=&quot;#000000&quot;  </div><div class="line">        android:textSize=&quot;25sp&quot; /&gt;  </div><div class="line">  </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>3、连续创建两个 Fragment 类，并且将 fragment_1.xml 和 fragment_2.xml与之进行绑定。<br>代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class Fragment1 extends Fragment &#123;  </div><div class="line">    @Override  </div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;  </div><div class="line">        return inflater.inflate(R.layout.fragment_1, container, false);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public class Fragment2 extends Fragment &#123;  </div><div class="line">    @Override  </div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;  </div><div class="line">        return inflater.inflate(R.layout.fragment2_, container, false);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到此我们已经将xml 与 Fragment 一一对应。</p>
<p>##静态绑定</p>
<p>这个是直接把 Activity 与 Fragment 固定，通过 fragment 控件写死的，在之下的代码中需要注意的是，name 属性代表的是与这个控件进行绑定的 Fragment 的全类名。同时必须要有唯一标识符，这个用属性 id 或者 tag 来进行表示即可。<br>代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;--!activity_main.xml--&gt;</div><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    tools:context=&quot;jinfangzhang.github.fragmentdemo.MainActivity&quot;&gt;</div><div class="line"></div><div class="line">    &lt;fragment</div><div class="line">        android:tag=&quot;@+id/fragment1&quot;</div><div class="line">        android:name=&quot;jinfangzhang.github.fragmentdemo.Fragment_1&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_weight=&quot;1&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        /&gt;</div><div class="line">    &lt;fragment</div><div class="line">        android:id=&quot;@+id/fragment2&quot;</div><div class="line">        android:name=&quot;jinfangzhang.github.fragmentdemo.Fragment_2&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_weight=&quot;1&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        /&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>Activity中onCreate函数什么都没有写。</p>
<p>##动态绑定</p>
<p>activity_main.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/button_1&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/button_2&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;FrameLayout</div><div class="line">        android:id=&quot;@+id/fragment_container&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<p>对于 Activity 中的方法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main_2);</div><div class="line">    Log.e(&quot;Activity&quot;,&quot;Activity---onCreate()&quot;);</div><div class="line">    Button btnLoadFrag1 = (Button)findViewById(R.id.button_1);</div><div class="line">    btnLoadFrag1.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onClick(View v) &#123;</div><div class="line">            FragmentManager manager = getFragmentManager();</div><div class="line">            FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">            Fragment_1 fragment1 = new Fragment_1();</div><div class="line"></div><div class="line">            transaction.replace(R.id.fragment_container,fragment1);</div><div class="line">            transaction.commit();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    Button btnLoagFrag2 = (Button)findViewById(R.id.button_2);</div><div class="line">    btnLoagFrag2.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onClick(View v) &#123;</div><div class="line">            FragmentManager manager = getFragmentManager();</div><div class="line">            FragmentTransaction transaction = manager.beginTransaction();</div><div class="line">            Fragment_2 fragment2 = new Fragment_2();</div><div class="line">            transaction.replace(R.id.fragment_container, fragment2);</div><div class="line">            transaction.commit();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里主要分为四步：<br>1、获取 FragmentManager 对象，在 v4 包里面使用的是 getSupportFragmentManager() 获得，原生使用 getFragmentManager().</p>
<blockquote>
<p>对于原生和 v4 的使用，其实差别就在 Activity 继承是什么，如果你的 Fragment 继承来自 v4，那么 Activity 应该继承 FragmentActivity，而如果是原生，就什么都不要动了</p>
</blockquote>
<p>2、通过 Manager 对象获取并且开启一个事务。<br>3、向容器内加入Fragment，一般使用add或者replace方法实现，需要传入容器的id和Fragment的实例。<br>4、提交事务，调用commit方法提交。</p>
]]></content>
      
        <categories>
            
            <category> 2017-7 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fragment详解——生命周期]]></title>
      <url>http://yoursite.com/2017/07/21/Fragment%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>这是关于Fragment的生命周期图，简单理解下，同时下面是Fragment与Activity生命周期对比</p>
<p><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fhrbuh1lqfj30k10npq52.jpg" alt=""></p>
<hr>
<p>接下来我们逐个对方法解释：<br><strong>onAttach:</strong> onAttach()方法与Activity关联之后调用，也就是在执行了 「setContentView（）」这个方法之后，就和 fragment 建立了联系。</p>
<p><strong>onCreate:</strong> fragment 初次创建时调用，尽管他看起来非常像 Activty 的 onCreate 。此时 Activity 还没有建立完成，因为我们的 Fragment 也是 Activity 的一部分，所以在这里你想获取一些关于 Activity 中的一些资源，将会获取不到。</p>
<p><strong>onCreateView:</strong> 在这个 fragment构造它的布局时进行调用。在这里返回此Fragment的一个视图层次结构。同时使用 LayoutInflater 的 inflater() 方法来构造实图，代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public View onCreateView(LayoutInflater inflater, ViewGroup container,  </div><div class="line">                         Bundle savedInstanceState) &#123;  </div><div class="line">    return inflater.inflate(R.layout.fragment3, container, false);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>onActivityCreated:</strong>在 Activity 的 onCreate 完成之后会调用这个函数，所以这个时候 Activity 已经创建完毕，在这个方法当中可以获取 Activity 的所有资源的。 </p>
<p><strong>onStart:</strong>当到 onStart() 时, Fragment 对用户就是可见的了，但是这个时候用户还没有和 Fragment 交互。在生命周期中也可以看到，Fragment 的 onStart 与 Activity 的 onStart 是绑定着的。</p>
<p><strong>onResume:</strong>这是 Fragment 与用户交互之前进行的最后一个回调。这个方法执行结束之后，就可以与 Fragment 进行交互了</p>
<p>onPause：此回调与 Activity 的 onPause() 相绑定，与 Activity 的 onPause() 意义一样。</p>
<p><strong>onStop:</strong>这个也和 onPause 相同就不解释了。</p>
<p><strong>onDestroyView:</strong> 如果 Fragment 即将被结束或者保存，那么撤销方向上面的下一个回调将会是该方法。这个方法会将在 onCreateView 中创建的视图与这个 Fragment 分离。下次这个 Fragment 若要显示，那么将会重新创建视图。</p>
<p><strong>onDestroy:</strong>当这个fragment不再使用时调用。需要注意的是，它即使经过了onDestroy()阶段，但仍然能从Activity中找到，因为它还没有Detach。</p>
<p><strong>onDetach:</strong>Fragment生命周期中最后一个回调是onDetach()。调用它以后，Fragment就不再与Activity相绑定，它也不再拥有视图层次结构，它的所有资源都将被释放。</p>
<hr>
<p>总结:<br>在这里简单总结以下 Fragment 过程。<br>大概可以分为两类: 第一类是 Fragment 与 Activity 建立联系，第二类是 Fragment 与 View 建立联系。<br>过程总结如下:<br>1、与 Activyt 建立联系<br>2、与 View 建立联系<br>3、与 用户 进行交互<br>4、与 View 失去联系<br>5、与 Activity 失去联系</p>
]]></content>
      
        <categories>
            
            <category> 2017-7 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[共享库]]></title>
      <url>http://yoursite.com/2017/06/08/%E5%85%B1%E4%BA%AB%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>前一篇我们讲了静态库，我们来到了 链接阶段的最后一部分，事不宜迟继续我们今天的战斗。</p>
<hr>
<p>组成共享库的目标文件和一般的目标文件是有所不同的，在编译时要加 -fPIC 选项</p>
<p>例如</p>
<pre><code>gcc -c -fPIC stack/stack.c stack/push.c stack/pop.c stack/is_empty.c
</code></pre><p>由于接下来要用 objdump -dS 把反汇编指令和源代码穿插起来分析，所以用 -g 选项来加调试信息。注意，必须在编译每个文件时都要加 -g 选项，而不能只在最后链接时加 -g 选项，如果目标文件中没有调试信息，链接生成的可执行文件也不会有的。我们反汇编查看下 push.o </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">jianran@jianran:~/桌面/x86HB$ objdump -dS push.o</div><div class="line"></div><div class="line">push.o：     文件格式 elf64-x86-64</div><div class="line"></div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line">0000000000000000 &lt;push&gt;:</div><div class="line">extern char stack[512];</div><div class="line">extern int top;</div><div class="line"></div><div class="line">void push(char c)&#123;</div><div class="line">   0:   55                      push   %rbp</div><div class="line">   1:   48 89 e5                mov    %rsp,%rbp</div><div class="line">   4:   89 f8                   mov    %edi,%eax</div><div class="line">   6:   88 45 fc                mov    %al,-0x4(%rbp)</div><div class="line">    stack[++top] = c;</div><div class="line">   9:   8b 05 00 00 00 00       mov    0x0(%rip),%eax        # f &lt;push+0xf&gt;</div><div class="line">   f:   83 c0 01                add    $0x1,%eax</div><div class="line">  12:   89 05 00 00 00 00       mov    %eax,0x0(%rip)        # 18 &lt;push+0x18&gt;</div><div class="line">  18:   8b 05 00 00 00 00       mov    0x0(%rip),%eax        # 1e &lt;push+0x1e&gt;</div><div class="line">  1e:   48 63 d0                movslq %eax,%rdx</div><div class="line">  21:   48 8d 05 00 00 00 00    lea    0x0(%rip),%rax        # 28 &lt;push+0x28&gt;</div><div class="line">  28:   0f b6 4d fc             movzbl -0x4(%rbp),%ecx</div><div class="line">  2c:   88 0c 02                mov    %cl,(%rdx,%rax,1)</div><div class="line">  2f:   90                      nop</div><div class="line">  30:   5d                      pop    %rbp</div><div class="line">  31:   c3                      retq</div></pre></td></tr></table></figure>
<p>指令中方式用到 stack 和 top 的地址都用 0x0 表示，以备在重定向时修改。再看 readelf 的 .rel.text 段的信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">重定位节 &apos;.rela.text&apos; 位于偏移量 0x488 含有 4 个条目：</div><div class="line">  偏移量          信息           类型           符号值        符号名称 + 加数</div><div class="line">00000000000b  000e00000002 R_X86_64_PC32     0000000000000000 top - 4</div><div class="line">000000000014  000e00000002 R_X86_64_PC32     0000000000000000 top - 4</div><div class="line">00000000001a  000e00000002 R_X86_64_PC32     0000000000000000 top - 4</div><div class="line">000000000024  000f00000002 R_X86_64_PC32     0000000000000000 stack - 4</div></pre></td></tr></table></figure>
<p>上述信息指出了指令中有四处需要在重定位时修改。编译连接成可执行文件之后，再做反编译分析:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">0000000000000675 &lt;push&gt;:</div><div class="line">extern char stack[512];</div><div class="line">extern int top;</div><div class="line"></div><div class="line">void push(char c)&#123;</div><div class="line"> 675:   55                      push   %rbp</div><div class="line"> 676:   48 89 e5                mov    %rsp,%rbp</div><div class="line"> 679:   89 f8                   mov    %edi,%eax</div><div class="line"> 67b:   88 45 fc                mov    %al,-0x4(%rbp)</div><div class="line">    stack[++top] = c;</div><div class="line"> 67e:   8b 05 8c 09 20 00       mov    0x20098c(%rip),%eax        # 201010 &lt;top&gt;</div><div class="line"> 684:   83 c0 01                add    $0x1,%eax</div><div class="line"> 687:   89 05 83 09 20 00       mov    %eax,0x200983(%rip)        # 201010 &lt;top&gt;</div><div class="line"> 68d:   8b 05 7d 09 20 00       mov    0x20097d(%rip),%eax        # 201010 &lt;top&gt;</div><div class="line"> 693:   48 63 d0                movslq %eax,%rdx</div><div class="line"> 696:   48 8d 05 a3 09 20 00    lea    0x2009a3(%rip),%rax        # 201040 &lt;stack&gt;</div><div class="line"> 69d:   0f b6 4d fc             movzbl -0x4(%rbp),%ecx</div><div class="line"> 6a1:   88 0c 02                mov    %cl,(%rdx,%rax,1)</div><div class="line"> 6a4:   90                      nop</div><div class="line"> 6a5:   5d                      pop    %rbp</div><div class="line"> 6a6:   c3                      retq</div></pre></td></tr></table></figure>
<p>原来指令中 0x0 被改成了正经的地址，这样做了重定位之后，各段的加载就定死了，因为在指令使用了绝对地址。</p>
<p>我们来看看用了 -fPIC 选项编译生成的目标文件有什么不同:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">jianran@jianran:~/桌面/x86HB$ objdump -dS push.o</div><div class="line"></div><div class="line">push.o：     文件格式 elf64-x86-64</div><div class="line"></div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line">0000000000000000 &lt;push&gt;:</div><div class="line">extern char stack[512];</div><div class="line">extern int top;</div><div class="line"></div><div class="line">void push(char c)&#123;</div><div class="line">   0:   55                      push   %rbp</div><div class="line">   1:   48 89 e5                mov    %rsp,%rbp</div><div class="line">   4:   89 f8                   mov    %edi,%eax</div><div class="line">   6:   88 45 fc                mov    %al,-0x4(%rbp)</div><div class="line">    stack[++top] = c;</div><div class="line">   9:   48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 10 &lt;push+0x10&gt;</div><div class="line">  10:   8b 00                   mov    (%rax),%eax</div><div class="line">  12:   8d 50 01                lea    0x1(%rax),%edx</div><div class="line">  15:   48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 1c &lt;push+0x1c&gt;</div><div class="line">  1c:   89 10                   mov    %edx,(%rax)</div><div class="line">  1e:   48 8b 05 00 00 00 00    mov    0x0(%rip),%rax        # 25 &lt;push+0x25&gt;</div><div class="line">  25:   8b 00                   mov    (%rax),%eax</div><div class="line">  27:   48 8b 15 00 00 00 00    mov    0x0(%rip),%rdx        # 2e &lt;push+0x2e&gt;</div><div class="line">  2e:   48 98                   cltq</div><div class="line">  30:   0f b6 4d fc             movzbl -0x4(%rbp),%ecx</div><div class="line">  34:   88 0c 02                mov    %cl,(%rdx,%rax,1)</div><div class="line">  37:   90                      nop</div><div class="line">  38:   5d                      pop    %rbp</div><div class="line">  39:   c3                      retq</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> 重定位节 &apos;.rela.text&apos; 位于偏移量 0x4c8 含有 4 个条目：</div><div class="line">  偏移量          信息           类型           符号值        符号名称 + 加数</div><div class="line">00000000000c  000f0000002a R_X86_64_REX_GOTP 0000000000000000 top - 4</div><div class="line">000000000018  000f0000002a R_X86_64_REX_GOTP 0000000000000000 top - 4</div><div class="line">000000000021  000f0000002a R_X86_64_REX_GOTP 0000000000000000 top - 4</div><div class="line">00000000002a  00100000002a R_X86_64_REX_GOTP 0000000000000000 stack - 4</div></pre></td></tr></table></figure>
<p>push.o 的代码几乎完全和 之前的不相同，.rela.text 表中的类型也不相同。</p>
<p>下来我们编译生成共享库再反汇编分析:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">00000000000006f0 &lt;push&gt;:</div><div class="line">extern char stack[512];</div><div class="line">extern int top;</div><div class="line"></div><div class="line">void push(char c)&#123;</div><div class="line"> 6f0:   55                      push   %rbp</div><div class="line"> 6f1:   48 89 e5                mov    %rsp,%rbp</div><div class="line"> 6f4:   89 f8                   mov    %edi,%eax</div><div class="line"> 6f6:   88 45 fc                mov    %al,-0x4(%rbp)</div><div class="line">    stack[++top] = c;</div><div class="line"> 6f9:   48 8b 05 d8 08 20 00    mov    0x2008d8(%rip),%rax        # 200fd8 &lt;top@@Base-0x48&gt;</div><div class="line"> 700:   8b 00                   mov    (%rax),%eax</div><div class="line"> 702:   8d 50 01                lea    0x1(%rax),%edx</div><div class="line"> 705:   48 8b 05 cc 08 20 00    mov    0x2008cc(%rip),%rax        # 200fd8 &lt;top@@Base-0x48&gt;</div><div class="line"> 70c:   89 10                   mov    %edx,(%rax)</div><div class="line"> 70e:   48 8b 05 c3 08 20 00    mov    0x2008c3(%rip),%rax        # 200fd8 &lt;top@@Base-0x48&gt;</div><div class="line"> 715:   8b 00                   mov    (%rax),%eax</div><div class="line"> 717:   48 8b 15 ca 08 20 00    mov    0x2008ca(%rip),%rdx        # 200fe8 &lt;stack@@Base-0x78&gt;</div><div class="line"> 71e:   48 98                   cltq</div><div class="line"> 720:   0f b6 4d fc             movzbl -0x4(%rbp),%ecx</div><div class="line"> 724:   88 0c 02                mov    %cl,(%rdx,%rax,1)</div><div class="line"> 727:   90                      nop</div><div class="line"> 728:   5d                      pop    %rbp</div><div class="line"> 729:   c3                      retq</div></pre></td></tr></table></figure>
<p>在这台机器里面看的不是那么明显，主要还是看背后注释的差距。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">201010 &lt;top&gt; 变成了 # 200fd8 &lt;top@@Base-0x48&gt;</div></pre></td></tr></table></figure>
<p>通过注释我们意识到，我们这个不是一个绝对地址。所以共享库各段的加载地址并没有被定死，可以加载到任意的位置，因为指令中的地址都是相对于 top@@Base 的，这就是位置无关代码的特点。</p>
<p>接下来我们把 main.c 与共享库编译链接在一起，然后运行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">jianran@jianran:~/桌面/x86HB$ gcc main.c -g -L. lstack -Istack -o main</div><div class="line">jianran@jianran:~/桌面/x86HB$ ./main</div><div class="line">./main: error while loading shared libraries: libstack.so: cannot open shared object file: No such file or directory</div></pre></td></tr></table></figure>
<p>结果十分的令人神奇，编译的时候没有问题，然后在执行的时候，报错说找不到 libstack.so。 那么运行时在那些路径下来找共享库呢？</p>
<p>我们先用 ldd 命令查看可执行文件依赖于那些共享库:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jianran@jianran:~/桌面/x86HB$ ldd main</div><div class="line">        linux-vdso.so.1 =&gt;  (0x00007ffcd41ab000)</div><div class="line">        libstack.so =&gt; not found</div><div class="line">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fd788704000)</div><div class="line">        /lib64/ld-linux-x86-64.so.2 (0x00005569c3f91000)</div></pre></td></tr></table></figure></p>
<p>ldd 模拟运行一遍 main程序 ，在运行过程中做动态链接，从而得知这个程序依赖于哪些共享库以及这些共享库都在声明路径下。我们在之前说到过 gcc 调用 ld 做链接时用 -dynamic-linker … 选项指定动态链接器的路径，动态链接器也像其他共享库一样加载到进程的地址空间中。而另一个 -lc 只说明需要链接 libc 却没有指出 libc 库的完整路径，-lstack 也是如此，共享库的路径需要在运行时由动态链接器进行查找。在上面的代码当中，动态链接器找到libc.so.6，而 libstack 的路径没有找到，无法完成链接。</p>
<p>那么动态链接库会到哪些目录下搜索共享库呢？<br>路径搜索顺序如下:</p>
<ol>
<li><p>首先在环境变量 LD_LIBRARY_PATH 保存的路径中查找</p>
</li>
<li><p>然后从缓存文件 /etc/ld.so.cache 中查找。这个缓存文件是由 ldconfig 命令读取配置文件 /etc/ld.so.conf 生成的</p>
</li>
</ol>
<p>3.如果上述步骤没有找到，则到默认的系统库文件目录查找。</p>
<p>知道了搜索顺序，也就算知道了解决方案了:</p>
<p><strong>第一种解决方案</strong>，在运行程序时设置环境变量 LD_LIBRARY_PATH 把共享库所在的目录添加到搜索路径,这种方式，只适合开发调试中临时使用一下，但是不建议使用</p>
<pre><code>export LD_LIBRARY_PATH=~/桌面/x86HB
./main
</code></pre><p>第一条命令在当前 Shell 进程中设置一个环境变量 LD_LIBRARY_PATH，一旦在 Shell 进程当中设置了环境变量，以后每次执行命令时 Shell 进程都会把自己的环境变量传给新创建的进程，所以第二条指令就得以运行成功了。</p>
<p><strong>第二种解决方案</strong>，这是最常用的方法。把 libstack.so 所在的目录的绝对路径添加到配置文件 /etc/ld.so.conf（该文件当中每个路径占一行），然后运行 ldconfig 命令。</p>
<p>ldconfig 命令除了处理 /etc/ld.so.conf 中配置的目录之外，还处理一些默认目录，处理的过程主要是建立索引以便快速查找，处理之后生成 /etc/ld.so.cache 缓存文件，动态链接库就从这个缓存文件中搜索共享库，配置之后通过 ldd 就可以找到了</p>
<p><strong>第三种方法</strong>，就是把 libstack.so 复制到 /usr/lib或者/lib 目录之下。</p>
]]></content>
      
        <categories>
            
            <category> 2017-6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言剖析————静态库]]></title>
      <url>http://yoursite.com/2017/06/08/C%E8%AF%AD%E8%A8%80%E5%89%96%E6%9E%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E9%9D%99%E6%80%81%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>有时候需要把一组代码编译成一个库，这个库在很多项目都要用到，例如 libc 就是这样一个库，我们在不同的程序中都会用到 libc 中定义的库函数（例如 printf（3）和全局变量 （例如 environ（3））。接下来的两篇的重点介绍如何创建这样的库，同时通过这样的方式，让我们来理解进一步理解</p>
<p>我们继续用 stack.c 的例子。为了便于理解，我们把 stack.c 拆分为是个 .c  文件（虽然实际情况下，这么做没有太大的必要），我们接下来用到的代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">/* stack.c */</div><div class="line">char stack[512];</div><div class="line">int top = -1;</div><div class="line"></div><div class="line">/* push.c */</div><div class="line">extern char stack[512];</div><div class="line">extern int top;</div><div class="line"></div><div class="line">void push(char c)&#123;</div><div class="line">    stack[++top] = c;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* pop.c */</div><div class="line">extern char stack[512];</div><div class="line">extern int top;</div><div class="line"></div><div class="line">char pop(void)&#123;</div><div class="line">    return stack[top--];</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* is_empty.c */</div><div class="line">extern int top;</div><div class="line">int is_empty(void)&#123;</div><div class="line">    return top == -1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* stack.h*/</div><div class="line"></div><div class="line">#ifndef STACK_H</div><div class="line">#define STACK_H</div><div class="line">extern void push(char);</div><div class="line">extern char pop(void);</div><div class="line">extern int is_empty(void);</div><div class="line">#endif</div><div class="line"></div><div class="line">/* main.c */</div><div class="line"></div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &quot;stack.h&quot;</div><div class="line"></div><div class="line">int main(void)&#123;</div><div class="line">    push(&apos;a&apos;);</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目录结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">jianran@jianran:~/桌面/x86HB$ tree</div><div class="line">.</div><div class="line">├── main.c</div><div class="line">└── stack</div><div class="line">    ├── is_empty.c</div><div class="line">    ├── pop.c</div><div class="line">    ├── push.c</div><div class="line">    ├── stack.c</div><div class="line">    └── stack.h</div><div class="line"></div><div class="line">1 directory, 6 files</div></pre></td></tr></table></figure></p>
<p>我们把 stack.c、push.c、pop.c、is_empty.c 编译成目标文件:</p>
<blockquote>
<p>$ gcc -c stack/stack.c stack/push.c stack/pop.c stack/is_empty.c</p>
</blockquote>
<p>然后打包成一个静态库 「 libstack.a 」</p>
<blockquote>
<p>$ ar rs libstack.a stack.o push.o pop.o is_empty.o<br>ar: 正在创建 libstack.a</p>
</blockquote>
<p>库文件都是以 lib 开头的，静态库以 .a 作为后缀，表示 Archive。ar命令类似于 tar 命令，也是用来打包的，但是把目标文件打成静态库的格式只能用 ar 命令而不能用 tar 命令。<br><strong>r 选项表示将后面的目标文件列表添加到文件包 libstack.a 中，如果 libstack.a 不存在就创建它，如果 libstack.a 中已有同名的目标文件就替换成新的。</strong><br><strong>s 选项表示为静态库创建索引。这个索引被链接器使用</strong></p>
<p>然后我们把 libstack.a 和 main.c 编译链接在一起</p>
<blockquote>
<p>$ gcc main.c -L. -lstack -Istack -o main</p>
</blockquote>
<p>-L 选项告诉编译器去哪里找需要的库文件，「 -L. 」表示在当前目录找。<br>-lstack 选项告诉编译器要链接 libstack 库， -I 选项告诉编译器去哪里找头文件。</p>
<p>注意，即使库文件就在当前目录，编译器默认也不会去找的，所以 「 -L. 」选项是不能少的。编译器默认去哪里找呢？可以使用 -print-search-dirs 选项查看一下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">jianran@jianran:~/桌面/x86HB$ gcc -print-search-dirs</div><div class="line">install: /usr/lib/gcc/x86_64-linux-gnu/6/</div><div class="line">programs: =/usr/lib/gcc/x86_64-linux-gnu/6/:/usr/lib/gcc/x86_64-linux-gnu/6/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/6/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc</div><div class="line">/x86_64-linux-gnu/6/../../../../x86_64-linux-gnu/bin/x86_64-linux-gnu/6/:/usr/lib/gcc/x86_64-linux-gnu/6/../../../../x86_64-linux-gnu/bin/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gn</div><div class="line">u/6/../../../../x86_64-linux-gnu/bin/</div><div class="line">libraries: =/usr/lib/gcc/x86_64-linux-gnu/6/:/usr/lib/gcc/x86_64-linux-gnu/6/../../../../x86_64-linux-gnu/lib/x86_64-linux-gnu/6/:/usr/lib/gcc/x86_64-linux-gnu/6/../../../../x86_64-lin</div><div class="line">ux-gnu/lib/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/6/../../../../x86_64-linux-gnu/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/6/../../../x86_64-linux-gnu/6/:/usr/lib/gcc/x86_64-l</div><div class="line">inux-gnu/6/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/6/../../../../lib/:/lib/x86_64-linux-gnu/6/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/6/:/usr/li</div><div class="line">b/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/6/../../../../x86_64-linux-gnu/lib/:/usr/lib/gcc/x86_64-linux-gnu/6/../../../:/lib/:/usr/lib/</div></pre></td></tr></table></figure>
<p>其中的 <strong>libraries</strong> 就是库文件的搜索路径列表，各路径之间用冒号隔开。在处理 -lstack 选项时， gcc 首先到 -L 选项指定的目录下查找，看有没有<strong>共享库</strong> libstack.so, 如果有就链接它，否则再找有没有<strong>静态库</strong> libstack.a 如果有链接它，如果还是没有，就到默认搜索路径下按同样的步骤查找。gcc 在链接时优先考虑共享库，其次才是静态库，如果希望 gcc 只考虑静态库，可以指定 -static 选项</p>
<h2 id="那么链接共享库和静态库有什么区别？"><a href="#那么链接共享库和静态库有什么区别？" class="headerlink" title="那么链接共享库和静态库有什么区别？"></a>那么链接共享库和静态库有什么区别？</h2><p>在之前我们说过，链接 libc 共享库时，链接器只是确认可执行 main 引用的某些符号在 libc 中有定义，并没有最终确定这些符号的地址，这些符号在可执行文件 main 中仍然是未定义符号，要在运行时做动态链接。而链接静态库时，链接器会把静态库中的目标文件取出来和可执行文件真正链接到一起。我们反汇编查看上一步生成的可执行文件 main</p>
<pre><code> 0000000000000660 &lt;main&gt;:
 660:   55                      push   %rbp
 661:   48 89 e5                mov    %rsp,%rbp
 664:   bf 61 00 00 00          mov    $0x61,%edi
 669:   e8 07 00 00 00          callq  675 &lt;push&gt;
 66e:   b8 00 00 00 00          mov    $0x0,%eax
 673:   5d                      pop    %rbp
 674:   c3                      retq

0000000000000675 &lt;push&gt;:
 675:   55                      push   %rbp
 676:   48 89 e5                mov    %rsp,%rbp
 679:   89 f8                   mov    %edi,%eax
 67b:   88 45 fc                mov    %al,-0x4(%rbp)
 67e:   8b 05 8c 09 20 00       mov    0x20098c(%rip),%eax        # 201010 &lt;top&gt;
 684:   83 c0 01                add    $0x1,%eax
 687:   89 05 83 09 20 00       mov    %eax,0x200983(%rip)        # 201010 &lt;top&gt;
 68d:   8b 05 7d 09 20 00       mov    0x20097d(%rip),%eax        # 201010 &lt;top&gt;
 693:   48 63 d0                movslq %eax,%rdx
 696:   48 8d 05 a3 09 20 00    lea    0x2009a3(%rip),%rax        # 201040 &lt;stack&gt;
 69d:   0f b6 4d fc             movzbl -0x4(%rbp),%ecx
 6a1:   88 0c 02                mov    %cl,(%rdx,%rax,1)
 6a4:   90                      nop
 6a5:   5d                      pop    %rbp
 6a6:   c3                      retq
 6a7:   66 0f 1f 84 00 00 00    nopw   0x0(%rax,%rax,1)
 6ae:   00 00

00000000000006b0 &lt;__libc_csu_init&gt;:
 6b0:   41 57                   push   %r15
 6b2:   41 56                   push   %r14
 6b4:   41 89 ff                mov    %edi,%r15d
 ...
</code></pre><p>有趣的是，main.c 只调用了 push 这个函数，所以链接生成的可执行文件中也只有 push 而没有 pop 和 is_empty。<strong>这是使用静态库的一个好处</strong>，链接器从静态库中只取出需要的目标文件来做链接，不需要的目标文件可不链接，如果直接把目标文件和 main.c 编译链接在一起，则没有用到的也会链接进来。另一个静态库的好处是只需要写一个库文件，而不需要写一长串目标文件名。</p>
]]></content>
      
        <categories>
            
            <category> 2017-6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言剖析————头文件]]></title>
      <url>http://yoursite.com/2017/06/08/C%E8%AF%AD%E8%A8%80%E5%89%96%E6%9E%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>我们这一篇继续讨论，前面关于 stack.c 和 main.c 的讨论。stack.c 这个模块封装了 top 和 stack 两个变量，导出了 push、pop、pop、is_empty 三个函数接口，已经设计的比较完善。但是使用这个模块的每一个 .c 文件都要写三个函数声明，如果要用的文件中方法再多一点的话 或者 要有多个文件使用这个的话，我们应该尽量避免重复代码的出现。在这里我们可以使用「 头文件 」来进行解决。</p>
<p>我们来自己写一个头文件 stack.h:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/* stack.h */</div><div class="line">#ifndef STACK_H</div><div class="line">#define STACK_H</div><div class="line"></div><div class="line">extern void push(char);</div><div class="line">extern char pop(void);</div><div class="line">extern int is_empty(void);</div><div class="line"></div><div class="line">#endif</div></pre></td></tr></table></figure></p>
<p>然后我们在 main.c 函数当中包含我们的 stack.h ，我们就可以不用写那三个声明了，具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/* main.c */</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &quot;stack.h&quot;</div><div class="line"></div><div class="line">extern void push(char);</div><div class="line">extern char pop(void);</div><div class="line">extern int is_empty(void);</div><div class="line"></div><div class="line">int main(void)&#123;</div><div class="line">    push(&apos;a&apos;);</div><div class="line">    push(&apos;b&apos;);</div><div class="line">    push(&apos;c&apos;);</div><div class="line"></div><div class="line">    while(!is_empty())</div><div class="line">    putchar(pop());</div><div class="line">    putchar(&apos;\n&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>无形当中，我们又抛出了几个问题，不过下面我会一一进行解答。</p>
<p>首先说为什么 #include <stdio.h> 是用角括号，而 #include “stack.h” 用引号？</stdio.h></p>
<p>对于用角括号包含的头文件来说，gcc 首先查找 -I 选项指定的目录，然后查找系统的头文件目录，而对于 引号 包含的头文件，gcc 首先<strong>查找这个头文件的当前文件所在的目录</strong>，然后<strong>查找 -I 选项指定的目录，然后查找系统的头文件目录</strong></p>
<p>比如说，我们三个文件都放在同一个目录下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> jianran@jianran:~/桌面/x86HB$ tree</div><div class="line">.</div><div class="line">├── main.c</div><div class="line">├── stack.c</div><div class="line">└── stack.h</div><div class="line">0 directories, 3 files</div></pre></td></tr></table></figure></p>
<p>则可以用 gcc -c main.c 编译，gcc 会自动在 main.c 所在的目录中找到 stack.h。加入我们把 stack.h 和 stack.h 移动到一个子目录下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">jianran@jianran:~/桌面/x86HB$ tree</div><div class="line">.</div><div class="line">├── main.c</div><div class="line">└── stack</div><div class="line">    ├── stack.c</div><div class="line">    └── stack.h</div><div class="line">1 directory, 3 files</div></pre></td></tr></table></figure></p>
<p>如果像这样一样，我们就必须给 -I 指定参数 gcc -c main.c -Istack, 让我们去告诉 gcc 头文件要到子目录 stack 中找。</p>
<p>在 #include 预处理指示中可以使用相对路径，比如 #include “stack/stack.h”，那么就不需要加 -Istack 选项了，同时我们应该注意的是，相对路径是相对与当前工作目录的路径，而不是当前文件所在路径</p>
<p>接着我们继续来回到 stack.h 中我们又看到两个新的预处理命令 #ifndef STACK_H 和 #endif，意思是说，如果 STACK_H  这个宏没有定义过，那么从 #ifndef 到 #endif 之间的代码就包含在预处理的输出结果中，否则这段代码就不会出现在预处理的结果当中。如果在包含这个头文件时 STACK_H 这个宏已经定义了，则相当于这个头文件里面什么都没有，只是包含了一个空文件。这个有什么用呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#include &quot;stack.h&quot;</div><div class="line">#include &quot;stack.h&quot;</div><div class="line"> </div><div class="line">int main(void)&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一次包含 stack.h 时并没有定义 STACK_H 这个宏，因此头文件的内容包含在预处理的输出结果中，处理完的结果就像如下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#define STACK_H</div><div class="line"></div><div class="line">extern void push(char);</div><div class="line">extern char pop(void);</div><div class="line">extern int is_empty(void);</div><div class="line">#include &quot;stack.h&quot;</div><div class="line"></div><div class="line"></div><div class="line">int main(void)&#123;</div><div class="line">    push(&apos;a&apos;);</div><div class="line">    push(&apos;b&apos;);</div><div class="line">    push(&apos;c&apos;);</div><div class="line"></div><div class="line">    while(!is_empty())</div><div class="line">    putchar(pop());</div><div class="line">    putchar(&apos;\n&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当我们继续处理 第二个 #include “stack.h” 的时候，因为我们已经定义过了 STACK_H, stack.h 在这一次就被看成了一个空文件。这种保护头文件的写法称为 Header Guard 以后我们写的每个头文件都要加上 Header Guard</p>
<hr>
<p>接下来我们总结一下包含头文件主要有的问题：</p>
<ol>
<li>预处理编译的速度变慢，要处理很多本来不需要处理的代码。</li>
<li>如果不小心出现 foo.h 包含 bar.h 、 bar.h 又包含 foo.h 的情况，就陷入死循环。一般编译器都会规定一个包含层次的上限，超过这个上限就会报错</li>
<li>头文件里面有些代码是不允许被重复出现的，虽然变量和函数允许被多次声明，但是头文件中一些代码是不允许多次出现的，比如用 teypef 定义一个类型名，在一个编译单元只允许定义一次。</li>
</ol>
<p>还有一个问题，既然要 #include 头文件，那我不如直接在 main.c 中 #include “stack.h” 得了。这样 stack.c 和 main.c 合并成一个编译单元了，就算我们用 gcc main.c -o main 命令也是可以编译通过了，这样岂不是更加简单吗？</p>
<p>假如又有一个 foo.c（main.c 要用到 foo.c) 也要用 stack.c 这个模块怎么办？如果再让 foo.c 也 #include “stack.c” 就相当与 push、pop、is_empty 这三个函数 在 main.c 和 foo.c 都有了定义，那么mian.c 和 foo.c 在一起 就不能编译通过, 如果采用头文件的方法，只需要定义一次就全部搞定了。</p>
<hr>
<p>写 .c 文件和 头文件时应该遵循以下原则:</p>
<ul>
<li><p>.c 文件中可以有变量或函数定义，而 .h 文件中应该只有函数或变量声明而没有定义</p>
</li>
<li><p>不要把一个 .c 文件包含到另外一个 .c 文件中</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 2017-6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言剖析————标识符的链接属性]]></title>
      <url>http://yoursite.com/2017/06/08/C%E8%AF%AD%E8%A8%80%E5%89%96%E6%9E%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E6%A0%87%E8%AF%86%E7%AC%A6%E7%9A%84%E9%93%BE%E6%8E%A5%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<ul>
<li><p>外部链接（External Linkage），一个标识符在不同的编译单元中可能被声明多次，当这些编译单元链接到可执行时，如果这些声明都代表同一个变量或函数（即代表同一个内存地址），则这个标识符具有 External Linkage。具有 External Linkage 的标识符编译后在目标文件中是全局符号。</p>
</li>
<li><p>内部链接（Internal Linkage），一个标识符在某个编译单元中可能被声明多次，这些声明都代表同一个内存地址，但如果这个标识符在不同的编译单元中被声明多次，在链接时这些声明就不代表同一个内存地址，这样的标示具有 Internal Linkage。也就是说在链接时不做符号解析</p>
</li>
<li><p>无链接属性（No Linkage）。除以上情况之外的标识符都属于 No Linkage， 例如函数的局部变量，以及不表示变量和函数的其他标示符。除了函数、全局变量、静态变量之外的标识符在编译时不会变成符号，所以没有链接属性</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 2017-6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言剖析————定义与声明]]></title>
      <url>http://yoursite.com/2017/06/06/C%E8%AF%AD%E8%A8%80%E5%89%96%E6%9E%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%A3%B0%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>#extern 和 static 关键字</p>
<p>在前面一篇当中我们把两个 .c 文件（main.c 和 stack.c)放在一起编译, mian.c 用到的函数 push、pop 和 is_empty 由 stack.c 提供，虽然可以运行但是他会报告处出三个警告。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">W</div><div class="line">jianran@jianran:~/桌面/x86HB$ gcc main.c stack.c</div><div class="line">main.c: In function ‘main’:</div><div class="line">main.c:6:5: warning: implicit declaration of function ‘push’ [-Wimplicit-function-declaration]</div><div class="line">     push(&apos;a&apos;);</div><div class="line">     ^~~~</div><div class="line">main.c:10:12: warning: implicit declaration of function ‘is_empty’ [-Wimplicit-function-declaration]</div><div class="line">     while(!is_empty())</div><div class="line">            ^~~~~~~~</div><div class="line">main.c:11:13: warning: implicit declaration of function ‘pop’ [-Wimplicit-function-declaration]</div><div class="line">     putchar(pop());</div><div class="line">             ^~~</div></pre></td></tr></table></figure>
<p>警告的原因是：「编译器在处理 main.c 中的函数调用时找不到函数原型」，也就不知道函数的参数和返回值类型，而只能根据函数调用的实参做隐式的声明，并假定返回值是 int 型。编译器把这三个函数隐式声明为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int push(char);</div><div class="line">int pop(void);</div><div class="line">int is_empty(void);</div></pre></td></tr></table></figure></p>
<p>为什么编译器在处理函数调用时需要知道函数原型？<br>因为必须知道参数的类型和个数以及返回值类型才能知道应该生成应该生成什么样的指令。</p>
<p>如果光使用 隐式声明 是靠不住的。因为 隐式声明是根据函数调用代码推测的，<br>    第一，函数的形参类型可能跟实参类型不一样；<br>    第二，如果函数定义带有可变参数（例如：printf), 从函数调用代码也看不出它带可变参数；<br>    第三，从函数调用看不出返回值应该是什么类型，隐式声明只能假定返回值都是 int 类型的。</p>
<p>既然隐式声明靠不住，那编译器为什么不自己去找函数定义，而非要我们在调用前提供函数原型呢？因为编译压根不知道去哪里找函数定义。</p>
<p>现在我们来在 mian.c 中声明这几个函数的原型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/* main.c */</div><div class="line">#include&lt;stdio.h&gt;</div><div class="line"></div><div class="line">extern void push(char);</div><div class="line">extern char pop(void);</div><div class="line">extern int is_empty(void);</div><div class="line"></div><div class="line">int main(void)&#123;</div><div class="line">    push(&apos;a&apos;);</div><div class="line">    push(&apos;b&apos;);</div><div class="line">    push(&apos;c&apos;);</div><div class="line"></div><div class="line">    while(!is_empty())</div><div class="line">    putchar(pop());</div><div class="line">    putchar(&apos;\n&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样编译器就不会报警了。用 extern 关键字修饰的函数名具有 External Linkage。push 这个标示符具有 External Linkage 指的是：push 在 main.c 和 stack.c 中都有声明（stack.c 中的声明同时也是定义），如果把 main.c 和 stack.c 链接在一起，那么这些声明指的是同一个函数，在链接时，各目标文件中的全局符号 push 代表 同一个地址，函数声明中的 extern 关键字也可以省略不写。</p>
<p>用 static 关键字修饰的函数名具有 Internal Linkage。例如 有以下两个 .c 文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/* foo.c */</div><div class="line">static void foo(void)&#123;&#125;</div><div class="line">/* main.c */</div><div class="line">void foo(void);</div><div class="line">int main(void)&#123; foo(); return 0; &#125;</div></pre></td></tr></table></figure></p>
<p>编译链接在一起会出错。虽然 foo.c 中定义了函数 foo 。 但是这个函数名只有 Internal Linkage，只有在 foo.c 中引用这个函数名才表示同一个函数，而在 main.c 中声明的哪个 foo.c 应该表示一个具有 External Linkage 的函数名。如果把 foo.c 编译成目标文件，函数名 foo 在其中是一个局部符号，在链接时不参与「 符号解析 」。所以，在 main.c 中引用了一个具有 External Linkage 的函数名 foo，但是链接器却找不到它的定义在哪，无法确定它的地址，只好报错。凡是被多次声明的变量或函数，必须有且只有一个声明是定义，如果有多个定义，或者一个定义都没有，链接器就无法完成链接。</p>
<p>以上讲了用 static 和 extern 修饰函数声明的情况，现在来看用它们修饰变量声明的情况，仍然用 stack.c 和 main.c 的例子，如果我想在 main.c 中直接访问 stack.c 定义的变量 top，可以用 extern 声明它。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/* main.c */</div><div class="line">#include&lt;stdio.h&gt;</div><div class="line"></div><div class="line">void push(char);</div><div class="line">char pop(void);</div><div class="line">int is_empty(void);</div><div class="line">extern int top;</div><div class="line"></div><div class="line">int main(void)&#123;</div><div class="line">    push(&apos;a&apos;);</div><div class="line">    push(&apos;b&apos;);</div><div class="line">    push(&apos;c&apos;);</div><div class="line"></div><div class="line">    while(!is_empty())</div><div class="line">    putchar(pop());</div><div class="line">    putchar(&apos;\n&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>变量 top 具有 External Linkage，extern int top 只是一个声明而不是定义，因为 它 不在 main.c 中分配存储空间，而是在 stack.c 中定义和分配存储空间， main.c 只是引用 这个变量名。以上这些函数和变量名也可以写在 main 函数体当中，使得声明的标识符具有块作用域。</p>
<blockquote>
<p>变量声明和函数声明有一点不同，函数声明的 extern 关键字可以被省去而变量声明没有写 extern 意思就完全变了，如果 extertn int top 没有了 extern 那么就相当与定义了一个局部变量 top。另外，变量定义可以初始化而声明却不可以</p>
</blockquote>
<p>在 main.c 中可以通过 extern 声明来访问 stack.c 中的变量 top ，但是从 实现 stack.c这个模板来看，top 这个变量是不希望被外界访问到的，变量 top 和 stack 都属于这个模块的内部状态，外界应该只允许通过 push、pop函数来改变模块的内部状态，这样才能保证 堆栈 的特性，那么应该怎么样来阻止外界来访问 top 和 stack 呢？ 答案就是用static 关键字把他们声明为 Internal Linkage</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/* stack.c */</div><div class="line">static char stack[512];</div><div class="line">static int top = -1;</div><div class="line"></div><div class="line">void push(char c)&#123;</div><div class="line">stack[++top] = c;</div><div class="line">&#125;</div><div class="line"></div><div class="line">char pop(void)&#123;</div><div class="line">return stack[top--];</div><div class="line">&#125;</div><div class="line"></div><div class="line">int is_empty(void)&#123;</div><div class="line">return top == -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，即使在 main.c 中用 extern 声明也访问不到 stack.c 的变量 top 和 stack，从而保护了 stack.c 模块的内部状态。</p>
]]></content>
      
        <categories>
            
            <category> 2017-6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言剖析————多目标文件的链接]]></title>
      <url>http://yoursite.com/2017/06/04/C%E8%AF%AD%E8%A8%80%E5%89%96%E6%9E%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%A4%9A%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E7%9A%84%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<p>正如题目，多文件～，我们需要自己创造一些多文件，同时这些文件在未来几天文章当中都会使用，以后我就直接引用不进行说明了。</p>
<hr>
<p>目前我们在同一个文件夹下创建 stack.c 和 main.c 文件，内容如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/* stack.c */</div><div class="line">char stack[512];</div><div class="line">int top = -1;</div><div class="line"></div><div class="line">void push(char c)&#123;</div><div class="line">    stack[++top] = c;</div><div class="line">&#125;</div><div class="line"></div><div class="line">char pop(void)&#123;</div><div class="line">    return stack[top--];</div><div class="line">&#125;</div><div class="line"></div><div class="line">int is_empty(void)&#123;</div><div class="line">    return top == -1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/* main.c */</div><div class="line">#include&lt;stdio.h&gt;</div><div class="line"></div><div class="line">int a,b = 1;</div><div class="line"></div><div class="line">int main(void)&#123;</div><div class="line">    push(&apos;a&apos;);</div><div class="line">    push(&apos;b&apos;);</div><div class="line">    push(&apos;c&apos;);</div><div class="line"></div><div class="line">    while(!is_empty())</div><div class="line">    putchar(pop());</div><div class="line">    putchar(&apos;\n&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>a 和 b 两个变量没有用到，这个只是在未来说明链接过程才加上的。编译过程和以前一样，可以一步编译也可以多步编译，这里我们选择多步（都是一样的）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ gcc -c main.c</div><div class="line">$ gcc -c stack.c</div><div class="line">$ gcc main.o stack.o -o main</div><div class="line">```  </div><div class="line">如果用 nm 命令查看目标文件的符号表，会发现 main.o，中会有未定义的符号 push、pop、is_empty、putchar。前三个符号在 stack.o 中定义了，在链接时做符号解析：而 putchar 是 libc 的库函数，在可执行文件 main 中仍然是未定义的。要在程序运行时做**动态链接**</div><div class="line"></div><div class="line">通过 readelf -a main 命令可以看到 main 的 .bss段 合并了 main.o 和 stack.o 的 .bss段，其中包含了变量 a 和 stack; main 的 .data段合并了 main.o 和 stack.o 的 .data段，其中包含了变量 b 和 top; main 的 .text段 合并了 main.o 和 stack.o 的 .text段，包含了各函数的指令。多个目标文件的链接如下图所示:</div><div class="line">![](http://ww1.sinaimg.cn/large/b36c7eebgy1fg6xf7vn2jj20ig0ld41d.jpg)</div><div class="line"></div><div class="line">为什么在可执行文件 main 的每一段中来自 main.o 的变量或函数都在前面，而来自 stack.o 的变量或函数都在后面呢？我们可以试着把 gcc 命令中 两个目标文件反过来写:</div><div class="line"></div><div class="line">    gcc stack.o main.o -o main</div><div class="line">    </div><div class="line">可执行文件 main 的每一段中来自 main.o 的变量或者函数 都排在后面了。实际上，**链接过程是由一个链接脚本控制的，链接脚本决定了给每个段分配什么地址，如何对齐、哪个段在前哪个在后、哪些段合并到同一个 Segment。**另外链接脚本还要把一些特殊地址定义为符号，例如 _bss_start 代表 .bss 段的起始地址，_end 代表 _bss段 的结束地址，这些符号会出现**在可执行文件**的符号表中，加载器可以由这些符号得知 .bss 段的地址范围，以便把它清零，如果用 ld 进行链接时没有通过 -T 选项指定链接脚本，则使用 ld 的默认链接脚本，默认链接脚本可以使用 **ld --verbose**</div><div class="line">查看：</div></pre></td></tr></table></figure></p>
<p>$ ld –verbose<br>…<br>/<em> Script for -z combreloc: combine and sort reloc sections </em>/<br>/<em> Copyright (C) 2014-2017 Free Software Foundation, Inc.<br>   Copying and distribution of this script, with or without modification,<br>   are permitted in any medium without royalty provided the copyright<br>   notice and this notice are preserved.  </em>/<br>OUTPUT_FORMAT(“elf64-x86-64”, “elf64-x86-64”,<br>          “elf64-x86-64”)<br>OUTPUT_ARCH(i386:x86-64)<br>ENTRY(_start)<br>SEARCH_DIR(“=/usr/local/lib/x86_64-linux-gnu”); SEARCH_DIR(“=/lib/x86_64-linux-gnu”); SEARCH_DIR(“=/usr/lib/x86_64-linux-gnu”); SEARCH_DIR(“=/usr/local/lib64”); SEARCH_DIR(“=/lib64”); SEARCH_DIR(“=/usr/lib64”); SEARCH_DIR(“=/usr/local/lib”); SEARCH_DIR(“=/lib”); SEARCH_DIR(“=/usr/lib”); SEARCH_DIR(“=/usr/x86_64-linux-gnu/lib64”); SEARCH_DIR(“=/usr/x86_64-linux-gnu/lib”);<br>SECTIONS<br>{<br>  /<em> Read-only sections, merged into text segment: </em>/<br>  PROVIDE (<strong>executable_start = SEGMENT_START(“text-segment”, 0x400000)); . = SEGMENT_START(“text-segment”, 0x400000) + SIZEOF_HEADERS;<br>  .interp         : { <em>(.interp) }<br>  .note.gnu.build-id : { </em>(.note.gnu.build-id) }<br>  .hash           : { <em>(.hash) }<br>  .gnu.hash       : { </em>(.gnu.hash) }<br>  .dynsym         : { <em>(.dynsym) }<br>  .dynstr         : { </em>(.dynstr) }<br>  .gnu.version    : { <em>(.gnu.version) }<br>  .gnu.version_d  : { </em>(.gnu.version_d) }<br>  .gnu.version_r  : { <em>(.gnu.version_r) }<br>  .rela.dyn       :<br>    {
      </em>(.rela.init)<br>      <em>(.rela.text .rela.text.</em> .rela.gnu.linkonce.t.<em>)
      </em>(.rela.fini)<br>      <em>(.rela.rodata .rela.rodata.</em> .rela.gnu.linkonce.r.<em>)
      </em>(.rela.data .rela.data.<em> .rela.gnu.linkonce.d.</em>)<br>      <em>(.rela.tdata .rela.tdata.</em> .rela.gnu.linkonce.td.<em>)
      </em>(.rela.tbss .rela.tbss.<em> .rela.gnu.linkonce.tb.</em>)<br>      <em>(.rela.ctors)
      </em>(.rela.dtors)<br>      <em>(.rela.got)
      </em>(.rela.bss .rela.bss.<em> .rela.gnu.linkonce.b.</em>)<br>      <em>(.rela.ldata .rela.ldata.</em> .rela.gnu.linkonce.l.<em>)
      </em>(.rela.lbss .rela.lbss.<em> .rela.gnu.linkonce.lb.</em>)<br>      <em>(.rela.lrodata .rela.lrodata.</em> .rela.gnu.linkonce.lr.<em>)
      </em>(.rela.ifunc)<br>    }<br>  .rela.plt       :<br>    {<br>      *(.rela.plt)<br>      PROVIDE_HIDDEN (</strong>rela_iplt_start = .);<br>      <em>(.rela.iplt)<br>      PROVIDE_HIDDEN (__rela_iplt_end = .);<br>    }<br>  .init           :<br>  {<br>    KEEP (</em>(SORT_NONE(.init)))<br>  }<br>  .plt            : { <em>(.plt) </em>(.iplt) }<br>.plt.got        : { <em>(.plt.got) }<br>.plt.bnd        : { </em>(.plt.bnd) }<br>  .text           :<br>  {<br>    <em>(.text.unlikely .text.</em>_unlikely .text.unlikely.<em>)
    </em>(.text.exit .text.exit.<em>)
    </em>(.text.startup .text.startup.<em>)
    </em>(.text.hot .text.hot.<em>)
    </em>(.text .stub .text.<em> .gnu.linkonce.t.</em>)<br>    /<em> .gnu.warning sections are handled specially by elf32.em.  </em>/<br>    <em>(.gnu.warning)<br>  }<br>  .fini           :<br>  {<br>    KEEP (</em>(SORT_NONE(.fini)))<br>  }<br>  PROVIDE (<strong>etext = .);<br>  PROVIDE (_etext = .);<br>  PROVIDE (etext = .);<br>  .rodata         : { <em>(.rodata .rodata.</em> .gnu.linkonce.r.<em>) }<br>  .rodata1        : { </em>(.rodata1) }<br>  .eh_frame_hdr : { <em>(.eh_frame_hdr) </em>(.eh_frame_entry .eh_frame_entry.<em>) }<br>  .eh_frame       : ONLY_IF_RO { KEEP (</em>(.eh_frame)) <em>(.eh_frame.</em>) }<br>  .gcc_except_table   : ONLY_IF_RO { <em>(.gcc_except_table<br>  .gcc_except_table.</em>) }<br>  .gnu_extab   : ONLY_IF_RO { <em>(.gnu_extab</em>) }<br>  /<em> These sections are generated by the Sun/Oracle C++ compiler.  </em>/<br>  .exception_ranges   : ONLY_IF_RO { <em>(.exception_ranges<br>  .exception_ranges</em>) }<br>  /<em> Adjust the address for the data segment.  We want to adjust up to<br>     the same address within the page on the next page up.  </em>/<br>  . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));<br>  /<em> Exception handling  </em>/<br>  .eh_frame       : ONLY_IF_RW { KEEP (<em>(.eh_frame)) </em>(.eh_frame.<em>) }<br>  .gnu_extab      : ONLY_IF_RW { </em>(.gnu_extab) }<br>  .gcc_except_table   : ONLY_IF_RW { <em>(.gcc_except_table .gcc_except_table.</em>) }<br>  .exception_ranges   : ONLY_IF_RW { <em>(.exception_ranges .exception_ranges</em>) }<br>  /<em> Thread Local Storage sections  </em>/<br>  .tdata      : { <em>(.tdata .tdata.</em> .gnu.linkonce.td.<em>) }<br>  .tbss          : { </em>(.tbss .tbss.<em> .gnu.linkonce.tb.</em>) *(.tcommon) }<br>  .preinit_array     :<br>  {<br>    PROVIDE_HIDDEN (</strong>preinit_array_start = .);<br>    KEEP (<em>(.preinit_array))<br>    PROVIDE_HIDDEN (<strong>preinit_array_end = .);<br>  }<br>  .init_array     :<br>  {<br>    PROVIDE_HIDDEN (</strong>init_array_start = .);<br>    KEEP (</em>(SORT_BY_INIT_PRIORITY(.init_array.<em>) SORT_BY_INIT_PRIORITY(.ctors.</em>)))<br>    KEEP (<em>(.init_array EXCLUDE_FILE (</em>crtbegin.o <em>crtbegin?.o </em>crtend.o <em>crtend?.o ) .ctors))<br>    PROVIDE_HIDDEN (<strong>init_array_end = .);<br>  }<br>  .fini_array     :<br>  {<br>    PROVIDE_HIDDEN (</strong>fini_array_start = .);<br>    KEEP (</em>(SORT_BY_INIT_PRIORITY(.fini_array.<em>) SORT_BY_INIT_PRIORITY(.dtors.</em>)))<br>    KEEP (<em>(.fini_array EXCLUDE_FILE (</em>crtbegin.o <em>crtbegin?.o </em>crtend.o <em>crtend?.o ) .dtors))<br>    PROVIDE_HIDDEN (__fini_array_end = .);<br>  }<br>  .ctors          :<br>  {<br>    /</em> gcc uses crtbegin.o to find the start of<br>       the constructors, so we make sure it is<br>       first.  Because this is a wildcard, it<br>       doesn’t matter if the user does not<br>       actually link against crtbegin.o; the<br>       linker won’t look for a file to match a<br>       wildcard.  The wildcard also means that it<br>       doesn’t matter which directory crtbegin.o<br>       is in.  <em>/<br>    KEEP (</em>crtbegin.o(.ctors))<br>    KEEP (<em>crtbegin?.o(.ctors))<br>    /</em> We don’t want to include the .ctor section from<br>       the crtend.o file until after the sorted ctors.<br>       The .ctor section from the crtend file contains the<br>       end of ctors marker and it must be last <em>/<br>    KEEP (</em>(EXCLUDE_FILE (<em>crtend.o </em>crtend?.o ) .ctors))<br>    KEEP (<em>(SORT(.ctors.</em>)))<br>    KEEP (<em>(.ctors))<br>  }<br>  .dtors          :<br>  {<br>    KEEP (</em>crtbegin.o(.dtors))<br>    KEEP (<em>crtbegin?.o(.dtors))<br>    KEEP (</em>(EXCLUDE_FILE (<em>crtend.o </em>crtend?.o ) .dtors))<br>    KEEP (<em>(SORT(.dtors.</em>)))<br>    KEEP (<em>(.dtors))<br>  }<br>  .jcr            : { KEEP (</em>(.jcr)) }<br>  .data.rel.ro : { <em>(.data.rel.ro.local</em> .gnu.linkonce.d.rel.ro.local.<em>) </em>(.data.rel.ro .data.rel.ro.<em> .gnu.linkonce.d.rel.ro.</em>) }<br>  .dynamic        : { <em>(.dynamic) }<br>  .got            : { </em>(.got) <em>(.igot) }<br>  . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) &gt;= 24 ? 24 : 0, .);<br>  .got.plt        : { </em>(.got.plt)  <em>(.igot.plt) }<br>  .data           :<br>  {
    </em>(.data .data.<em> .gnu.linkonce.d.</em>)<br>    SORT(CONSTRUCTORS)<br>  }<br>  .data1          : { <em>(.data1) }<br>  _edata = .; PROVIDE (edata = .);<br>  . = .;<br>  __bss_start = .;<br>  .bss            :<br>  {
   </em>(.dynbss)<br>   <em>(.bss .bss.</em> .gnu.linkonce.b.<em>)
   </em>(COMMON)<br>   /<em> Align here to ensure that the .bss section occupies space up to<br>      _end.  Align after .bss to ensure correct alignment even if the<br>      .bss section disappears because there are no input sections.<br>      FIXME: Why do we need it? When there is no .bss section, we don’t<br>      pad the .data section.  </em>/<br>   . = ALIGN(. != 0 ? 64 / 8 : 1);<br>  }<br>  .lbss   :<br>  {<br>    <em>(.dynlbss)
    </em>(.lbss .lbss.<em> .gnu.linkonce.lb.</em>)<br>    <em>(LARGE_COMMON)<br>  }<br>  . = ALIGN(64 / 8);<br>  . = SEGMENT_START(“ldata-segment”, .);<br>  .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. &amp; (CONSTANT (MAXPAGESIZE) - 1)) :<br>  {
    </em>(.lrodata .lrodata.<em> .gnu.linkonce.lr.</em>)<br>  }<br>  .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. &amp; (CONSTANT (MAXPAGESIZE) - 1)) :<br>  {<br>    <em>(.ldata .ldata.</em> .gnu.linkonce.l.<em>)<br>    . = ALIGN(. != 0 ? 64 / 8 : 1);<br>  }<br>  . = ALIGN(64 / 8);<br>  _end = .; PROVIDE (end = .);<br>  . = DATA_SEGMENT_END (.);<br>  /</em> Stabs debugging sections.  <em>/<br>  .stab          0 : { </em>(.stab) }<br>  .stabstr       0 : { <em>(.stabstr) }<br>  .stab.excl     0 : { </em>(.stab.excl) }<br>  .stab.exclstr  0 : { <em>(.stab.exclstr) }<br>  .stab.index    0 : { </em>(.stab.index) }<br>  .stab.indexstr 0 : { <em>(.stab.indexstr) }<br>  .comment       0 : { </em>(.comment) }<br>  /<em> DWARF debug sections.<br>     Symbols in the DWARF debugging sections are relative to the beginning<br>     of the section so we begin them at 0.  </em>/<br>  /<em> DWARF 1 </em>/<br>  .debug          0 : { <em>(.debug) }<br>  .line           0 : { </em>(.line) }<br>  /<em> GNU DWARF 1 extensions </em>/<br>  .debug_srcinfo  0 : { <em>(.debug_srcinfo) }<br>  .debug_sfnames  0 : { </em>(.debug_sfnames) }<br>  /<em> DWARF 1.1 and DWARF 2 </em>/<br>  .debug_aranges  0 : { <em>(.debug_aranges) }<br>  .debug_pubnames 0 : { </em>(.debug_pubnames) }<br>  /<em> DWARF 2 </em>/<br>  .debug_info     0 : { <em>(.debug_info .gnu.linkonce.wi.</em>) }<br>  .debug_abbrev   0 : { <em>(.debug_abbrev) }<br>  .debug_line     0 : { </em>(.debug_line .debug_line.<em> .debug_line_end ) }<br>  .debug_frame    0 : { </em>(.debug_frame) }<br>  .debug_str      0 : { <em>(.debug_str) }<br>  .debug_loc      0 : { </em>(.debug_loc) }<br>  .debug_macinfo  0 : { <em>(.debug_macinfo) }<br>  /</em> SGI/MIPS DWARF 2 extensions <em>/<br>  .debug_weaknames 0 : { </em>(.debug_weaknames) }<br>  .debug_funcnames 0 : { <em>(.debug_funcnames) }<br>  .debug_typenames 0 : { </em>(.debug_typenames) }<br>  .debug_varnames  0 : { <em>(.debug_varnames) }<br>  /</em> DWARF 3 <em>/<br>  .debug_pubtypes 0 : { </em>(.debug_pubtypes) }<br>  .debug_ranges   0 : { <em>(.debug_ranges) }<br>  /</em> DWARF Extension.  <em>/<br>  .debug_macro    0 : { </em>(.debug_macro) }<br>  .debug_addr     0 : { <em>(.debug_addr) }<br>  .gnu.attributes 0 : { KEEP (</em>(.gnu.attributes)) }<br>  /DISCARD/ : { <em>(.note.GNU-stack) </em>(.gnu<em>debuglink) *(.gnu.lto</em>*) }<br>}</p>
<p>==================================================</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ENTRY(_start) 指明整个程序的入口点是 _start,这并不是规定是的，修改链接脚本就可以改用其他符号做入口点。</div></pre></td></tr></table></figure>
<p>/<em> Read-only sections, merged into text segment: </em>/<br>  PROVIDE (__executable_start = SEGMENT_START(“text-segment”, 0x400000)); . = SEGMENT_START(“text-segment”, 0x400000) + SIZEOF_HEADERS;<br>  .interp         : { <em>(.interp) }<br>  .note.gnu.build-id : { </em>(.note.gnu.build-id) }<br>  .hash           : { *(.hash) }<br>  …<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x400000 是 Text Segment的其实地址，开头有 SIZEOF_HEADERS 个字节是文件头，「 . 」表示链接器处理的当前地址，「 . = SEGMENT_START(&quot;text-segment&quot;, 0x400000) + SIZEOF_HEADERS 」表示把当前地址改成 Text Segment 中文件头之后的地址，接下来的几行指示链接器从这个地址开始组装几个段，依次是 .interp段、 .note.gnu.build-id段 等等，其中包含我们熟悉的 .plt段、.text段、.rodata段，这些段的描述格式都是 段名 ： &#123; 组成 &#125;</div></pre></td></tr></table></figure></p>
<p> /<em> Adjust the address for the data segment.  We want to adjust up to<br>     the same address within the page on the next page up.  </em>/<br>  . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));</p>
<p>```<br> 通过这个计算处 Data Segment 的地址，从这个地址开始组装后面链接脚本列出的几个段, 例如 .data段和 .bss 段</p>
<p> 在 Data Segment 后面还有其他的 Segment ,主要是调试信息，关于链接脚本就简单介绍到这里，以上内容了解即可。</p>
]]></content>
      
        <categories>
            
            <category> 2017-6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言剖析————main函数、启动历程和退出状态]]></title>
      <url>http://yoursite.com/2017/06/03/C%E8%AF%AD%E8%A8%80%E5%89%96%E6%9E%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94main%E5%87%BD%E6%95%B0%E3%80%81%E5%90%AF%E5%8A%A8%E5%8E%86%E7%A8%8B%E5%92%8C%E9%80%80%E5%87%BA%E7%8A%B6%E6%80%81/</url>
      <content type="html"><![CDATA[<p>为什么汇编程序入口是 _start 而 C程序 的入口是 main函数 呢？ 要弄清楚这个问题，首先要理解 gcc 的编译步骤。以前我们常用 gcc main.c -o main 命令编译一个程序，其实也可以分三步来走：<strong>第一步生成 汇编代码，第二步 生成目标文件，第三步 生成可执行文件</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ gcc -S main.c       #生成汇编文件</div><div class="line">$ gcc -c main.s       #生成目标文件</div><div class="line">$ gcc main.o          #生成可执行文件</div></pre></td></tr></table></figure>
<p>-S 生成 汇编代码，-c 生成目标文件，-E 只做预处理而不进行编译，如果这些选项都不加，则 gcc 执行完成的编译步骤，直到最后链接生成可执行文件。</p>
<p>这些选项都可以和 -o 搭配使用，给输出文件重新命名而不使用 gcc 默认的输出文件名。</p>
<pre><code>gcc main.c -o main
</code></pre><p>在 gcc 内部也要分三步来走，同时 gcc 是一个外壳，在具体细节里面， gcc 调用了 C编译器、 汇编器、 链接器完成 C 代码的编译链接工作</p>
<ol>
<li>main.c 被 C编译器 编译成 汇编程序</li>
<li>这个汇编程序被 as 汇编成目标文件 </li>
<li>这个目标文件连同另外几个目标文件（crtl.o、crti.o、crtbegin.o、crtend.o、crtn.o)一起链接成可执行文件 mian。在链接过程中还使用 -l 选项选定了一些库文件，有 libc、libgcc、libgcc_s，其中有些库是共享库，需要动态链接，所以用 -dynamic-linker 选项指定动态链接是 /lib64/ld-linux-x86-64.so.2。这个随后我们会说到，<strong>这里我们只要理解可执行文件 mian 是由 mian.c 生成的目标文件和编译器提供的另外几个目标文件链接到一起生成的</strong></li>
</ol>
<p>现在让我们看看编译器提供的目标文件里面有些什么东西，我们只看符号表，这里主要看 crt1.o</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">jianran@jianran:/usr/lib/gcc/x86_64-linux-gnu/6$ nm /usr/lib/x86_64-linux-gnu/crt1.o</div><div class="line">0000000000000000 D __data_start</div><div class="line">0000000000000000 W data_start</div><div class="line">                 U _GLOBAL_OFFSET_TABLE_</div><div class="line">0000000000000000 R _IO_stdin_used</div><div class="line">                 U __libc_csu_fini</div><div class="line">                 U __libc_csu_init</div><div class="line">                 U __libc_start_main</div><div class="line">                 U main</div><div class="line">0000000000000000 T _start</div></pre></td></tr></table></figure>
<p>符号表的每一行由地址、符号类型和符号名组成。目标文件中的地址是待定的，所以是 0000000000000000.符号类型用一个字母表示，大写字母是全局符号，小写字母是局部符号,<br>U main 这一行表示 这个符号在 crtl.o 中已经被应用，但没有被定义（U 表示 Undefinded),因此需要别的目标文件提供一个定义和 crt1.o 链接在一起。T _start 这一行表示 _start 这个符号在 crtl.o 中提供了定义，这个符号的类型是 代码（T 表示 Text）</p>
<p>C程序的入口其实是 crt1.o 提供的 _start, 它首先做一些初始化工作（以下称为 启动例程），然后调用我们的 main函数。所以，以前我们说的 main函数 是程序的入口其实不够准确，_start 才是真正的入口点，而 main函数 是被 _start 调用的。下面我们反汇编查看以下 _start 的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">jianran@jianran:/usr/lib/gcc/x86_64-linux-gnu/6$ objdump -d /usr/lib/x86_64-linux-gnu/crt1.o</div><div class="line"></div><div class="line">/usr/lib/x86_64-linux-gnu/crt1.o：     文件格式 elf64-x86-64</div><div class="line"></div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line">0000000000000000 &lt;_start&gt;:</div><div class="line">   0:   31 ed                   xor    %ebp,%ebp</div><div class="line">   2:   49 89 d1                mov    %rdx,%r9</div><div class="line">   5:   5e                      pop    %rsi</div><div class="line">   6:   48 89 e2                mov    %rsp,%rdx</div><div class="line">   9:   48 83 e4 f0             and    $0xfffffffffffffff0,%rsp</div><div class="line">   d:   50                      push   %rax</div><div class="line">   e:   54                      push   %rsp</div><div class="line">   f:   49 c7 c0 00 00 00 00    mov    $0x0,%r8</div><div class="line">  16:   48 c7 c1 00 00 00 00    mov    $0x0,%rcx</div><div class="line">  1d:   48 c7 c7 00 00 00 00    mov    $0x0,%rdi</div><div class="line">  24:   ff 15 00 00 00 00       callq  *0x0(%rip)        # 2a &lt;_start+0x2a&gt;</div><div class="line">  2a:   f4                      hlt</div></pre></td></tr></table></figure></p>
<p>callq 指令前面的 push 指令其实想把 main 这个符号所代表的地址压栈，但是这里还不到具体地址多少，这里只能先用 0x0 代替。现在我们对 main.c 编译成目标文件 main.o，然后和链接器提供的目标文件链接，对生成的可执行文件 main 做反汇编：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line">0000000000000530 &lt;_start&gt;:</div><div class="line"> 530:   31 ed                   xor    %ebp,%ebp</div><div class="line"> 532:   49 89 d1                mov    %rdx,%r9</div><div class="line"> 535:   5e                      pop    %rsi</div><div class="line"> 536:   48 89 e2                mov    %rsp,%rdx</div><div class="line"> 539:   48 83 e4 f0             and    $0xfffffffffffffff0,%rsp</div><div class="line"> 53d:   50                      push   %rax</div><div class="line"> 53e:   54                      push   %rsp</div><div class="line"> 53f:   4c 8d 05 ea 01 00 00    lea    0x1ea(%rip),%r8        # 730 &lt;__libc_csu_fini&gt;</div><div class="line"> 546:   48 8d 0d 73 01 00 00    lea    0x173(%rip),%rcx        # 6c0 &lt;__libc_csu_init&gt;</div><div class="line"> 54d:   48 8d 3d 45 01 00 00    lea    0x145(%rip),%rdi        # 699 &lt;main&gt;</div><div class="line"> 554:   ff 15 7e 0a 20 00       callq  *0x200a7e(%rip)        # 200fd8 &lt;__libc_start_main@GLIBC_2.2.5&gt;</div><div class="line"> 55a:   f4                      hlt</div><div class="line"> 55b:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</div></pre></td></tr></table></figure></p>
<p>crt1.o 中定义的 符号 _start 和 main.o 中定义的符号 main、foo、bar都合成到可执行文件的 .text 段中。符号 main 的 地址 变成 0x 699，原先的 0x0 被具体地址替代，一个目标文件中引用了某个符号，链接器在另一个目标文件中找到这个符号的定义并确定它的地址，这个过程叫做符号解析。</p>
<p>其实在 crt1.o 中还有一个 U __libc_start_main 这个符号在其他文件中没有定义，事实上这个符号在 libc 中定义，libc 是一个共享库，它并不像其他目标文件一样链接到可执行文件而是在运行时链接到的</p>
<p>1、操作系统在加载执行 main 这个程序时，首先查看它有没有需要动态链接的未定义符号<br>2、如果需要动态链接，就查看这个程序制定了哪些共享库，以及用什么动态链接器来做动态链接。我们在链接时用 -lc 指定了 共享库 libc ，用 -dynamic-linker /lib64/ld-linux-x86-64.so.2 指定了动态链接器，这些信息都会写到可执行文件中。<br>3、动态链接器加载共享库，在其中查找这些未定义符号的定义，完成链接过程。</p>
<p>我们回头看 _start 的反汇编过程，首先将一系列参数压栈，然后通过 callq 的命令调用库函数 <strong>libc_start_main 进行初始化工作，其中最后一个压栈是 main函数 的地址，</strong>libc_start_main做完初始化工作之后会根据这个参数调用 main函数。由于 __libc_start_main 需要做动态链接，所以这个库函数 的指令在 main 的反汇编中肯定找不到，这些指令 会在 一个 .plt 段中而不是 .text 段中找到， .plt段协助完成动态链接。</p>
<p>main 函数最标准的原型是 int main(int agrc，char *argv[]),也就是说启动例程会传两个参数给 main函数，到目前为止我们基本都把 main 函数写成 int main（void） 这是 C 代码允许的。</p>
<p>由于 main 函数是被启动例程调用，所以 main函数 return 时就返回到启动例程中，main函数的返回值会被启动例程得到，如果将启动例程表示成等价的 C代码，则它调用 main函数的 形式如下</p>
<pre><code>exit(main（argc，argc))
</code></pre><p>也就是说，启动例程得到 main函数 返回值之后，会立刻用它做参数调用 exit函数。exit 也是 libc 的库函数，它首先做一些清理工作，然后调用 _exit系统终止进程，main 函数最终的返回值传给了 _exit 系统调用，成为进程的退出状态。我们也可以在 main函数中直接 调用 exit 终止进程而不返回启动进程。</p>
]]></content>
      
        <categories>
            
            <category> 2017-6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言剖析————函数调用]]></title>
      <url>http://yoursite.com/2017/06/02/C%E8%AF%AD%E8%A8%80%E5%89%96%E6%9E%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>在之前我们从汇编语言入手，从编译，链接再到执行，了解了一些基本内容，接下来，我们要从 C语言 出发从汇编角度来理解，相信系列完成之后，对于 C语言会有一个更加深入的认识。</p>
<hr>
<p>我们将使用下面的代码来研究函数调用过程</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> e = c + d;</div><div class="line">    <span class="keyword">return</span> e;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> bar(a, b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    foo(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们使用反汇编来看一下具体的代码，代码比较多，我们截取一些必要的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="number">0000000000000660</span> &lt;bar&gt;:</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bar</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span>&#123;</div><div class="line"> <span class="number">660</span>:	<span class="number">55</span>                   	push   %rbp</div><div class="line"> <span class="number">661</span>:	<span class="number">48</span> <span class="number">89</span> e5             	mov    %rsp,%rbp</div><div class="line"> <span class="number">664</span>:	<span class="number">89</span> <span class="number">7</span>d ec             	mov    %edi,<span class="number">-0x14</span>(%rbp)</div><div class="line"> <span class="number">667</span>:	<span class="number">89</span> <span class="number">75</span> e8             	mov    %esi,<span class="number">-0x18</span>(%rbp)</div><div class="line">    <span class="keyword">int</span> e = c + d;</div><div class="line"> <span class="number">66</span>a:	<span class="number">8b</span> <span class="number">55</span> ec             	mov    <span class="number">-0x14</span>(%rbp),%edx</div><div class="line"> <span class="number">66</span>d:	<span class="number">8b</span> <span class="number">45</span> e8             	mov    <span class="number">-0x18</span>(%rbp),%eax</div><div class="line"> <span class="number">670</span>:	<span class="number">01</span> d0                	add    %edx,%eax</div><div class="line"> <span class="number">672</span>:	<span class="number">89</span> <span class="number">45</span> fc             	mov    %eax,<span class="number">-0x4</span>(%rbp)</div><div class="line">    <span class="keyword">return</span> e;</div><div class="line"> <span class="number">675</span>:	<span class="number">8b</span> <span class="number">45</span> fc             	mov    <span class="number">-0x4</span>(%rbp),%eax</div><div class="line">&#125;</div><div class="line"> <span class="number">678</span>:	<span class="number">5</span>d                   	pop    %rbp</div><div class="line"> <span class="number">679</span>:	c3                   	retq   </div><div class="line"></div><div class="line"><span class="number">000000000000067</span>a &lt;foo&gt;:</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line"> <span class="number">67</span>a:	<span class="number">55</span>                   	push   %rbp</div><div class="line"> <span class="number">67b</span>:	<span class="number">48</span> <span class="number">89</span> e5             	mov    %rsp,%rbp</div><div class="line"> <span class="number">67</span>e:	<span class="number">48</span> <span class="number">83</span> ec <span class="number">08</span>          	sub    $<span class="number">0x8</span>,%rsp</div><div class="line"> <span class="number">682</span>:	<span class="number">89</span> <span class="number">7</span>d fc             	mov    %edi,<span class="number">-0x4</span>(%rbp)</div><div class="line"> <span class="number">685</span>:	<span class="number">89</span> <span class="number">75</span> f8             	mov    %esi,<span class="number">-0x8</span>(%rbp)</div><div class="line">    <span class="keyword">return</span> bar(a, b);</div><div class="line"> <span class="number">688</span>:	<span class="number">8b</span> <span class="number">55</span> f8             	mov    <span class="number">-0x8</span>(%rbp),%edx</div><div class="line"> <span class="number">68b</span>:	<span class="number">8b</span> <span class="number">45</span> fc             	mov    <span class="number">-0x4</span>(%rbp),%eax</div><div class="line"> <span class="number">68</span>e:	<span class="number">89</span> d6                	mov    %edx,%esi</div><div class="line"> <span class="number">690</span>:	<span class="number">89</span> c7                	mov    %eax,%edi</div><div class="line"> <span class="number">692</span>:	e8 c9 ff ff ff       	callq  <span class="number">660</span> &lt;bar&gt;</div><div class="line">&#125;</div><div class="line"> <span class="number">697</span>:	c9                   	leaveq </div><div class="line"> <span class="number">698</span>:	c3                   	retq   </div><div class="line"></div><div class="line"><span class="number">0000000000000699</span> &lt;main&gt;:</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line"> <span class="number">699</span>:	<span class="number">55</span>                   	push   %rbp</div><div class="line"> <span class="number">69</span>a:	<span class="number">48</span> <span class="number">89</span> e5             	mov    %rsp,%<span class="function">rbp</span></div><div class="line">    <span class="title">foo</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span>;</div><div class="line"> <span class="number">69</span>d:	be <span class="number">03</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       	mov    $<span class="number">0x3</span>,%esi</div><div class="line"> <span class="number">6</span>a2:	bf <span class="number">02</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       	mov    $<span class="number">0x2</span>,%edi</div><div class="line"> <span class="number">6</span>a7:	e8 ce ff ff ff       	callq  <span class="number">67</span>a &lt;foo&gt;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> <span class="number">6</span>ac:	b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       	mov    $<span class="number">0x0</span>,%eax</div><div class="line"> <span class="number">6b</span>1:	<span class="number">5</span>d                   	pop    %rbp</div><div class="line"> <span class="number">6b</span>2:	c3                   	retq   </div><div class="line"> <span class="number">6b</span>3:	<span class="number">66</span> <span class="number">2</span>e <span class="number">0f</span> <span class="number">1f</span> <span class="number">84</span> <span class="number">00</span> <span class="number">00</span> 	nopw   %cs:<span class="number">0x0</span>(%rax,%rax,<span class="number">1</span>)</div><div class="line"> <span class="number">6b</span>a:	<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> </div><div class="line"> <span class="number">6b</span>d:	<span class="number">0f</span> <span class="number">1f</span> <span class="number">00</span>             	nopl   (%rax)</div></pre></td></tr></table></figure></p>
<p>接下来我们分段来分析，先从 main方法里面看</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  foo(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line"><span class="number">69</span>d:   be <span class="number">03</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x3</span>,%esi</div><div class="line"><span class="number">6</span>a2:	bf <span class="number">02</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       	mov    $<span class="number">0x2</span>,%edi</div><div class="line"><span class="number">6</span>a7:   e8 ce ff ff ff          callq  <span class="number">67</span>a &lt;foo&gt;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="number">6</span>ac:   b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>          mov    $<span class="number">0x0</span>,%eax</div></pre></td></tr></table></figure>
<p>要调用函数 foo 之前 先要把参数准备好，它先将 3 存放到 esi 寄存器中， 2 存放到 edi寄存器中，可见参数是从右向左开始加载数据，准备好数据之后，我们调用 callq 函数跳转到存放 foo 函数的地方。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line"> <span class="number">67</span>a:   <span class="number">55</span>                      push   %rbp</div><div class="line"> <span class="number">67b</span>:   <span class="number">48</span> <span class="number">89</span> e5                mov    %rsp,%rbp</div><div class="line"> <span class="number">67</span>e:   <span class="number">48</span> <span class="number">83</span> ec <span class="number">08</span>             sub    $<span class="number">0x8</span>,%rsp</div><div class="line"> <span class="number">682</span>:   <span class="number">89</span> <span class="number">7</span>d fc                mov    %edi,<span class="number">-0x4</span>(%rbp)</div><div class="line"> <span class="number">685</span>:   <span class="number">89</span> <span class="number">75</span> f8                mov    %esi,<span class="number">-0x8</span>(%rbp)</div><div class="line">    <span class="keyword">return</span> bar(a, b);</div><div class="line"> <span class="number">688</span>:   <span class="number">8b</span> <span class="number">55</span> f8                mov    <span class="number">-0x8</span>(%rbp),%edx</div><div class="line"> <span class="number">68b</span>:   <span class="number">8b</span> <span class="number">45</span> fc                mov    <span class="number">-0x4</span>(%rbp),%eax</div><div class="line"> <span class="number">68</span>e:   <span class="number">89</span> d6                   mov    %edx,%esi</div><div class="line"> <span class="number">690</span>:   <span class="number">89</span> c7                   mov    %eax,%edi</div><div class="line"> <span class="number">692</span>:   e8 c9 ff ff ff          callq  <span class="number">660</span> &lt;bar&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们把寄存器 rbp 压栈，把 rsp 的值送到 rbp 中，把存放的数据，重新放置到相对 rbp 的 -4 和 -8 的位置。接下来到 重新放置好数据然后跳转到 bar 函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">int bar(int c, int d)&#123;</div><div class="line"> 660:   55                      push   %rbp</div><div class="line"> 661:   48 89 e5                mov    %rsp,%rbp</div><div class="line"> 664:   89 7d ec                mov    %edi,-0x14(%rbp)</div><div class="line"> 667:   89 75 e8                mov    %esi,-0x18(%rbp)</div><div class="line">    int e = c + d;</div><div class="line"> 66a:   8b 55 ec                mov    -0x14(%rbp),%edx</div><div class="line"> 66d:   8b 45 e8                mov    -0x18(%rbp),%eax</div><div class="line"> 670:   01 d0                   add    %edx,%eax</div><div class="line"> 672:   89 45 fc                mov    %eax,-0x4(%rbp)</div><div class="line">    return e;</div><div class="line"> 675:   8b 45 fc                mov    -0x4(%rbp),%eax</div><div class="line">&#125;</div><div class="line"> 678:   5d                      pop    %rbp</div><div class="line"> 679:   c3                      retq</div></pre></td></tr></table></figure>
<p>在函数开头，重新放置数据到当前函数区域当中，执行完相应的加法操作，然后将计算出来的值放到 eax 寄存器当中，然后 rbp 弹栈，弹会 foo 函数，最终跳回 main 函数，执行完毕。</p>
<hr>
<p>从上面也可以理解什么叫按值传递，每一个块函数有每一块函数的空间，然后这块函数在它这块空间上施展拳脚。</p>
]]></content>
      
        <categories>
            
            <category> 2017-6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言剖析————可执行文件]]></title>
      <url>http://yoursite.com/2017/06/01/C%E8%AF%AD%E8%A8%80%E5%89%96%E6%9E%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>经过前一轮分析目标文件，现在开始该分析可执行文件了，汇编源码就不贴了。</p>
<hr>
<p>让我们看看 通过链接器生成的可执行文件，做了些什么改动。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">jianran@jianran:~/桌面/x86HB$ readelf -a max</div><div class="line">ELF Header:</div><div class="line">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </div><div class="line">  Class:                             ELF64</div><div class="line">  Data:                              2&apos;s complement, little endian</div><div class="line">  Version:                           1 (current)</div><div class="line">  OS/ABI:                            UNIX - System V</div><div class="line">  ABI Version:                       0</div><div class="line">  Type:                              EXEC (Executable file)</div><div class="line">  Machine:                           Advanced Micro Devices X86-64</div><div class="line">  Version:                           0x1</div><div class="line">  Entry point address:               0x4000b0</div><div class="line">  Start of program headers:          64 (bytes into file)</div><div class="line">  Start of section headers:          648 (bytes into file)</div><div class="line">  Flags:                             0x0</div><div class="line">  Size of this header:               64 (bytes)</div><div class="line">  Size of program headers:           56 (bytes)</div><div class="line">  Number of program headers:         2</div><div class="line">  Size of section headers:           64 (bytes)</div><div class="line">  Number of section headers:         6</div><div class="line">  Section header string table index: 5</div><div class="line"></div><div class="line">Section Headers:</div><div class="line">  [Nr] Name              Type             Address           Offset</div><div class="line">       Size              EntSize          Flags  Link  Info  Align</div><div class="line">  [ 0]                   NULL             0000000000000000  00000000</div><div class="line">       0000000000000000  0000000000000000           0     0     0</div><div class="line">  [ 1] .text             PROGBITS         00000000004000b0  000000b0</div><div class="line">       000000000000002d  0000000000000000  AX       0     0     1</div><div class="line">  [ 2] .data             PROGBITS         00000000006000dd  000000dd</div><div class="line">       0000000000000038  0000000000000000  WA       0     0     1</div><div class="line">  [ 3] .symtab           SYMTAB           0000000000000000  00000118</div><div class="line">       0000000000000108  0000000000000018           4     7     8</div><div class="line">  [ 4] .strtab           STRTAB           0000000000000000  00000220</div><div class="line">       000000000000003f  0000000000000000           0     0     1</div><div class="line">  [ 5] .shstrtab         STRTAB           0000000000000000  0000025f</div><div class="line">       0000000000000027  0000000000000000           0     0     1</div><div class="line">Key to Flags:</div><div class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</div><div class="line">  L (link order), O (extra OS processing required), G (group), T (TLS),</div><div class="line">  C (compressed), x (unknown), o (OS specific), E (exclude),</div><div class="line">  l (large), p (processor specific)</div><div class="line"></div><div class="line">There are no section groups in this file.</div><div class="line"></div><div class="line">Program Headers:</div><div class="line">  Type           Offset             VirtAddr           PhysAddr</div><div class="line">                 FileSiz            MemSiz              Flags  Align</div><div class="line">  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000</div><div class="line">                 0x00000000000000dd 0x00000000000000dd  R E    0x200000</div><div class="line">  LOAD           0x00000000000000dd 0x00000000006000dd 0x00000000006000dd</div><div class="line">                 0x0000000000000038 0x0000000000000038  RW     0x200000</div><div class="line"></div><div class="line"> Section to Segment mapping:</div><div class="line">  Segment Sections...</div><div class="line">   00     .text </div><div class="line">   01     .data </div><div class="line"></div><div class="line">There is no dynamic section in this file.</div><div class="line"></div><div class="line">There are no relocations in this file.</div><div class="line"></div><div class="line">The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.</div><div class="line"></div><div class="line">Symbol table &apos;.symtab&apos; contains 11 entries:</div><div class="line">   Num:    Value          Size Type    Bind   Vis      Ndx Name</div><div class="line">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </div><div class="line">     1: 00000000004000b0     0 SECTION LOCAL  DEFAULT    1 </div><div class="line">     2: 00000000006000dd     0 SECTION LOCAL  DEFAULT    2 </div><div class="line">     3: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS max.o</div><div class="line">     4: 00000000006000dd     0 NOTYPE  LOCAL  DEFAULT    2 data_items</div><div class="line">     5: 00000000004000bf     0 NOTYPE  LOCAL  DEFAULT    1 start_loop</div><div class="line">     6: 00000000004000d6     0 NOTYPE  LOCAL  DEFAULT    1 loop_exit</div><div class="line">     7: 00000000004000b0     0 NOTYPE  GLOBAL DEFAULT    1 _start</div><div class="line">     8: 0000000000600115     0 NOTYPE  GLOBAL DEFAULT    2 __bss_start</div><div class="line">     9: 0000000000600115     0 NOTYPE  GLOBAL DEFAULT    2 _edata</div><div class="line">    10: 0000000000600118     0 NOTYPE  GLOBAL DEFAULT    2 _end</div><div class="line"></div><div class="line">No version information found in this file.</div></pre></td></tr></table></figure></p>
<p>在 ELF Header Table 中 改成了 EXEC，由目标文件变成了可执行文件，Entry point address(入口点地址）改成了 0x4000b0（这是 _start 符号的地址），还可以看出多了两个 Program Header，少了两个 Section Header。</p>
<p>在 Section Header Table 中的 .text 和 .data段的加载地址分别改成了00000000004000b0 和 00000000006000dd 。 .bss段没有用到，所以被删除了。.rel.text段就是用于链接器过程的，做完链接也就没有用，被删除了</p>
<p>多出的 Program Header Table 描述了两个 Segment 的信息。.text段和前面的 ELF Header、Program Header Table 一起组成一个 Segment，.data段组成另一个 Segment，以后我们就把这两个 Segment 分别叫做 Text Segment 和 Data Segment。VirtAddr 列出了 Text Segment 加载到虚拟地址 0x0000000000400000，Data Segment 加载到地址 0x00000000006000dd，Flg列指出了 Text Segment 的访问权限是「可读可执行」，Align 的值 0x200000，是该平台下内存页面大小。在加载时文件也要按页面大小分成若干页，文件中的一页对内存中的一页。</p>
<p>这个可执行文件很小，总共也不超过一页大小，但是两个 Segment 必须加载到内存中两个不同的页面，因为 MMU 的权限保护机制是以页为单位的，一个页面只能设置一种权限。同时为了简化链接器和加载器的实现，还规定每个 Segement 在文件页面偏移多少，加载到内存页面就要偏移多少。</p>
<p>原来目标文件符号表中的 Value 都是相对地址，现在都变成了绝对地址。此外还多了三个符号 _bss_start 、_endta 和 _end，这些符号在链接脚本中定义被链接器添加到可执行程序了。</p>
<p>再来看一个返回的结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">jianran@jianran:~/桌面/x86HB$ objdump -d max</div><div class="line"></div><div class="line">max:     file format elf64-x86-64</div><div class="line"></div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line">00000000004000b0 &lt;_start&gt;:</div><div class="line">  4000b0:	bf 00 00 00 00       	mov    $0x0,%edi</div><div class="line">  4000b5:	67 8b 04 bd dd 00 60 	mov    0x6000dd(,%edi,4),%eax</div><div class="line">  4000bc:	00 </div><div class="line">  4000bd:	89 c3                	mov    %eax,%ebx</div><div class="line"></div><div class="line">00000000004000bf &lt;start_loop&gt;:</div><div class="line">  4000bf:	83 f8 00             	cmp    $0x0,%eax</div><div class="line">  4000c2:	74 12                	je     4000d6 &lt;loop_exit&gt;</div><div class="line">  4000c4:	ff c7                	inc    %edi</div><div class="line">  4000c6:	67 8b 04 bd dd 00 60 	mov    0x6000dd(,%edi,4),%eax</div><div class="line">  4000cd:	00 </div><div class="line">  4000ce:	39 d8                	cmp    %ebx,%eax</div><div class="line">  4000d0:	7e ed                	jle    4000bf &lt;start_loop&gt;</div><div class="line">  4000d2:	89 c3                	mov    %eax,%ebx</div><div class="line">  4000d4:	eb e9                	jmp    4000bf &lt;start_loop&gt;</div><div class="line"></div><div class="line">00000000004000d6 &lt;loop_exit&gt;:</div><div class="line">  4000d6:	b8 01 00 00 00       	mov    $0x1,%eax</div><div class="line">  4000db:	cd 80                	int    $0x80</div></pre></td></tr></table></figure></p>
<p>指令中的相对地址都变成了绝对地址。同时为什么链接器怎么知道要改这两处？是根据目标文件中 .rel.text 提供的重定位信息修改的。</p>
<hr>
<p>前奏终于干完，接下来撸起袖子，让我们正式开把～～</p>
]]></content>
      
        <categories>
            
            <category> 2017-6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言剖析————目标文件]]></title>
      <url>http://yoursite.com/2017/06/01/C%E8%AF%AD%E8%A8%80%E5%89%96%E6%9E%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#max.s</div><div class="line"></div><div class="line">.section .data</div><div class="line">data_items:</div><div class="line">.long 3,67,34,222,45,75,54,34,44,33,22,11,66,0</div><div class="line">.section .text</div><div class="line">.globl _start</div><div class="line">_start:</div><div class="line">movl $0, %edi</div><div class="line">movl data_items(,%edi,4), %eax # load the first byte of data</div><div class="line">movl %eax, %ebx</div><div class="line">start_loop:</div><div class="line">cmpl $0, %eax</div><div class="line">je loop_exit</div><div class="line">incl %edi</div><div class="line">movl data_items(,%edi,4), %eax</div><div class="line">cmpl %ebx, %eax</div><div class="line">jle start_loop</div><div class="line">movl %eax, %ebx</div><div class="line">jmp start_loop</div><div class="line">loop_exit:</div><div class="line">movl $1, %eax</div><div class="line">int $0x80</div></pre></td></tr></table></figure>
<p>以下几篇文章都会采用这个例子，这段程序的主要功能是在 data_items 选出最大值，并且当做终止状态返回。</p>
<p>下面用 readelf 工具读出目标文件 max.o 的 ELF Header 和 Section Header Table，然后我们 逐段分析 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ELF Header:</div><div class="line">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </div><div class="line">  Class:                             ELF64</div><div class="line">  Data:                              2&apos;s complement, little endian</div><div class="line">  Version:                           1 (current)</div><div class="line">  OS/ABI:                            UNIX - System V</div><div class="line">  ABI Version:                       0</div><div class="line">  Type:                              REL (Relocatable file)</div><div class="line">  Machine:                           Advanced Micro Devices X86-64</div><div class="line">  Version:                           0x1</div><div class="line">  Entry point address:               0x0</div><div class="line">  Start of program headers:          0 (bytes into file)</div><div class="line">  Start of section headers:          504 (bytes into file)</div><div class="line">  Flags:                             0x0</div><div class="line">  Size of this header:               64 (bytes)</div><div class="line">  Size of program headers:           0 (bytes)</div><div class="line">  Number of program headers:         0</div><div class="line">  Size of section headers:           64 (bytes)</div><div class="line">  Number of section headers:         8</div><div class="line">  Section header string table index: 7</div></pre></td></tr></table></figure>
<p>ELF Header 中描述了操作系统 是 UNIX 体系结构是 Advanced Micro Devices X86-64，Section Header Table 中有 8 个 Setion Header,从文件地址 504 开始，每个 Section Header 占 64 个字节。这个目标文件没有 Program Header<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Section Headers:</div><div class="line">  [Nr] Name              Type             Address           Offset</div><div class="line">       Size              EntSize          Flags  Link  Info  Align</div><div class="line">  [ 0]                   NULL             0000000000000000  00000000</div><div class="line">       0000000000000000  0000000000000000           0     0     0</div><div class="line">  [ 1] .text             PROGBITS         0000000000000000  00000040</div><div class="line">       000000000000002d  0000000000000000  AX       0     0     1</div><div class="line">  [ 2] .rela.text        RELA             0000000000000000  00000190</div><div class="line">       0000000000000030  0000000000000018   I       5     1     8</div><div class="line">  [ 3] .data             PROGBITS         0000000000000000  0000006d</div><div class="line">       0000000000000038  0000000000000000  WA       0     0     1</div><div class="line">  [ 4] .bss              NOBITS           0000000000000000  000000a5</div><div class="line">       0000000000000000  0000000000000000  WA       0     0     1</div><div class="line">  [ 5] .symtab           SYMTAB           0000000000000000  000000a8</div><div class="line">       00000000000000c0  0000000000000018           6     7     8</div><div class="line">  [ 6] .strtab           STRTAB           0000000000000000  00000168</div><div class="line">       0000000000000028  0000000000000000           0     0     1</div><div class="line">  [ 7] .shstrtab         STRTAB           0000000000000000  000001c0</div><div class="line">       0000000000000031  0000000000000000           0     0     1</div><div class="line">Key to Flags:</div><div class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</div><div class="line">  L (link order), O (extra OS processing required), G (group), T (TLS),</div><div class="line">  C (compressed), x (unknown), o (OS specific), E (exclude),</div><div class="line">  l (large), p (processor specific)</div><div class="line"></div><div class="line">There are no section groups in this file.</div><div class="line"></div><div class="line">There are no program headers in this file.</div></pre></td></tr></table></figure></p>
<p>从 Section Header 中读取各Section 的描述信息，其中 .text 和 .data 是我们在汇编程序中声明的 Section ，而其他 Section 是汇编器自动添加的。Address 列指出了这些 Section 加载到内存中的地址（虚拟地址），目标文件中各 Section 的加载地址都是待定的，所以是 0000000000000000，到链接时再确定这些地址。 Offset 和 Size 列出了起始文件地址和长度。例如 .data段 从文件地址 0x6d 开始，一共 0x38。</p>
<p>使用 hexdump 打印出目标文件的全部字节<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">jianran@jianran:~/桌面/x86HB$ hexdump -C max.o</div><div class="line">00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|</div><div class="line">00000010  01 00 3e 00 01 00 00 00  00 00 00 00 00 00 00 00  |..&gt;.............|</div><div class="line">00000020  00 00 00 00 00 00 00 00  f8 01 00 00 00 00 00 00  |................|</div><div class="line">00000030  00 00 00 00 40 00 00 00  00 00 40 00 08 00 07 00  |....@.....@.....|</div><div class="line">00000040  bf 00 00 00 00 67 8b 04  bd 00 00 00 00 89 c3 83  |.....g..........|</div><div class="line">00000050  f8 00 74 12 ff c7 67 8b  04 bd 00 00 00 00 39 d8  |..t...g.......9.|</div><div class="line">00000060  7e ed 89 c3 eb e9 b8 01  00 00 00 cd 80 03 00 00  |~...............|</div><div class="line">00000070  00 43 00 00 00 22 00 00  00 de 00 00 00 2d 00 00  |.C...&quot;.......-..|</div><div class="line">00000080  00 4b 00 00 00 36 00 00  00 22 00 00 00 2c 00 00  |.K...6...&quot;...,..|</div><div class="line">00000090  00 21 00 00 00 16 00 00  00 0b 00 00 00 42 00 00  |.!...........B..|</div><div class="line">000000a0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div><div class="line">*</div><div class="line">000000c0  00 00 00 00 03 00 01 00  00 00 00 00 00 00 00 00  |................|</div><div class="line">000000d0  00 00 00 00 00 00 00 00  00 00 00 00 03 00 03 00  |................|</div><div class="line">000000e0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div><div class="line">000000f0  00 00 00 00 03 00 04 00  00 00 00 00 00 00 00 00  |................|</div><div class="line">00000100  00 00 00 00 00 00 00 00  01 00 00 00 00 00 03 00  |................|</div><div class="line">00000110  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div><div class="line">00000120  0c 00 00 00 00 00 01 00  0f 00 00 00 00 00 00 00  |................|</div><div class="line">00000130  00 00 00 00 00 00 00 00  17 00 00 00 00 00 01 00  |................|</div><div class="line">00000140  26 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |&amp;...............|</div><div class="line">00000150  21 00 00 00 10 00 01 00  00 00 00 00 00 00 00 00  |!...............|</div><div class="line">00000160  00 00 00 00 00 00 00 00  00 64 61 74 61 5f 69 74  |.........data_it|</div><div class="line">00000170  65 6d 73 00 73 74 61 72  74 5f 6c 6f 6f 70 00 6c  |ems.start_loop.l|</div><div class="line">00000180  6f 6f 70 5f 65 78 69 74  00 5f 73 74 61 72 74 00  |oop_exit._start.|</div><div class="line">00000190  09 00 00 00 00 00 00 00  0b 00 00 00 02 00 00 00  |................|</div><div class="line">000001a0  00 00 00 00 00 00 00 00  1a 00 00 00 00 00 00 00  |................|</div><div class="line">000001b0  0b 00 00 00 02 00 00 00  00 00 00 00 00 00 00 00  |................|</div><div class="line">000001c0  00 2e 73 79 6d 74 61 62  00 2e 73 74 72 74 61 62  |..symtab..strtab|</div><div class="line">000001d0  00 2e 73 68 73 74 72 74  61 62 00 2e 72 65 6c 61  |..shstrtab..rela|</div><div class="line">000001e0  2e 74 65 78 74 00 2e 64  61 74 61 00 2e 62 73 73  |.text..data..bss|</div><div class="line">000001f0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div><div class="line">*</div><div class="line">00000230  00 00 00 00 00 00 00 00  20 00 00 00 01 00 00 00  |........ .......|</div><div class="line">00000240  06 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div><div class="line">00000250  40 00 00 00 00 00 00 00  2d 00 00 00 00 00 00 00  |@.......-.......|</div><div class="line">00000260  00 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|</div><div class="line">00000270  00 00 00 00 00 00 00 00  1b 00 00 00 04 00 00 00  |................|</div><div class="line">00000280  40 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |@...............|</div><div class="line">00000290  90 01 00 00 00 00 00 00  30 00 00 00 00 00 00 00  |........0.......|</div><div class="line">000002a0  05 00 00 00 01 00 00 00  08 00 00 00 00 00 00 00  |................|</div><div class="line">000002b0  18 00 00 00 00 00 00 00  26 00 00 00 01 00 00 00  |........&amp;.......|</div><div class="line">000002c0  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div><div class="line">000002d0  6d 00 00 00 00 00 00 00  38 00 00 00 00 00 00 00  |m.......8.......|</div><div class="line">000002e0  00 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|</div><div class="line">000002f0  00 00 00 00 00 00 00 00  2c 00 00 00 08 00 00 00  |........,.......|</div><div class="line">00000300  03 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div><div class="line">00000310  a5 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div><div class="line">00000320  00 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|</div><div class="line">00000330  00 00 00 00 00 00 00 00  01 00 00 00 02 00 00 00  |................|</div><div class="line">00000340  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div><div class="line">00000350  a8 00 00 00 00 00 00 00  c0 00 00 00 00 00 00 00  |................|</div><div class="line">00000360  06 00 00 00 07 00 00 00  08 00 00 00 00 00 00 00  |................|</div><div class="line">00000370  18 00 00 00 00 00 00 00  09 00 00 00 03 00 00 00  |................|</div><div class="line">00000380  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div><div class="line">00000390  68 01 00 00 00 00 00 00  28 00 00 00 00 00 00 00  |h.......(.......|</div><div class="line">000003a0  00 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|</div><div class="line">000003b0  00 00 00 00 00 00 00 00  11 00 00 00 03 00 00 00  |................|</div><div class="line">000003c0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</div><div class="line">000003d0  c0 01 00 00 00 00 00 00  31 00 00 00 00 00 00 00  |........1.......|</div><div class="line">000003e0  00 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|</div></pre></td></tr></table></figure></p>
<p>.data段被原封不动的加载到内存中了<br>.shstrtab 和 .strtab 这两个 Section 存放都是 ASCII 码，<br>.shstrtab段保存着各 Section 的名字，.strtab 保存着程序需要用到的符号名字。</p>
<p>我们知道， C语言的全局变量如果代码没有初始化，就会在程序加载时用 0 初始化。这种数据属于 .bss段，在加载它和 .data段一样都是可读可写的数据，但是在 ELF文件中 .data段需要占用一部分空间保存初始化值，而 .bss段 则不需要。也就是说，.bss段 在文件中只占一个 Section Header 而没有对应的 Section，程序加载时，.bss段占用多大内存空间在 Section Header 中描述。在我们这个例子中没有用到 .bss段 </p>
<p>我们继续分析 readelf 输出的最后一部分，是从 .rel.test 和 .symtab 这两个 Section 读出的信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Relocation section &apos;.rela.text&apos; at offset 0x190 contains 2 entries:</div><div class="line">  Offset          Info           Type           Sym. Value    Sym. Name + Addend</div><div class="line">000000000009  00020000000b R_X86_64_32S      0000000000000000 .data + 0</div><div class="line">00000000001a  00020000000b R_X86_64_32S      0000000000000000 .data + 0</div><div class="line"></div><div class="line">The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.</div><div class="line"></div><div class="line">Symbol table &apos;.symtab&apos; contains 8 entries:</div><div class="line">   Num:    Value          Size Type    Bind   Vis      Ndx Name</div><div class="line">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </div><div class="line">     1: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 </div><div class="line">     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 </div><div class="line">     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 </div><div class="line">     4: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT    3 data_items</div><div class="line">     5: 000000000000000f     0 NOTYPE  LOCAL  DEFAULT    1 start_loop</div><div class="line">     6: 0000000000000026     0 NOTYPE  LOCAL  DEFAULT    1 loop_exit</div><div class="line">     7: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT    1 _start</div><div class="line"></div><div class="line">No version information found in this file.</div></pre></td></tr></table></figure>
<p>.rel.text 告诉链接器指令中哪些地方需要重定位<br>.symtab 是符号表。 Ndx 列是每个符号所在的 Section 编号，例如data_items 在第三个 Section 里（也就是 .data段），各 Section 的编号见 Section Header Table。Value 列是每个符号 所代表的地址，在目标文件中，符号地址都是相对于该符号所在 Section 的相对地址。Bind 这一列描述是全局还是局部，其中我们使用「 .globl 」声明的 _start 是全局，其他都是局部的</p>
<p>现在我们使用 objdump 工具把程序中的机器指令反汇编，那么反汇编的结果时候时候和原来一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">jianran@jianran:~/桌面/x86HB$ objdump -d max.o</div><div class="line"></div><div class="line">max.o:     file format elf64-x86-64</div><div class="line"></div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line">0000000000000000 &lt;_start&gt;:</div><div class="line">   0:	bf 00 00 00 00       	mov    $0x0,%edi</div><div class="line">   5:	67 8b 04 bd 00 00 00 	mov    0x0(,%edi,4),%eax</div><div class="line">   c:	00 </div><div class="line">   d:	89 c3                	mov    %eax,%ebx</div><div class="line"></div><div class="line">000000000000000f &lt;start_loop&gt;:</div><div class="line">   f:	83 f8 00             	cmp    $0x0,%eax</div><div class="line">  12:	74 12                	je     26 &lt;loop_exit&gt;</div><div class="line">  14:	ff c7                	inc    %edi</div><div class="line">  16:	67 8b 04 bd 00 00 00 	mov    0x0(,%edi,4),%eax</div><div class="line">  1d:	00 </div><div class="line">  1e:	39 d8                	cmp    %ebx,%eax</div><div class="line">  20:	7e ed                	jle    f &lt;start_loop&gt;</div><div class="line">  22:	89 c3                	mov    %eax,%ebx</div><div class="line">  24:	eb e9                	jmp    f &lt;start_loop&gt;</div><div class="line"></div><div class="line">0000000000000026 &lt;loop_exit&gt;:</div><div class="line">  26:	b8 01 00 00 00       	mov    $0x1,%eax</div><div class="line">  2b:	cd 80                	int    $0x80</div></pre></td></tr></table></figure></p>
<p>在这里我们展示了 .text 的内容<br>非常显然，所有的符号都被替换成地址，比如 je 26，注意没有加 $ 的数字表示内存地址，而不表示立即数。在这里所有的类似 <_start> 的符号，不是指令的一部分，而是反汇编器从 .symtab 和 .strtab 查到的符号名称，卸载后面增加可读性，目前所有指令中用到的符号地址都是相对地址，等到下一步链接器要修改这些指令，把其中的地址都改成加载时的内存地址，这些指令才能正确执行</_start></p>
<hr>
<p>相信阅读完成，你心里大概有个底了，为什么目标文件不可以执行？<br>因为没有真正映射到物理内存上面，无法获取真正的数据，当然还有其他没有说明的理由，在接下来几篇文章中，我将会说到。</p>
]]></content>
      
        <categories>
            
            <category> 2017-6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言剖析————ELF文件]]></title>
      <url>http://yoursite.com/2017/06/01/C%E8%AF%AD%E8%A8%80%E5%89%96%E6%9E%90%E2%80%94%E2%80%94%E2%80%94%E2%80%94ELF%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>ELF 文件格式是一个开放标准，各种 UNIX 系统的<strong>可执行文件</strong>都采用 ELF 格式，它有以下三种不同的类型。</p>
<ul>
<li>可重定位的目标文件</li>
<li>可执行文件</li>
<li>共享库</li>
</ul>
<p>共享库留着以后慢慢说。</p>
<hr>
<p>现在解释一下程序的汇编、链接、运行过程</p>
<p>1、写一个汇编程序并且保存成<strong>文本文件</strong> </p>
<p>2、汇编器读取这个文本文件并将其转换成目标文件。目标文件由若干个 Section 组成，我们在汇编程序中声明 .section 会成为目标文件中的 Section ，此外汇编器还会自动添加 Section</p>
<p>3、然后链接器把目标文件中的 Section 合并成几个 Segment ，生成可执行文件</p>
<p>4、最后 加载器 根据 可执行文件中的 Segment 信息加载运行这个程序。</p>
<p>所以 ELF 格式提供了两种不同的视角，从 链接器 把 ELF文件 看成 Section 的集合。而从 加载器 把 ELF文件 看成 Segment 的集合</p>
<p><img src="http://ww1.sinaimg.cn/large/b36c7eebly1fg5e81iptfj209p07mab5.jpg" alt=""></p>
<p>图的左边是从 链接器 角度看， 开头的 ELF header 描述了 体系结构 和 操作系统等基本信息，并指出 Section Header Table 和 Program Header Table 文件中的位置，Program Header Table 在链接过程用不到，所以可有可无，Section Header Table 可以找到每个 Section 在文件中的位置。右边是从 加载器 的角度看 ELF文件，开头是 ELF Header, Program Header Table 中保存了所有 Segment 的描述信息，相反 Section Header Table 是用了不到的，从图中可以看出，一个 Segment 由 一个或多个 Section 组成，这些 Section 加载到内存是具有 相同的访问权限，有些 Section 只对 链接器 有意义，在运行时用不到，也不需要加载到内存，那么就不属于 任何 Segment </p>
<p>注：这里 Section Header Table 和 Program Header Table只是为了清晰，真实的两个表并不一定要位于文件开头和结尾</p>
]]></content>
      
        <categories>
            
            <category> 2017-6 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[寻址方式]]></title>
      <url>http://yoursite.com/2017/05/31/%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>常用的几种寻址方式。内存寻址在指令中可以表示成如下的通用格式：</p>
<pre><code>ADDRESS_OR(%BASE_OR_OFFSET,%INDEX,MULTIPLIER)
</code></pre><p>他所表示的地址可以这样计算出来<br>FINAL ADDRESS = ADDRESS_OR_OFFEST + BASE_OR_OFFSET + MULTIPLIER x INDEX</p>
<p>其中 ADDRESS_OR_OFFSET 和 MULTIPLIER 必须是常数，BASE_OR_OFFSET 和 INDEX 必须是寄存器</p>
<ul>
<li><p><strong>直接寻址</strong>。只使用 ADDRESS_OR_OFFEST 寻址，例如 movl ADDRESS，%eax 把 ADDRESS 地址处的32位数传送到 eax 寄存器</p>
</li>
<li><p><strong>变址寻址</strong>。 movl data_items（，%edi，4），%eax 就属于这种寻址，用于访问数组元素比较方便</p>
</li>
<li><p><strong>间接寻址</strong>。只是用 BASE_OR_OFFSET 寻址，例如 movl （%eax），%ebx，把 eax 寄存器的值看做地址，把内存中这个地址处的 32 位数传送到 ebx 寄存器。</p>
</li>
<li><p><strong>基址寻址</strong>。只使用 ADDRESS_OR_OFFSET 和 BASE_OR_OFFSET 寻址，<br>例如： movl 4（%eax），%ebx，用于访问结构体成员比较方便，例如一个结构体的基地址保存在 寄存器eax 中，其中一个成员在结构体中的偏移量是 4 字节，要把这个成员读上来就可以使用这条指令</p>
</li>
<li><p><strong>立即数寻址</strong>。就是指令中有一个操作数是立即数，例如：movl $12, %eax</p>
</li>
<li><p><strong>寄存器寻址</strong>。就是指令中一个操作数是寄存器</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 2017-5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 汇编语言基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ C语言剖析——X86汇编程序基础(一）]]></title>
      <url>http://yoursite.com/2017/05/31/C%E8%AF%AD%E8%A8%80%E5%89%96%E6%9E%90%E2%80%94%E2%80%94X86%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80-%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>要搞清楚 C语言 的原理,就必须深入到指令层去理解. 你编写一行代码会生成什么样的指令,要做到心中有数,所以这里只会说明一些必要的汇编语言信息</p>
<hr>
<p>##最简单的汇编程序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#PURPOSE: Simple program that exits and returns a</div><div class="line">#status code back to the Linux kernel</div><div class="line">#</div><div class="line">#INPUT:none</div><div class="line">#</div><div class="line">#OUTPUT: returns a status code. This can be viewed</div><div class="line">#        by typing</div><div class="line">#</div><div class="line">#        echo $?</div><div class="line">#</div><div class="line">#        after running the program</div><div class="line">#</div><div class="line">#VARIABLES:</div><div class="line">#        %eax holds the system call number</div><div class="line">#        %ebx holds the return status</div><div class="line">#</div><div class="line">.section .data</div><div class="line">.section .text</div><div class="line">.globl _start</div><div class="line">_start:</div><div class="line">movl $1, %eax</div><div class="line">movl $4,%ebx</div><div class="line">int $0x80</div></pre></td></tr></table></figure>
<p>将这个文件保存为 hello.s (汇编程序通常以 .s 作为文件后缀),用汇编器 as 把汇编程序中的助记符翻译成机器指令,生成<strong>目标文件</strong> hello.o</p>
<blockquote>
<p>$ as hello.s -o hello.o</p>
</blockquote>
<p>然后用链接器(Linker) ld 把目标文件 hello.o<strong>链接</strong>成可执行文件 hello:</p>
<blockquote>
<p>$ ld hello.o -o hello</p>
</blockquote>
<p>有人可能会问,为什么汇编语言翻译成机器指令还需要使用有一个链接的步骤?<br>链接主要有两个作用:<br>    1) 修改「目标文件」中的信息,对地址进行重定位<br>    2) 把「多个目标文件」合并成一个执行文件</p>
<p>现在这个程序只执行一件事情 —— 退出，退出状态是 4 </p>
<pre><code>$ ./hello
</code></pre><p>\$ echo  $?<br>    4</p>
<p>##分析程序</p>
<p>首先， #表示单行注释，类似于 C语言 当中 //</p>
<pre><code>.section .data
</code></pre><p>汇编语言中以「 . 」开头的名称并不是指令的 助记符，不会被翻译成 机器指令， 而是给汇编一些提醒，叫做 汇编指示 或 伪操作.<br>「 .section 」指示把代码划分成若干个「 Section 」，程序被操作系统 加载 执行时，每一段被加载到不同地址，<strong>操作系统对不同的页面设置不同的读、写、执行权限.</strong> .data段 保存程序的数据，是可读可写的，相当于 C 程序 的全局变量，对于本程序来说没有定义数据，所以 .data段 是空的</p>
<pre><code>.section .text
</code></pre><p>.text段 保存代码，是<strong>只读和可执行的</strong>，后面那些指令都属于 .text段</p>
<pre><code>.globl _start
</code></pre><p>_start 是一个符号，符号在汇编程序中代表一个地址，可以用在指令中，汇编程序经过汇编器的处理之后，所有的符号都被替换成它所代表的地址值。在 C语言 中我们通过变量名访问一个变量，其实就是访问从某个地址开始的内存单元，通过函数名调用一个函数，其实就是跳转到该函数第一条指令所在的地址，所以变量名和函数名都是符号，本质上是代表内存地址的.</p>
<p>.globl 告诉汇编器，_start 这个符号要被链接器用到，所以要在目标文件的符号表中标记它是一个全局符号. _start 就像 C程序 的main函数一样特殊，是整个函数的入口，链接器在链接时会查找目标文件中的 _start 符号代表的地址，把它设置为整个程序的入口地址，所以每个汇编器 都要提供一个 _start 符号并且用 .globl 声明。如果一个符号没有 .globl 声明，就表示这个符号没有用 .globl 声明，就表示这个符号不会被链接器用到</p>
<pre><code>_start:
</code></pre><p>这里定义了 _start 符号，汇编器在 翻译 汇编程序会计算每个 数据对象 和 每条指令 的地址，当看到这样一个符号定义时，就把它后面一条指令的地址作为这个符号代表的地址。而 _start 这个符号比较特殊，它所代表的地址是整个程序的入口地址，所以下一条指令 movl $1, %eax 就成了程序第一条被执行的指令了</p>
<pre><code>movl $1, %eax
</code></pre><p>这是一条数据传送指令，这条指令要求 CPU 内部产生一个数字 1 并 保存到 eax 寄存器中。mov 的后缀 l 表示 long， 说明是 32 位的传送指令。这条指令不要求 CPU 读内存，1 这个数字是从 CPU 内部产生的，叫做立即数。在汇编程序中，<strong>立即数前面要加 $ </strong>,寄存器名前面要加 % ，以便和 符号名 区分开来。 </p>
<pre><code>movl $4, %ebx
</code></pre><p>与上一条指令基本格式相同，生成一个立即数，然后存放到 ebx 寄存器当中</p>
<pre><code>int $0x80
</code></pre><p>前两条指令都是为这条指令做准备的，执行这条时发生一下动作：</p>
<ol>
<li>int 指令称为 软中断指令，可以用这条指令故意产生一个异常，CPU 从用户模式切换到特权模式，然后跳转到内核代码中执行异常处理程序</li>
<li>int 指令中的立即数 \$0x80 是一个参数，在异常处理中要根据这个参数决定如何处理，在 Linux内核中 int $0x80 这种异常称为 「系统调用」。内核提供了很多系统服务供用户程序使用，但这些系统服务不能像库函数（比如 print 一样调用），因为在执行用户程序时 CPU 处于用户模式，不能直接调用，所以需要通过系统调用 切换 CPU 模式，经由异常处理程序进入内核，<strong>用户程序只能通过寄存器传入几个参数</strong>，之后就要按内核设计好的线路走了，而不能任由用户程序随心所欲的调用</li>
<li>eax 和 ebx 是传递给「系统调用」的两个参数。eax 的值是系统调用号，Linux 的各种系统调用都是由 int $0x80 指令引发的，内核需要通过 eax 判断用户需要哪个系统调用，_exit 的系统调用号是 1 . ebx 的值是传给 _exit 的参数，表示退出状态. 大多数系统调用完成之后，会返回用户空间继续执行后面的指令，而 <strong>_ext 系统比较特殊，它会终止当前而不是反回用户空间继续执行</strong>， 这个大概解释了「 echo $?」打印出来的为什么是 4（明明我们没有进行输入怎么就打印了？）</li>
</ol>
<hr>
<p>本节重点：</p>
<ol>
<li>「 .section指示 」把代码划分成若干个「 Section 」，程序被操作系统 加载 执行时，每一段被加载到不同地址，操作系统对不同的页面设置不同的读、写、执行权限.</li>
<li>.data段 保存程序的数据，是可读可写的，相当于 C 程序 的全局变量</li>
<li>.text段 只读用于保存代码</li>
<li>.globl _start 相当于 main，.globl 的作用</li>
<li>符号 地址的由来</li>
<li>系统调用的基本知识</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 2017-5 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[529]]></title>
      <url>http://yoursite.com/2017/04/04/529/</url>
      <content type="html"><![CDATA[<p>JianRan<br>2017/4/4</p>
]]></content>
      
        <categories>
            
            <category> 2017-4 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 阶段一 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bitmap—— Android 高效加载图片]]></title>
      <url>http://yoursite.com/2017/04/04/Bitmap%E2%80%94%E2%80%94-Android-%E9%AB%98%E6%95%88%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p>自从装完 Linux 好久都没有写文章，主要自己发现在某块内容方面严重欠缺，正在狠补当中。</p>
<p>对于 Google 文档的进度到了 “Android图片与动画”，这一块在 <a href="https://developer.android.google.cn/training/index.html?hl=zh-cn" target="_blank" rel="external">Google Training</a>上面已经找不到了，具体还是去看 胡凯翻译的<a href="http://hukai.me/android-training-course-in-chinese/basics/index.html" target="_blank" rel="external"> Google 文档</a>。哪怕只是 Training 里面依然有很多干货。</p>
<hr>
<p>本文会讲关于 Android 加载图片的一些知识。我们在通过 ImageView 来加载一张图片的时候，如果不加任何处理的话经常会出现 OOM(Out Of Memory) 的情况，哪怕只是加载一张只有几十KB的图片，通过 Android Studio 所提供 Monitor 会发现，一张如此小的图片竟然消耗了十几兆的内存，简直不要太可怕！</p>
<p>这里我们引出了一个问题，Android系统图片加载机制到底是怎么样的？ 是什么导致了一张几十KB的图片，摇身一变成内存大魔王了？</p>
<p>###Android系统加载图片机制</p>
<p> Android 色彩模式说明：</p>
<ul>
<li>ALPHA_8：每个像素占用1byte内存。</li>
<li>ARGB_4444:每个像素占用2byte内存</li>
<li>ARGB_8888:每个像素占用4byte内存</li>
<li>RGB_565:每个像素占用2byte内存</li>
</ul>
<p>Android默认的色彩模式为 ARGB_8888 ，这个色彩模式色彩最细腻，显示质量最高。但同样的，占用的内存也最大，而且不管你的图片格式是 PNG 还是 JPG 格式 Android 系统都采用 Bitmap 这个加载形式来加载。<br>假设一张1024<em>1024，模式为ARGB_8888的图片，那么它占有的内存就是：1024</em>1024*4 = 4MB</p>
<p>注：无论是怎样格式的图片，Android 都会看成是由一个一个像素组成的，然后一个一个像素加载</p>
<p>###解决问题</p>
<p>BitmapFactory 这个类提供了多个解析方法(decodeByteArray, decodeFile, decodeResource 等)用于创建 Bitmap对象，我们应该根据图片的来源选择合适的方法。比如 SD 卡中的图片可以使用 decodeFile 方法，网络上的图片可以使用 decodeStream 方法，资源文件中的图片可以使用 decodeResource 方法。这些方法会尝试为已经构建的 bitmap 分配内存，这时就会很容易导致 OOM 出现。为此每种解析方法都提供了一个可选的 BitmapFactory.Options 参数，在里面有一个 inJustDecodeBounds 的参数， 我们将他设置为 true， 就可以禁止给 Bitmap 分配内存，但是我们依然可以获得这个图片的长宽这个信息，我们可以通过这个来缩放我们图片达到适当的大小。</p>
<p>我们这里为什么要进行图片的缩放了？<br>举一个例子，某情景下我们要给用户设置一个 128 × 128 头像，但是我们如果采用直接不加处理的显示一个 1920 × 1080 的一个图片，尽管我们最终只能在 128 × 128 这个面积下看到图像，但是 Android系统 会给它分配 1920 × 1080 × 4KB大小的内存。<br>所以我们要将图片缩放到适当大小，我们完全没有必要为了一个 “头像” 而是用如此大的内存消耗</p>
<p>我们可以通过如下方法获取图片的长宽：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">options.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">BitmapFactory.decodeResource(getResources(), R.id.image, options);</div><div class="line"><span class="keyword">int</span> imageHeight = options.outHeight;</div><div class="line"><span class="keyword">int</span> imageWidth = options.outWidth;</div></pre></td></tr></table></figure></p>
<p>我们知道图片原本的长宽，下来我们要根据我们要使用的的具体的长宽进行缩放，使用的是在 BitmapFactory.Options 中的 inSampleSize 的属性，这个属性的意思大概是缩放比例的意思，例如, 一个分辨率为2048x1536的图片，如果设置 inSampleSize 为4，那么会产出一个大约512x384大小的Bitmap。加载这张缩小的图片仅仅使用大概0.75MB的内存，如果是加载完整尺寸的图片，那么大概需要花费12MB（前提都是Bitmap的配置是 ARGB_8888）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateInSampleSize</span><span class="params">(</span></span></div><div class="line">            BitmapFactory.Options options, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight) &#123;</div><div class="line">    <span class="comment">// Raw height and width of image</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;</div><div class="line">    <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqWidth) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfHeight = height / <span class="number">2</span>;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> halfWidth = width / <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="comment">// Calculate the largest inSampleSize value that is a power of 2 and keeps both</span></div><div class="line">        <span class="comment">// height and width larger than the requested height and width.</span></div><div class="line">        <span class="keyword">while</span> ((halfHeight / inSampleSize) &gt; reqHeight</div><div class="line">                &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) &#123;</div><div class="line">            inSampleSize *= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> inSampleSize;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<pre><code>以上是 Google 文档的内容，有人会问，为什么我们要用2的倍数？
设置inSampleSize为2的幂是因为解码器最终还是会对非2的幂的数进行向下处理，获取到最靠近2的幂的数。详情参考inSampleSize的文档。
</code></pre><p>缩放比例已经确定，现在只剩下最后的生成图片了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeSampledBitmapFromResource</span><span class="params">(Resources res, <span class="keyword">int</span> resId,</span></span></div><div class="line">        <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// First decode with inJustDecodeBounds=true to check dimensions</span></div><div class="line">    <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">    options.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">    BitmapFactory.decodeResource(res, resId, options);</div><div class="line"></div><div class="line">    <span class="comment">// Calculate inSampleSize</span></div><div class="line">    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);</div><div class="line"></div><div class="line">    <span class="comment">// Decode bitmap with inSampleSize set</span></div><div class="line">    options.inJustDecodeBounds = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">return</span> BitmapFactory.decodeResource(res, resId, options);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后我们要把 inJustDecodeBounds 设置成 false 这样通过 decodeResource 最后返回的才是会是真正的 Bitmap 图片 </p>
]]></content>
      
        <categories>
            
            <category> 2017-4 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[起泡算法和插入算法]]></title>
      <url>http://yoursite.com/2017/03/20/%E8%B5%B7%E6%B3%A1%E7%AE%97%E6%B3%95%E5%92%8C%E6%8F%92%E5%85%A5%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="起泡算法"><a href="#起泡算法" class="headerlink" title="起泡算法"></a>起泡算法</h2><ol>
<li><p>什么是顺序？什么是逆序？<br>在由一组整数组成的序列A[0, n - 1]中，满足A[i - 1] &lt; A[i]的相邻元素称作顺序的；否则是逆序的</p>
</li>
<li><p>算法思路<br>已知有一组无序元素集合，最终我们的目的是让他们成为有序集合（这个的有序是升幂次序）。我们对这个数组进行扫描，在扫描的过程中，依次比较 A[i - 1] 和 A[i] ,如果发现他们中有逆序对的存在就相互交换，并且认为这个序列是无序的，不断的执行扫描，直到没有发现任何逆序对，我们就认为这个序列是有序的。</p>
<blockquote>
<p>注：算法思路已经做了优化，在最坏的情况下，我们的算法复杂度依然保持着$n^2$的复杂度，但是我们对于最好的情况已经成为$O(n)$的复杂度。对于起泡算法有了解同学应该清楚，我就不多说了</p>
</blockquote>
</li>
<li><p>算法实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">sort(<span class="keyword">int</span>[] a)&#123;</div><div class="line">	<span class="keyword">boolean</span> sort = <span class="keyword">false</span>;<span class="comment">//默认是无序的</span></div><div class="line">	<span class="keyword">if</span>(！sort)&#123;<span class="comment">//如果是无序的就进行扫描</span></div><div class="line">	    sort = <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;a.seiz();i++)&#123;</div><div class="line">			<span class="keyword">if</span>(a[i-<span class="number">1</span>]&gt;a[i])&#123;</div><div class="line">				<span class="comment">//交换位置</span></div><div class="line">				<span class="keyword">int</span> temp = a[i-<span class="number">1</span>];</div><div class="line">				a[i-<span class="number">1</span>] = a[i];</div><div class="line">				a[i] = tmp;</div><div class="line">				sort = <span class="keyword">false</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>图示如下：<br><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdqt264nvsj30je07ltbz.jpg" alt=""></p>
</li>
<li><p>思考<br>我们的算法依然有改进的趋势，比如，在我们排序的过程当中，我们原先的机制是，只要判断这个序列是无序的，我们就从头开始遍历。如果我们在长度为 n 的序列当中，前n - k 都已是排好顺序的了，但是我们依然是从头开始。</p>
</li>
</ol>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><ol>
<li><p>算法思路<br>插入排序的工作方式像许多人排序一手扑克牌。开始的时候我们左手里，一张扑克牌也没有，右手的功能是每一次拿一张扑克牌，并且从左向右依次比较左手里面的扑克牌，找到排放位置插入该位置。我们总保证左手里面的扑克牌是有序的。依照这样的方式排序整个序列。</p>
</li>
<li><p>算法实现 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">insert_sort(<span class="keyword">int</span>[] a)&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; a.size(); i++)&#123;</div><div class="line">   			key = a[i];</div><div class="line">   			<span class="keyword">int</span> j = i;</div><div class="line">   			<span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; a[j-<span class="number">1</span>] &gt; key)</div><div class="line">   				a[j] = key;</div><div class="line">   				j = j - <span class="number">1</span>;</div><div class="line">   			&#125;</div><div class="line">   			a[j] = key; </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注释：算法导论的算法很棒，我简单做了一下修改就直接弄上去了</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 2017-3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[汇编语言基础之寄存器（二）]]></title>
      <url>http://yoursite.com/2017/03/17/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>我们这里承接上文「<a href="https://jinfangzhang.github.io/2017/03/13/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">汇编语言基础之寄存器（一）</a>」</p>
<p>上回说到了在8086CPU中有20根地址线，然而寄存器却只有16位，结果我们将用组合段地址和偏移量的方式，最终我们来拼接出一个20位的地址。这里需要关注的是「段地址」在8086CPU的段寄存器中存放的位置。8086CPU有 4 个寄存器：CS、DS、SS、 ES，当8086CPU访问内存时由这4个段寄存器提供内存单元的段地址，不过目前我们只说「CS」<br>「CS」和「IP」是8086CPU中两个最关键的寄存器，他们指示了CPU当前要读取指令的地址。「CS」为代码段寄存器，「IP」为指令指针寄存器。光从名字看，大致就清楚了，这个两个的作用，之前我们知道「物理地址 = 段地址 <em> 16 + 偏移地址」，这里段地址是CS寄存器里面的内容，IP寄存器里面的内容自然是偏移地址。<br>我们用图解的方式来更好地理解<br><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdq9bzkmezj30k9097n0p.jpg" alt=""><br>初始状态下，我们在内存的20000H~2000AH有如图指令，此刻我们CPU中CS存储的是2000，IP存储的是0000，所以指向的指令是20000H = 2000H </em> 16 + 0000.<br><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdq9i0721bj30k509177s.jpg" alt=""><br>   接下来我们将「CS」和「IP」这两个寄存器里面的值送往地址加法器，得出相应的结论。<br>   <img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdq9iic7m7j30lp096tc2.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdq9iyk6uhj30ku09gwhv.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdq9jg6usrj30kk08ujux.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdq9jq3t0tj30ke097adj.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdq9k716e7j30k80ap78d.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdq9kk3vflj30l30950w0.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdq9l3kjxdj30jp096gp1.jpg" alt=""></p>
<p>到目前为止一条指令的执行流程完毕，估计对于「CS」和「IP」的工作方式有一个更全面的了解，不过总的来说8086CPU的工作过程可以简要描述如下：<br>（1）从CS：IP指令的内存单元读取命令，读取的指令进入指令缓存器；<br>（2）IP = IP + 所读取指令的长度，从而指向下一条指令<br>（3）执行指令，转到步骤（1）。</p>
<p>我们已经给出了「CS」和「IP」的作用，那么我们有时候可能会想的去修改这两个寄存器里面的值，这个时候我们应该如何修改呢？</p>
<p>我想信大家第一反应就是mov指令，但是在8086CPU中mov叫做传送指令，能修改这两个寄存器的命令叫做「转移指令」，所对应得指令为jmp。<br>使用方法：</p>
<ul>
<li><p>同时修改「CS」和「IP」的内容<br>jmp 2000:3，执行后，CS = 2000，IP = 3</p>
</li>
<li><p>仅修改IP<br>mov ax，3<br>jmp ax<br>执行之后IP= 3</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 2017-3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 汇编语言基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[向量与列表（一）]]></title>
      <url>http://yoursite.com/2017/03/14/%E5%90%91%E9%87%8F%E4%B8%8E%E5%88%97%E8%A1%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>由一个爱写笔记的人写博客，总是喜欢在开头说点什么东西。<br>这段时间真是什么都赶到一块了，Android初见成效，马上又参加比赛，同时博客还要更新，每天还要重新回炉并且加工一些之前学过的知识，时间简直让我喘不过气来，不过人一辈子总有那么特别赶的几年，但这正是自己突飞猛进的几年，在这个时候，作为一个无时不刻都在怼问题的程序员来说，二话不说就是“干”！</p>
<p>再说一下上周写博客一个总体感受。身体上很累这个就不用说了，而且内容也很赶，是真的赶。刚开始写，总是想文章尽可能多的写，虽然都是自己学过的东西，但是很多时候，一篇文章为了速成基本是拿着书往上面抄，虽然也进行了选择，但终究这个目的太过于功利，对于自己的成长不好。这周我转变了思路，之前在“得到”里面订阅了万维钢老师的专刊，周一到周五一天一篇，每篇只讲一个道理。<br>我们不追求有多快，往往快就意味着质量低下，我不喜欢做这种没有一点意义，只是单纯一味记录而已。所以接下来，我会全程放慢速度，从每篇文章上的量转变为质，不求通过每篇文章学到什么可以让你一步成为及其牛逼的人，但是在每篇文章当中，我都会告诉你，这篇文章你看完之后会学到什么，并且力求解析清楚，同时知识点绝不会太多。<br>啰嗦到这里，我只能说光扯淡，我就消耗了这篇文章绝大部分体量~。</p>
<hr>
<p>之前在大一的时候陆陆续续学过一段时间数据结构，那个时候能力差的还很远，看的很吃力，直到这个学期才正式把它给拾了起来。之前第一篇是直接从栈开始的，之后我会逐个补全进行整理。</p>
<p>我入门是跟着邓老师（邓俊辉）的书籍和视频来学习，对于一个东西的入门，视频自然很棒的，但是入门之后就要坚决摒弃了。</p>
<p>今天我们来说向量，在数据结构中向量指的是什么？<br>向量 (vector ) 就是线性数组的一种抽象与泛化， 他也是有具有线性次序的一组元素构成的集合 V {V0, Vl , … Vn} 其中的元辈分别由秩区分和确定。这里所说的秩（Rank ) 也是与各元素一 一对应的非负整数，在这个线性的序列中， 各递归实例的秩反映了它们各自被创建的时间先后， 具体地， 每一 递归实例的秩等于早于它出现的实例总数。（其实也是顺序的一种高级的叫法）</p>
<p>通过一个概念或许已经大概了解到了什么是向量，其实向量和列表都是很基本的结构，但是正是由于很基础我们才要更好的理解并且记忆，在之后会学习栈，对于栈来说，我们既可以使用向量也可以使用列表来实现，这个例子就很好的说明了，向量和列表的基础性。既然栈可以使用向量来实现，也就是说，会使用到向量的一些方法，来帮助达成目标。如果我们的方法，执行效率很低的话，就算栈的结构再怎么厉害，终究还是快不起来，上层建筑要牢靠，底层基础要打好。</p>
<p>所以下一步我们会讲，如何来实现向量里面的方法。以下是我们将要实现的方法。<br><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdmuh8nkm8j30q30dndoe" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 2017-3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[汇编语言基础之寄存器（一）]]></title>
      <url>http://yoursite.com/2017/03/13/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AF%84%E5%AD%98%E5%99%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>对于一个汇编语言程序员来说，CPU中的主要部件是寄存器。寄存器是CPU中程序员可以用指令进行读写的部件。程序员通过改变寄存器中的内容来相应的实现对于CPU的控制。</p>
<p>不同CPU拥有的寄存器数量和CPU内部结构都不相同。拿8086CPU举例，有14个存储器，每一个存储器都有每一个存储器的名字。这些寄存器分别是 AX,BX,CX,DX,SI,DI,SP,BP,IP,CS,SS,DS,ES,PSW 。这些寄存器不会一次性说完，在后面的介绍当中，当用到的时候再说。</p>
<h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p>在8086CPU的所有寄存器都是16位的，也就是说可以存放两个字节，AX,BX,CX,DX这四个存储器通常用来存储一般性的数据，被叫做<strong>通用存储器</strong>。<br>8086CPU上一代存储都是8位的，为了保证程序的兼容性，使基于上一代CPU所编写出来的程序，只要做简单修改就可以运行在8086上面。8086CPU的AX,BX,CX,DX都看做两个可独立使用的8位寄存器</p>
<ul>
<li>AX可分为AH和AL</li>
<li>BX可分为BH和BL</li>
<li>CX可分为CH和CL</li>
<li>DX可分为DH和DL</li>
</ul>
<p>继续拿AX来说，AX的低八位（0~7）构成了AL寄存器，高八位（8~15）构成了AH寄存器，其他也类似。</p>
<h2 id="简单几条汇编指令"><a href="#简单几条汇编指令" class="headerlink" title="简单几条汇编指令"></a>简单几条汇编指令</h2><table>
<thead>
<tr>
<th>汇编指令</th>
<th style="text-align:right">控制CPU完成的操作</th>
<th style="text-align:center">用高级语言的语法描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>mov ax,18</td>
<td style="text-align:right">将18送入寄存器AX</td>
<td style="text-align:center">AX = 18</td>
</tr>
<tr>
<td>mov ah,78</td>
<td style="text-align:right">将78送入寄存器AH</td>
<td style="text-align:center">AH = 78</td>
</tr>
<tr>
<td>mov ax,bx</td>
<td style="text-align:right">将寄存器BX里面的数值移动到AX中</td>
<td style="text-align:center">AX = BX</td>
</tr>
<tr>
<td>add ax,bx</td>
<td style="text-align:right">将寄存器AX和BX中的数值相加，结果存入AX中</td>
<td style="text-align:center">AX = AX + BX</td>
</tr>
<tr>
<td>add ax,8</td>
<td style="text-align:right">将寄存器AX中的数值和8相加，结果存入AX中</td>
<td style="text-align:center">AX = AX + 8</td>
</tr>
</tbody>
</table>
<p>为了初步好理解这些命令，我们将数字采取十进制形式的，不过，在计算机中是0和1这样的数据，为了让用户看起来方便，最终显示的是XXXH,末尾的H代表16进制的意思。10H代表的就是十进制的16。</p>
<p>在数据传送指令和运算时，要注意指令的两个指令的两个操作对象的位数应当一致的。例如：<br>mov ax,bx<br>mov bx,cx<br>mov al,18H<br>add ax,bx<br>add ax,20000<br>等以上指令都是正确的，但是以下指令都是错误的<br>mov ax,bl   （在8位寄存器和16位寄存器之间传送数据）<br>mov bh,ax（在16位寄存器和8位寄存器之间传送数据）<br>mov al,20000（8位寄存器最大可以存放255的数据）<br>add al,100H（将一个高于8位的数据加到8位寄存器上面）</p>
<p>我们知道CPU访问内存时，要给出内存单元的地址。所有的内存单元构成的存储空间是一个一维空间，并且每一个内存单元都有唯一的地址。我们将这个地址称为物理地址。<br>CPU通过地址总线，把一个内存单元的物理地址送入。在CPU向地址总线上发出物理地址之前，必须要在内部先形成这个物理地址。不同的CPU可以有不同的形成地址的方式。我们现在讨论8086CPU是如何在内存形成物理地址的</p>
<p>我们的8086CPU是一个16位结构的CPU，那什么是16位结构的CPU？<br>概括的来说具有下面几方面结构<br>·运算器一次性最多处理16位的数据<br>·存储器的最大宽度是16位<br>·存储和寄存器之间的通路为16位</p>
<p>但是8086CPU有二十根地址总线，可以传输20位地址，我们的寻址能力是1MB，而8086CPU又是16位结构，如果从CPU的结构简单的输出，我们只有64K的寻址能力，所以在8086CPU中采用一种，用16位地址合成一个20位的地址。<br>逻辑如图所示<br><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdlj124c9hj30ka0cb0v3" alt=""><br>1）CPU中相关部件提供两个16位的地址，一个段地址和一个偏移地址；<br>2）段地址和偏移地址通过内部总线，送入一个称为地址加法器中<br>3）地址加法器将两个16位的地址合成一个20位的地址<br>4）地址加法器通过内部总线将20位物理地址送入输入输出控制电路<br>5）输入输出控制电路将20位总线送上地址总线<br>6）20位物理地址被地址总线传送到存储器中。</p>
<p>该地址加法器采用<strong>物理地址等 = 段地址 * 16 + 偏移地址</strong></p>
<p>本质含义是“基础地址+偏移地址=物理地址”，这个不仅让我们更好管理内存，还在使用和理解上更近了一步。</p>
<p>那么问题就来了我们段地址和偏移地址存储哪里呢？这个我们下回说~</p>
]]></content>
      
        <categories>
            
            <category> 2017-3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 汇编语言基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[郭大神带我看ListView源码]]></title>
      <url>http://yoursite.com/2017/03/12/%E9%83%AD%E5%A4%A7%E7%A5%9E%E5%B8%A6%E6%88%91%E7%9C%8BListView%E6%BA%90%E7%A0%81/</url>
      <content type="html"><![CDATA[<p><em>以下是我的一些阅读源码的完整过程，如果是纯粹追求内容的读者，可能这篇文章不适合你</em></p>
<p>系列开始前依然由我我来扯一扯，为什么会出现这个玩意？开始博客第一周了。这篇是我的第七篇博客，一周没断更。毕竟之前就有写随笔的习惯，所以写博客没有太消耗自己的时间，而且正好我计划当中的一些事情，已经完成。原先的那个时间段，就很自然的让给了博客。</p>
<p>看源码是对于一个开发者很有提升的东西，但是相应的也是拥有一些门槛的。没有人带着看或者独自一人看的话很容易深陷代码细节不能自拔。当然对于一个学习Android刚满一年的人来说，就算是纯粹的代码依然有很多东西可以学习，不过我们看源码的主要目的不是这个，而了解主体思路，如果有时间看看细节也无妨。</p>
<p>这个系列本打算一周一大篇的，希望自己可以做到，好好加油吧~~。这一整天在看的过程当中，就算是已经跟着郭神的博客走了一遍，自己深入依然难度重重，我在这里会尽量用我可以描述的语言记录下来。</p>
<hr>
<p>看源码的时候思维一定要活跃，积极思考，看别人的代码是一个脑力活。你要不停地猜各种各样的事情，而且攻略之前，如果是Android本身的，不妨看一下API的继承图和简单的介绍，总之尽可能多的获取相关的信息。事不宜迟我们是时候开车了~。</p>
<blockquote>
<p>在看这些文档的时候，一定要看他的注释，一般有注释的地方都是比较重要的地方，并且这些注释可以帮助你去更好的理解。</p>
</blockquote>
<p>简单看一下继承图，ListView和GridView他的直接父类是AbsListView，换句话说，AbsListView的直接子类是ListView和GridView。ListView和GridView他们是十分类似的，按照面向对象语言的尿性，肯定会抽取出这两个的共同的一些特点。具体可能是什么，每个人都有每个人的思考我就不说了。只是我们看源码的时候要关注一下AbsListView,这里面必然有很重要的机制。<br><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdk8d8z87ij30k307wgm6" alt=""></p>
<p>这里看一下AbsListView的注释对于这个对象的描述</p>
<blockquote>
<p>Base class that can be used to implement virtualized lists of<br>items. A list does not have a spatial definition here. For<br>instance, subclases of this class can display the content of the<br>list in a grid, in a carousel, as stack, etc.</p>
</blockquote>
<p>这里描述，这是一个基础的类，这个类可以被使用去实现一些虚拟的列表，它后面举了一些例子。<br>到目前为止，如果不切入主题，我自己能获得帮助理解的信息都已经获取完毕，是时候开始了。</p>
<p>今天的要看的是ListView的源码。看源码切勿从头开始看，因为代码简直太多了，以我的能力（学生，刻苦自学小一年）马上就会陷入代码细节当中，可能不光我这样。我们应该选择一个我们平时比较熟悉的，之后我们马上就可以想起下面这两行。</p>
<pre><code>ListView list = (ListView) findViewById(R.id.listView);
list.setAdapter(MyAdapter);
</code></pre><p>一个行是获取ListVie的实例对象，显然没有用处。那么第二行setAdapter(),这个是一个ListView的一个方法，看来我们找到入手点了。</p>
<h2 id="setAdapter-ListAdapter-adapter"><a href="#setAdapter-ListAdapter-adapter" class="headerlink" title="setAdapter(ListAdapter adapter)"></a>setAdapter(ListAdapter adapter)</h2><p>我们依然优先看注释<br><strong>Sets the data behind this ListView. The adapter passed to this method may be wrapped by a {@link WrapperListAdapter}, depending on the ListView features currently in use. For instance, adding headers and/or footers will cause the adapter to be wrapped.</strong></p>
<p>他说设置的这些信息会用于ListView，这个adapter通过这个方法可能被WrapperListAdapter包裹，被包装成什么样子，这个取决于当前ListView的一些特点，就比如说，在这些信息的头部和尾部添加一些内容。（就好像被包裹住了一样）</p>
<p>知道这些信息感觉对于了解ListView并没有什么帮助，接下来我们进入到setAdapter的源码，在其中你可能会发现一些你认为有用的方法，就比如<em>resetList()</em> , <em>requestLayout()</em>,但是你进入到具体内容发现,对于深入理解ListView并没有什么帮助，到这里我们目前可以想到的切入点已经断了。</p>
<p>我们应该开始思考了，我还可以朝着哪里进入呢？</p>
<p>ListView怎么说也是一个View，对于一个View来说,onMeasure,onLayout,onDraw,三个方法首当其冲，onMeasure是用于测量的数据的，重要的内容基本不会在这里，onDraw就是用来绘制的，真正的核心不会在这里。onLayout是真正放置布局的地方，所以核心极有可能在这里。</p>
<blockquote>
<p>写到这里我去上了个厕所，看了一篇万维钢老师的文章，题目是《失败不是成功之母，成功是成功之母》，真正对于失败有价值的有三点要素：<br>1、及时。一旦不对马上就有人给你指出来。<br>2、对事不对人。你错了，下次改正过来就是，没有必要上升到“你这个人行不行”的层面<br>3、错误的代价很小。<br>对于咱们刚才的失误，大可放心吸收经验就是，刚才的失败正是所谓的有效的失败、成功的失败。<br>抱歉大家我有稍微扯了一扯</p>
</blockquote>
<p>稍微打断了一下思路，但是在前进之前，我们吸取教训我们大致通读一下注释，当然信息量比较多，但是在这里花时间是值得的。对于大体有一个了解之后，我们再继续。我们在做事情之前，先宏观把控然后再具体分析，就会简单多了，或许你认为这会很浪费时间，但是目前来说是必由之路。</p>
<p>我们大体阅读之后，发现AbsListView中有个很重要的内部类<strong>RecycleBin</strong><br>我们依然看注释！</p>
<p><strong>The RecycleBin facilitates reuse of views across layouts. The RecycleBin has two levels of storage: ActiveViews and ScrapViews. ActiveViews are those views which were onscreen at the start of a layout. By construction, they are displaying current information. At the end of layout, all views in ActiveViews are demoted to ScrapViews. ScrapViews are old views that could potentially be used by the adapter to avoid allocating views unnecessarily.</strong></p>
<p>我简单说一下这个的意思，RecycleBin会帮助我们重新利用View，这个RecycleBin有两个等级存储： ActiveViews and ScrapViews。ActiviteViews 是指正在屏幕上的Views。通过构造函数，他们展现当前的信息， At the end of layout（我翻译不出来味道，就拿原文了），所有在ActiveViews中的view都会被降级进入ScrapViews。ScrapViews是一些老的View，并且未来可能被使用的，在这里保存，可以避免必要的分配View。看完了，这个内部类真的很关键！！！<br>这个内部类里面有几个重要的方法，我这个直接说明了，这个对于后面的理解都很有帮助（这里我直接粘贴了郭神一段）</p>
<ul>
<li><p><strong>fillActiveViews()</strong> 这个方法接收两个参数，第一个参数表示要存储的view的数量，第二个参数表示ListView中第一个可见元素的position值。RecycleBin当中使用mActiveViews这个数组来存储View，调用这个方法后就会根据传入的参数来将ListView中的指定元素存储到mActiveViews数组当中。</p>
</li>
<li><p><strong>getActiveView()</strong> 这个方法和fillActiveViews()是对应的，用于从mActiveViews数组当中获取数据。该方法接收一个position参数，表示元素在ListView当中的位置，方法内部会自动将position值转换成mActiveViews数组对应的下标值。需要注意的是，mActiveViews当中所存储的View，一旦被获取了之后就会从mActiveViews当中移除，下次获取同样位置的View将会返回null，也就是说mActiveViews不能被重复利用。</p>
</li>
<li><p><strong>addScrapView()</strong> 用于将一个废弃的View进行缓存，该方法接收一个View参数，当有某个View确定要废弃掉的时候(比如滚动出了屏幕)，就应该调用这个方法来对View进行缓存，RecycleBin当中使用mScrapViews和mCurrentScrap这两个List来存储废弃View。</p>
</li>
<li><p><strong>getScrapView</strong> 用于从废弃缓存中取出一个View，这些废弃缓存中的View是没有顺序可言的，因此getScrapView()方法中的算法也非常简单，就是直接从mCurrentScrap当中获取尾部的一个scrap view进行返回。</p>
</li>
<li><p><strong>setViewTypeCount()</strong> 我们都知道Adapter当中可以重写一个getViewTypeCount()来表示ListView中有几种类型的数据项，而setViewTypeCount()方法的作用就是为每种类型的数据项都单独启用一个RecycleBin缓存机制。实际上，getViewTypeCount()方法通常情况下使用的并不是很多，所以我们只要知道RecycleBin当中有这样一个功能就行了。</p>
</li>
</ul>
<p>我们继续往下，开始看onLayout(),当你搜索到的时候，你会发现在ListView里面没有，那么肯定就在他的父类里面了，果然在AbsListView中，这个注释还写着，子类不应该复写这个方法，而应该替换layoutChildren(),到这里我们应该知道了，主要的核心逻辑大概都在layoutChildren()这个方法中体现。但是我们依然看一下onLayout方法</p>
<h2 id="第一次layout"><a href="#第一次layout" class="headerlink" title="第一次layout"></a>第一次layout</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onLayout(changed, l, t, r, b);</div><div class="line"></div><div class="line">        mInLayout = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();</div><div class="line">        <span class="keyword">if</span> (changed) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">                getChildAt(i).forceLayout();</div><div class="line">            &#125;</div><div class="line">            mRecycler.markChildrenDirty();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        layoutChildren();</div><div class="line">        mInLayout = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        mOverscrollMax = (b - t) / OVERSCROLL_LIMIT_DIVISOR;</div><div class="line"></div><div class="line">        <span class="comment">// <span class="doctag">TODO:</span> Move somewhere sane. This doesn't belong in onLayout().</span></div><div class="line">        <span class="keyword">if</span> (mFastScroll != <span class="keyword">null</span>) &#123;</div><div class="line">            mFastScroll.onItemCountChanged(getChildCount(), mItemCount);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>onLayout()方法中并没有做什么复杂的逻辑操作，主要就是一个判断，如果ListView的大小或者位置发生了变化，那么changed变量就会变成true，此时会要求所有的子布局都强制进行重绘。除此之外倒没有什么难理解的地方了，不过我们注意到，在第14行调用了layoutChildren()这个方法,我们进入这个layoutChildren()方法中，发现他是一个空方法，不过也正常，刚才上面也提到了，这个方法应该被子类所替换，所以我们去ListView中找这个方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">layoutChildren</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> blockLayoutRequests = mBlockLayoutRequests;</div><div class="line">        <span class="keyword">if</span> (blockLayoutRequests) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mBlockLayoutRequests = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">super</span>.layoutChildren();</div><div class="line"></div><div class="line">            invalidate();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mAdapter == <span class="keyword">null</span>) &#123;</div><div class="line">                resetList();</div><div class="line">                invokeOnItemScrollListener();</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childrenTop = mListPadding.top;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childrenBottom = mBottom - mTop - mListPadding.bottom;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();</div><div class="line"></div><div class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> delta = <span class="number">0</span>;</div><div class="line"></div><div class="line">            View sel;</div><div class="line">            View oldSel = <span class="keyword">null</span>;</div><div class="line">            View oldFirst = <span class="keyword">null</span>;</div><div class="line">            View newSel = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Remember stuff we will need down below</span></div><div class="line">            <span class="keyword">switch</span> (mLayoutMode) &#123;</div><div class="line">            <span class="keyword">case</span> LAYOUT_SET_SELECTION:</div><div class="line">                index = mNextSelectedPosition - mFirstPosition;</div><div class="line">                <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; childCount) &#123;</div><div class="line">                    newSel = getChildAt(index);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> LAYOUT_FORCE_TOP:</div><div class="line">            <span class="keyword">case</span> LAYOUT_FORCE_BOTTOM:</div><div class="line">            <span class="keyword">case</span> LAYOUT_SPECIFIC:</div><div class="line">            <span class="keyword">case</span> LAYOUT_SYNC:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> LAYOUT_MOVE_SELECTION:</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="comment">// Remember the previously selected view</span></div><div class="line">                index = mSelectedPosition - mFirstPosition;</div><div class="line">                <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; childCount) &#123;</div><div class="line">                    oldSel = getChildAt(index);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Remember the previous first child</span></div><div class="line">                oldFirst = getChildAt(<span class="number">0</span>);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (mNextSelectedPosition &gt;= <span class="number">0</span>) &#123;</div><div class="line">                    delta = mNextSelectedPosition - mSelectedPosition;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Caution: newSel might be null</span></div><div class="line">                newSel = getChildAt(index + delta);</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="keyword">boolean</span> dataChanged = mDataChanged;</div><div class="line">            <span class="keyword">if</span> (dataChanged) &#123;</div><div class="line">                handleDataChanged();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Handle the empty set by removing all views that are visible</span></div><div class="line">            <span class="comment">// and calling it a day</span></div><div class="line">            <span class="keyword">if</span> (mItemCount == <span class="number">0</span>) &#123;</div><div class="line">                resetList();</div><div class="line">                invokeOnItemScrollListener();</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mItemCount != mAdapter.getCount()) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The content of the adapter has changed but "</span></div><div class="line">                        + <span class="string">"ListView did not receive a notification. Make sure the content of "</span></div><div class="line">                        + <span class="string">"your adapter is not modified from a background thread, but only from "</span></div><div class="line">                        + <span class="string">"the UI thread. Make sure your adapter calls notifyDataSetChanged() "</span></div><div class="line">                        + <span class="string">"when its content changes. [in ListView("</span> + getId() + <span class="string">", "</span> + getClass()</div><div class="line">                        + <span class="string">") with Adapter("</span> + mAdapter.getClass() + <span class="string">")]"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            setSelectedPositionInt(mNextSelectedPosition);</div><div class="line"></div><div class="line">            AccessibilityNodeInfo accessibilityFocusLayoutRestoreNode = <span class="keyword">null</span>;</div><div class="line">            View accessibilityFocusLayoutRestoreView = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">int</span> accessibilityFocusPosition = INVALID_POSITION;</div><div class="line"></div><div class="line">            <span class="comment">// Remember which child, if any, had accessibility focus. This must</span></div><div class="line">            <span class="comment">// occur before recycling any views, since that will clear</span></div><div class="line">            <span class="comment">// accessibility focus.</span></div><div class="line">            <span class="keyword">final</span> ViewRootImpl viewRootImpl = getViewRootImpl();</div><div class="line">            <span class="keyword">if</span> (viewRootImpl != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">final</span> View focusHost = viewRootImpl.getAccessibilityFocusedHost();</div><div class="line">                <span class="keyword">if</span> (focusHost != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">final</span> View focusChild = getAccessibilityFocusedChild(focusHost);</div><div class="line">                    <span class="keyword">if</span> (focusChild != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (!dataChanged || isDirectChildHeaderOrFooter(focusChild)</div><div class="line">                                || focusChild.hasTransientState() || mAdapterHasStableIds) &#123;</div><div class="line">                            <span class="comment">// The views won't be changing, so try to maintain</span></div><div class="line">                            <span class="comment">// focus on the current host and virtual view.</span></div><div class="line">                            accessibilityFocusLayoutRestoreView = focusHost;</div><div class="line">                            accessibilityFocusLayoutRestoreNode = viewRootImpl</div><div class="line">                                    .getAccessibilityFocusedVirtualView();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="comment">// If all else fails, maintain focus at the same</span></div><div class="line">                        <span class="comment">// position.</span></div><div class="line">                        accessibilityFocusPosition = getPositionForView(focusChild);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            View focusLayoutRestoreDirectChild = <span class="keyword">null</span>;</div><div class="line">            View focusLayoutRestoreView = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Take focus back to us temporarily to avoid the eventual call to</span></div><div class="line">            <span class="comment">// clear focus when removing the focused child below from messing</span></div><div class="line">            <span class="comment">// things up when ViewAncestor assigns focus back to someone else.</span></div><div class="line">            <span class="keyword">final</span> View focusedChild = getFocusedChild();</div><div class="line">            <span class="keyword">if</span> (focusedChild != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// <span class="doctag">TODO:</span> in some cases focusedChild.getParent() == null</span></div><div class="line"></div><div class="line">                <span class="comment">// We can remember the focused view to restore after re-layout</span></div><div class="line">                <span class="comment">// if the data hasn't changed, or if the focused position is a</span></div><div class="line">                <span class="comment">// header or footer.</span></div><div class="line">                <span class="keyword">if</span> (!dataChanged || isDirectChildHeaderOrFooter(focusedChild)</div><div class="line">                        || focusedChild.hasTransientState() || mAdapterHasStableIds) &#123;</div><div class="line">                    focusLayoutRestoreDirectChild = focusedChild;</div><div class="line">                    <span class="comment">// Remember the specific view that had focus.</span></div><div class="line">                    focusLayoutRestoreView = findFocus();</div><div class="line">                    <span class="keyword">if</span> (focusLayoutRestoreView != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="comment">// Tell it we are going to mess with it.</span></div><div class="line">                        focusLayoutRestoreView.dispatchStartTemporaryDetach();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                requestFocus();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Pull all children into the RecycleBin.</span></div><div class="line">            <span class="comment">// These views will be reused if possible</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> firstPosition = mFirstPosition;</div><div class="line">            <span class="keyword">final</span> RecycleBin recycleBin = mRecycler;</div><div class="line">            <span class="keyword">if</span> (dataChanged) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">                    recycleBin.addScrapView(getChildAt(i), firstPosition+i);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                recycleBin.fillActiveViews(childCount, firstPosition);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Clear out old views</span></div><div class="line">            detachAllViewsFromParent();</div><div class="line">            recycleBin.removeSkippedScrap();</div><div class="line"></div><div class="line">            <span class="keyword">switch</span> (mLayoutMode) &#123;</div><div class="line">            <span class="keyword">case</span> LAYOUT_SET_SELECTION:</div><div class="line">                <span class="keyword">if</span> (newSel != <span class="keyword">null</span>) &#123;</div><div class="line">                    sel = fillFromSelection(newSel.getTop(), childrenTop, childrenBottom);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    sel = fillFromMiddle(childrenTop, childrenBottom);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> LAYOUT_SYNC:</div><div class="line">                sel = fillSpecific(mSyncPosition, mSpecificTop);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> LAYOUT_FORCE_BOTTOM:</div><div class="line">                sel = fillUp(mItemCount - <span class="number">1</span>, childrenBottom);</div><div class="line">                adjustViewsUpOrDown();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> LAYOUT_FORCE_TOP:</div><div class="line">                mFirstPosition = <span class="number">0</span>;</div><div class="line">                sel = fillFromTop(childrenTop);</div><div class="line">                adjustViewsUpOrDown();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> LAYOUT_SPECIFIC:</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> selectedPosition = reconcileSelectedPosition();</div><div class="line">                sel = fillSpecific(selectedPosition, mSpecificTop);</div><div class="line">                <span class="comment">/**</span></div><div class="line">                 * When ListView is resized, FocusSelector requests an async selection for the</div><div class="line">                 * previously focused item to make sure it is still visible. If the item is not</div><div class="line">                 * selectable, it won't regain focus so instead we call FocusSelector</div><div class="line">                 * to directly request focus on the view after it is visible.</div><div class="line">                 */</div><div class="line">                <span class="keyword">if</span> (sel == <span class="keyword">null</span> &amp;&amp; mFocusSelector != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">final</span> Runnable focusRunnable = mFocusSelector</div><div class="line">                            .setupFocusIfValid(selectedPosition);</div><div class="line">                    <span class="keyword">if</span> (focusRunnable != <span class="keyword">null</span>) &#123;</div><div class="line">                        post(focusRunnable);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> LAYOUT_MOVE_SELECTION:</div><div class="line">                sel = moveSelection(oldSel, newSel, delta, childrenTop, childrenBottom);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">if</span> (childCount == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (!mStackFromBottom) &#123;</div><div class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> position = lookForSelectablePosition(<span class="number">0</span>, <span class="keyword">true</span>);</div><div class="line">                        setSelectedPositionInt(position);</div><div class="line">                        sel = fillFromTop(childrenTop);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> position = lookForSelectablePosition(mItemCount - <span class="number">1</span>, <span class="keyword">false</span>);</div><div class="line">                        setSelectedPositionInt(position);</div><div class="line">                        sel = fillUp(mItemCount - <span class="number">1</span>, childrenBottom);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (mSelectedPosition &gt;= <span class="number">0</span> &amp;&amp; mSelectedPosition &lt; mItemCount) &#123;</div><div class="line">                        sel = fillSpecific(mSelectedPosition,</div><div class="line">                                oldSel == <span class="keyword">null</span> ? childrenTop : oldSel.getTop());</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mFirstPosition &lt; mItemCount) &#123;</div><div class="line">                        sel = fillSpecific(mFirstPosition,</div><div class="line">                                oldFirst == <span class="keyword">null</span> ? childrenTop : oldFirst.getTop());</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        sel = fillSpecific(<span class="number">0</span>, childrenTop);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Flush any cached views that did not get reused above</span></div><div class="line">            recycleBin.scrapActiveViews();</div><div class="line"></div><div class="line">            <span class="comment">// remove any header/footer that has been temp detached and not re-attached</span></div><div class="line">            removeUnusedFixedViews(mHeaderViewInfos);</div><div class="line">            removeUnusedFixedViews(mFooterViewInfos);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (sel != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// The current selected item should get focus if items are</span></div><div class="line">                <span class="comment">// focusable.</span></div><div class="line">                <span class="keyword">if</span> (mItemsCanFocus &amp;&amp; hasFocus() &amp;&amp; !sel.hasFocus()) &#123;</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">boolean</span> focusWasTaken = (sel == focusLayoutRestoreDirectChild &amp;&amp;</div><div class="line">                            focusLayoutRestoreView != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                            focusLayoutRestoreView.requestFocus()) || sel.requestFocus();</div><div class="line">                    <span class="keyword">if</span> (!focusWasTaken) &#123;</div><div class="line">                        <span class="comment">// Selected item didn't take focus, but we still want to</span></div><div class="line">                        <span class="comment">// make sure something else outside of the selected view</span></div><div class="line">                        <span class="comment">// has focus.</span></div><div class="line">                        <span class="keyword">final</span> View focused = getFocusedChild();</div><div class="line">                        <span class="keyword">if</span> (focused != <span class="keyword">null</span>) &#123;</div><div class="line">                            focused.clearFocus();</div><div class="line">                        &#125;</div><div class="line">                        positionSelector(INVALID_POSITION, sel);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        sel.setSelected(<span class="keyword">false</span>);</div><div class="line">                        mSelectorRect.setEmpty();</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    positionSelector(INVALID_POSITION, sel);</div><div class="line">                &#125;</div><div class="line">                mSelectedTop = sel.getTop();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> inTouchMode = mTouchMode == TOUCH_MODE_TAP</div><div class="line">                        || mTouchMode == TOUCH_MODE_DONE_WAITING;</div><div class="line">                <span class="keyword">if</span> (inTouchMode) &#123;</div><div class="line">                    <span class="comment">// If the user's finger is down, select the motion position.</span></div><div class="line">                    <span class="keyword">final</span> View child = getChildAt(mMotionPosition - mFirstPosition);</div><div class="line">                    <span class="keyword">if</span> (child != <span class="keyword">null</span>) &#123;</div><div class="line">                        positionSelector(mMotionPosition, child);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mSelectorPosition != INVALID_POSITION) &#123;</div><div class="line">                    <span class="comment">// If we had previously positioned the selector somewhere,</span></div><div class="line">                    <span class="comment">// put it back there. It might not match up with the data,</span></div><div class="line">                    <span class="comment">// but it's transitioning out so it's not a big deal.</span></div><div class="line">                    <span class="keyword">final</span> View child = getChildAt(mSelectorPosition - mFirstPosition);</div><div class="line">                    <span class="keyword">if</span> (child != <span class="keyword">null</span>) &#123;</div><div class="line">                        positionSelector(mSelectorPosition, child);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// Otherwise, clear selection.</span></div><div class="line">                    mSelectedTop = <span class="number">0</span>;</div><div class="line">                    mSelectorRect.setEmpty();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Even if there is not selected position, we may need to</span></div><div class="line">                <span class="comment">// restore focus (i.e. something focusable in touch mode).</span></div><div class="line">                <span class="keyword">if</span> (hasFocus() &amp;&amp; focusLayoutRestoreView != <span class="keyword">null</span>) &#123;</div><div class="line">                    focusLayoutRestoreView.requestFocus();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Attempt to restore accessibility focus, if necessary.</span></div><div class="line">            <span class="keyword">if</span> (viewRootImpl != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">final</span> View newAccessibilityFocusedView = viewRootImpl.getAccessibilityFocusedHost();</div><div class="line">                <span class="keyword">if</span> (newAccessibilityFocusedView == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (accessibilityFocusLayoutRestoreView != <span class="keyword">null</span></div><div class="line">                            &amp;&amp; accessibilityFocusLayoutRestoreView.isAttachedToWindow()) &#123;</div><div class="line">                        <span class="keyword">final</span> AccessibilityNodeProvider provider =</div><div class="line">                                accessibilityFocusLayoutRestoreView.getAccessibilityNodeProvider();</div><div class="line">                        <span class="keyword">if</span> (accessibilityFocusLayoutRestoreNode != <span class="keyword">null</span> &amp;&amp; provider != <span class="keyword">null</span>) &#123;</div><div class="line">                            <span class="keyword">final</span> <span class="keyword">int</span> virtualViewId = AccessibilityNodeInfo.getVirtualDescendantId(</div><div class="line">                                    accessibilityFocusLayoutRestoreNode.getSourceNodeId());</div><div class="line">                            provider.performAction(virtualViewId,</div><div class="line">                                    AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS, <span class="keyword">null</span>);</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            accessibilityFocusLayoutRestoreView.requestAccessibilityFocus();</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (accessibilityFocusPosition != INVALID_POSITION) &#123;</div><div class="line">                        <span class="comment">// Bound the position within the visible children.</span></div><div class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> position = MathUtils.constrain(</div><div class="line">                                accessibilityFocusPosition - mFirstPosition, <span class="number">0</span>,</div><div class="line">                                getChildCount() - <span class="number">1</span>);</div><div class="line">                        <span class="keyword">final</span> View restoreView = getChildAt(position);</div><div class="line">                        <span class="keyword">if</span> (restoreView != <span class="keyword">null</span>) &#123;</div><div class="line">                            restoreView.requestAccessibilityFocus();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Tell focus view we are done mucking with it, if it is still in</span></div><div class="line">            <span class="comment">// our view hierarchy.</span></div><div class="line">            <span class="keyword">if</span> (focusLayoutRestoreView != <span class="keyword">null</span></div><div class="line">                    &amp;&amp; focusLayoutRestoreView.getWindowToken() != <span class="keyword">null</span>) &#123;</div><div class="line">                focusLayoutRestoreView.dispatchFinishTemporaryDetach();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            mLayoutMode = LAYOUT_NORMAL;</div><div class="line">            mDataChanged = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">if</span> (mPositionScrollAfterLayout != <span class="keyword">null</span>) &#123;</div><div class="line">                post(mPositionScrollAfterLayout);</div><div class="line">                mPositionScrollAfterLayout = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            mNeedSync = <span class="keyword">false</span>;</div><div class="line">            setNextSelectedPositionInt(mSelectedPosition);</div><div class="line"></div><div class="line">            updateScrollIndicators();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mItemCount &gt; <span class="number">0</span>) &#123;</div><div class="line">                checkSelectionChanged();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            invokeOnItemScrollListener();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (mFocusSelector != <span class="keyword">null</span>) &#123;</div><div class="line">                mFocusSelector.onLayoutComplete();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!blockLayoutRequests) &#123;</div><div class="line">                mBlockLayoutRequests = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这段代码真的很长，挑重点来说，在第12行有getChildCount()，这方法是获取当前View中有几个子View的，很显然现在为止，没有对咱们这个View进行任何添加操作，所以这里就是0了。这样我们发现一条线索，但是大家不要忘记之前我们说过的那个很重要的内部类RecycleBin,所以接下来我们在第144行发现RecycleBin，紧接着会根据dataChanged这个布尔型的值来判断执行逻辑，dataChanged只有在数据源发生改变的情况下才会变成true，其它情况都是false，因此这里会进入到第151行的执行逻辑，调用RecycleBin的fillActiveViews()方法，这个方法用来缓存当前在屏幕上显示着的View的，就目前来说，什么都没有，所有它也缓冲不成了。我们继续顺着ChildCount = 0 这条线索，在199行发现了，一个判断，我们进去里面紧接着有个判断加载布局顺序的方向，这里面有个属性是StackFromBottom，当false的时候是布局顺序是从上往下加载的。自然的我们进入<strong>fillFromTop()</strong>方法。</p>
<p>注释：<strong>Fills the list from top to bottom, starting with mFirstPosition</strong><br>从上至下，开始填充列表，并且开始的位置在<em>mFirstPosition</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> View <span class="title">fillFromTop</span><span class="params">(<span class="keyword">int</span> nextTop)</span> </span>&#123;</div><div class="line">        mFirstPosition = Math.min(mFirstPosition, mSelectedPosition);</div><div class="line">        mFirstPosition = Math.min(mFirstPosition, mItemCount - <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (mFirstPosition &lt; <span class="number">0</span>) &#123;</div><div class="line">            mFirstPosition = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> fillDown(mFirstPosition, nextTop);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>对于传进来的数值，进行了合理性的判断，然后继续调用<strong>fillDown(mFirstPosition, nextTop)</strong>，通过这个函数的参数，它指定了加载第一个元素的位置，和下一个元素的位置，这里面我们把第二个参数可以看成标注加载方向的一个变量，分析在这里，这个方法的功能已经大致分析出来了，依然看注释</p>
<p><strong>Fills the list from pos down to the end of the list view.</strong></p>
<p>这个证明了刚才的分析是正确的，我们来看它的源码（在这里我们不可避免的要看，因为这个是我们前进的一条主线）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> View <span class="title">fillDown</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> nextTop)</span> </span>&#123;</div><div class="line">        View selectedView = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> end = (mBottom - mTop);</div><div class="line">        <span class="keyword">if</span> ((mGroupFlags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) &#123;</div><div class="line">            end -= mListPadding.bottom;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (nextTop &lt; end &amp;&amp; pos &lt; mItemCount) &#123;</div><div class="line">            <span class="comment">// is this the selected item?</span></div><div class="line">            <span class="keyword">boolean</span> selected = pos == mSelectedPosition;</div><div class="line">            View child = makeAndAddView(pos, nextTop, <span class="keyword">true</span>, mListPadding.left, selected);</div><div class="line"></div><div class="line">            nextTop = child.getBottom() + mDividerHeight;</div><div class="line">            <span class="keyword">if</span> (selected) &#123;</div><div class="line">                selectedView = child;</div><div class="line">            &#125;</div><div class="line">            pos++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setVisibleRangeHint(mFirstPosition, mFirstPosition + getChildCount() - <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> selectedView;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p> 代码不多，但是我们感觉离着正确的答案越来越近了，直到现在我们依然没有看见任何在布局中添加View的代码。里面第一映入眼帘的是一个while循环，我们捎带着瞟一下上面和下面，上面是对数值的一些操作，用处不大，下面是设置一下属性内容，作用不大，看来我们的重点就在while循环里面了，首先看这个判断条件<strong>nextTop &lt; end &amp;&amp; pos &lt; mItemCount</strong>，end通过上面代码来看，应该表示能显示的最下边的像素。mItemCount，这个数据在前面被赋值了,getCount有木有很熟悉的赶脚，没错！这就是为什么继承BaseAdapter时，getCount必须进行重写，如果不重写就会认为里面没有数据，就不会加载View了，接下来，在刚才分析之中已经感觉出来了，while循环里面的就要放置View了！而且他一次性放置只放置一屏幕，不会在屏幕外也加载，就算有1000条数据，也只能一屏幕一屏幕的加载了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mItemCount = mAdapter.getCount();</div></pre></td></tr></table></figure></p>
<p>我们进入makeAndAddView(pos, nextTop, true, mListPadding.left, selected)中，第一步看注释，已经不用我说了吧~<br><strong>Obtains the view and adds it to our list of children. The view can be made fresh, converted from an unused view, or used as is if it was in the recycle bin.</strong><br>添加View并且加它到我们的list的子数据中。这个view能被刷新，并且还可以从一个不使用的View中转化过来，或者如果有的话，直接使用recycle bin里面的东西。<br>咱们之前分析的东西在里终于被重点提到了！！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> View <span class="title">makeAndAddView</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">int</span> y, <span class="keyword">boolean</span> flow, <span class="keyword">int</span> childrenLeft,</span></span></div><div class="line">            <span class="keyword">boolean</span> selected) &#123;</div><div class="line">        <span class="keyword">if</span> (!mDataChanged) &#123;</div><div class="line">            <span class="comment">// Try to use an existing view for this position.</span></div><div class="line">            <span class="keyword">final</span> View activeView = mRecycler.getActiveView(position);</div><div class="line">            <span class="keyword">if</span> (activeView != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// Found it. We're reusing an existing child, so it just needs</span></div><div class="line">                <span class="comment">// to be positioned like a scrap view.</span></div><div class="line">                setupChild(activeView, position, y, flow, childrenLeft, selected, <span class="keyword">true</span>);</div><div class="line">                <span class="keyword">return</span> activeView;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Make a new view for this position, or convert an unused view if</span></div><div class="line">        <span class="comment">// possible.</span></div><div class="line">        <span class="keyword">final</span> View child = obtainView(position, mIsScrap);</div><div class="line"></div><div class="line">        <span class="comment">// This needs to be positioned and measured.</span></div><div class="line">        setupChild(child, position, y, flow, childrenLeft, selected, mIsScrap[<span class="number">0</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> child;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>在第3行判断数据是否改变，当然false啦！紧接着尝试从RecycleBin当中快速获取一个active view，不过我们目前没有对RecycleBin进行存值操作，所以得到的是null，我们继续往下，到了第16行，上面的注释写着，会在这个位置上面生成一个新View，或者可能转换一个不使用的View。</p>
<p>这个函数在ListView中找不到，在AbsListView中~<br><strong>Gets a view and have it show the data associated with the specified<br>position. This is called when we have already discovered that the view<br>is not available for reuse in the recycle bin. The only choices left are<br>converting an old view or making a new one.</strong></p>
<p>得到一个View并且让他在指定位置上展示数据，这个函数会在我们已经发现这个View不能从RecycleBin直接获得，这个接下唯一的选择就是转换一个老View或者造一个新的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="function">View <span class="title">obtainView</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">boolean</span>[] outMetadata)</span> </span>&#123;</div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"obtainView"</span>);</div><div class="line"></div><div class="line">        outMetadata[<span class="number">0</span>] = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="comment">// Check whether we have a transient state view. Attempt to re-bind the</span></div><div class="line">        <span class="comment">// data and discard the view if we fail.</span></div><div class="line">        <span class="keyword">final</span> View transientView = mRecycler.getTransientStateView(position);</div><div class="line">        <span class="keyword">if</span> (transientView != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">final</span> LayoutParams params = (LayoutParams) transientView.getLayoutParams();</div><div class="line"></div><div class="line">            <span class="comment">// If the view type hasn't changed, attempt to re-bind the data.</span></div><div class="line">            <span class="keyword">if</span> (params.viewType == mAdapter.getItemViewType(position)) &#123;</div><div class="line">                <span class="keyword">final</span> View updatedView = mAdapter.getView(position, transientView, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">                <span class="comment">// If we failed to re-bind the data, scrap the obtained view.</span></div><div class="line">                <span class="keyword">if</span> (updatedView != transientView) &#123;</div><div class="line">                    setItemViewLayoutParams(updatedView, position);</div><div class="line">                    mRecycler.addScrapView(updatedView, position);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            outMetadata[<span class="number">0</span>] = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Finish the temporary detach started in addScrapView().</span></div><div class="line">            transientView.dispatchFinishTemporaryDetach();</div><div class="line">            <span class="keyword">return</span> transientView;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> View scrapView = mRecycler.getScrapView(position);</div><div class="line">        <span class="keyword">final</span> View child = mAdapter.getView(position, scrapView, <span class="keyword">this</span>);</div><div class="line">        <span class="keyword">if</span> (scrapView != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (child != scrapView) &#123;</div><div class="line">                <span class="comment">// Failed to re-bind the data, return scrap to the heap.</span></div><div class="line">                mRecycler.addScrapView(scrapView, position);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child.isTemporarilyDetached()) &#123;</div><div class="line">                outMetadata[<span class="number">0</span>] = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">                <span class="comment">// Finish the temporary detach started in addScrapView().</span></div><div class="line">                child.dispatchFinishTemporaryDetach();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mCacheColorHint != <span class="number">0</span>) &#123;</div><div class="line">            child.setDrawingCacheBackgroundColor(mCacheColorHint);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (child.getImportantForAccessibility() == IMPORTANT_FOR_ACCESSIBILITY_AUTO) &#123;</div><div class="line">            child.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_YES);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setItemViewLayoutParams(child, position);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (AccessibilityManager.getInstance(mContext).isEnabled()) &#123;</div><div class="line">            <span class="keyword">if</span> (mAccessibilityDelegate == <span class="keyword">null</span>) &#123;</div><div class="line">                mAccessibilityDelegate = <span class="keyword">new</span> ListItemAccessibilityDelegate();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (child.getAccessibilityDelegate() == <span class="keyword">null</span>) &#123;</div><div class="line">                child.setAccessibilityDelegate(mAccessibilityDelegate);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> child;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>我们会看到在第30行，他尝试这从ScrapView中获取一个，回答同样是不可以的，因为这个没有数据，我们第31行看见了，我们的adapter.getView（），这个方法我们很熟悉，我们会返回一个我们已经准备好的item，返回也是return child；</p>
<p>这个方法执行完了，我们回到makeAndAddView（），继续向下执行第19行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> View <span class="title">makeAndAddView</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">int</span> y, <span class="keyword">boolean</span> flow, <span class="keyword">int</span> childrenLeft,</span></span></div><div class="line">            <span class="keyword">boolean</span> selected) &#123;</div><div class="line">        <span class="keyword">if</span> (!mDataChanged) &#123;</div><div class="line">            <span class="comment">// Try to use an existing view for this position.</span></div><div class="line">            <span class="keyword">final</span> View activeView = mRecycler.getActiveView(position);</div><div class="line">            <span class="keyword">if</span> (activeView != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// Found it. We're reusing an existing child, so it just needs</span></div><div class="line">                <span class="comment">// to be positioned like a scrap view.</span></div><div class="line">                setupChild(activeView, position, y, flow, childrenLeft, selected, <span class="keyword">true</span>);</div><div class="line">                <span class="keyword">return</span> activeView;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Make a new view for this position, or convert an unused view if</span></div><div class="line">        <span class="comment">// possible.</span></div><div class="line">        <span class="keyword">final</span> View child = obtainView(position, mIsScrap);</div><div class="line"></div><div class="line">        <span class="comment">// This needs to be positioned and measured.</span></div><div class="line">        setupChild(child, position, y, flow, childrenLeft, selected, mIsScrap[<span class="number">0</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> child;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>在第19行会调用setupChild()，忽略参数问题，光看方法名字——安装Child，看来这个方法里面将会放置View！</p>
<p><strong>Adds a view as a child and make sure it is measured (if necessary) and<br>positioned properly.</strong></p>
<p>感觉不用我再翻译了，作为child添加一个View看来结论就是在这个地方设置了View啊！！！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupChild</span><span class="params">(View child, <span class="keyword">int</span> position, <span class="keyword">int</span> y, <span class="keyword">boolean</span> flowDown, <span class="keyword">int</span> childrenLeft,</span></span></div><div class="line">            <span class="keyword">boolean</span> selected, <span class="keyword">boolean</span> isAttachedToWindow) &#123;</div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"setupListItem"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isSelected = selected &amp;&amp; shouldShowSelector();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> updateChildSelected = isSelected != child.isSelected();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> mode = mTouchMode;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isPressed = mode &gt; TOUCH_MODE_DOWN &amp;&amp; mode &lt; TOUCH_MODE_SCROLL</div><div class="line">                &amp;&amp; mMotionPosition == position;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> updateChildPressed = isPressed != child.isPressed();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> needToMeasure = !isAttachedToWindow || updateChildSelected</div><div class="line">                || child.isLayoutRequested();</div><div class="line"></div><div class="line">        <span class="comment">// Respect layout params that are already in the view. Otherwise make</span></div><div class="line">        <span class="comment">// some up...</span></div><div class="line">        AbsListView.LayoutParams p = (AbsListView.LayoutParams) child.getLayoutParams();</div><div class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</div><div class="line">            p = (AbsListView.LayoutParams) generateDefaultLayoutParams();</div><div class="line">        &#125;</div><div class="line">        p.viewType = mAdapter.getItemViewType(position);</div><div class="line">        p.isEnabled = mAdapter.isEnabled(position);</div><div class="line"></div><div class="line">        <span class="comment">// Set up view state before attaching the view, since we may need to</span></div><div class="line">        <span class="comment">// rely on the jumpDrawablesToCurrentState() call that occurs as part</span></div><div class="line">        <span class="comment">// of view attachment.</span></div><div class="line">        <span class="keyword">if</span> (updateChildSelected) &#123;</div><div class="line">            child.setSelected(isSelected);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (updateChildPressed) &#123;</div><div class="line">            child.setPressed(isPressed);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mChoiceMode != CHOICE_MODE_NONE &amp;&amp; mCheckStates != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (child <span class="keyword">instanceof</span> Checkable) &#123;</div><div class="line">                ((Checkable) child).setChecked(mCheckStates.get(position));</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getContext().getApplicationInfo().targetSdkVersion</div><div class="line">                    &gt;= android.os.Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class="line">                child.setActivated(mCheckStates.get(position));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ((isAttachedToWindow &amp;&amp; !p.forceAdd) || (p.recycledHeaderFooter</div><div class="line">                &amp;&amp; p.viewType == AdapterView.ITEM_VIEW_TYPE_HEADER_OR_FOOTER)) &#123;</div><div class="line">            attachViewToParent(child, flowDown ? -<span class="number">1</span> : <span class="number">0</span>, p);</div><div class="line"></div><div class="line">            <span class="comment">// If the view was previously attached for a different position,</span></div><div class="line">            <span class="comment">// then manually jump the drawables.</span></div><div class="line">            <span class="keyword">if</span> (isAttachedToWindow</div><div class="line">                    &amp;&amp; (((AbsListView.LayoutParams) child.getLayoutParams()).scrappedFromPosition)</div><div class="line">                            != position) &#123;</div><div class="line">                child.jumpDrawablesToCurrentState();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            p.forceAdd = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">if</span> (p.viewType == AdapterView.ITEM_VIEW_TYPE_HEADER_OR_FOOTER) &#123;</div><div class="line">                p.recycledHeaderFooter = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            addViewInLayout(child, flowDown ? -<span class="number">1</span> : <span class="number">0</span>, p, <span class="keyword">true</span>);</div><div class="line">            <span class="comment">// add view in layout will reset the RTL properties. We have to re-resolve them</span></div><div class="line">            child.resolveRtlPropertiesIfNeeded();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (needToMeasure) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childWidthSpec = ViewGroup.getChildMeasureSpec(mWidthMeasureSpec,</div><div class="line">                    mListPadding.left + mListPadding.right, p.width);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> lpHeight = p.height;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childHeightSpec;</div><div class="line">            <span class="keyword">if</span> (lpHeight &gt; <span class="number">0</span>) &#123;</div><div class="line">                childHeightSpec = MeasureSpec.makeMeasureSpec(lpHeight, MeasureSpec.EXACTLY);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                childHeightSpec = MeasureSpec.makeSafeMeasureSpec(getMeasuredHeight(),</div><div class="line">                        MeasureSpec.UNSPECIFIED);</div><div class="line">            &#125;</div><div class="line">            child.measure(childWidthSpec, childHeightSpec);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            cleanupLayoutState(child);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> w = child.getMeasuredWidth();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> h = child.getMeasuredHeight();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childTop = flowDown ? y : y - h;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (needToMeasure) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childRight = childrenLeft + w;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childBottom = childTop + h;</div><div class="line">            child.layout(childrenLeft, childTop, childRight, childBottom);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            child.offsetLeftAndRight(childrenLeft - child.getLeft());</div><div class="line">            child.offsetTopAndBottom(childTop - child.getTop());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mCachingStarted &amp;&amp; !child.isDrawingCacheEnabled()) &#123;</div><div class="line">            child.setDrawingCacheEnabled(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>代码依然很多，但是我们这里只说重点!在第59行出现了一个方法addViewInLayout(child, flowDown ? -1 : 0, p, true);看函数名，就知道了。到目前为止我们的layout上面已经有View了。</p>
<p>咱们的第一次layout终于完毕！</p>
<h2 id="第二次Layout"><a href="#第二次Layout" class="headerlink" title="第二次Layout"></a>第二次Layout</h2><p>即使是一个再简单的View，在展示到界面上之前都会经历至少两次onMeasure()和两次onLayout()的过程。其实这只是一个很小的细节，平时对我们影响并不大，因为不管是onMeasure()或者onLayout()几次，反正都是执行的相同的逻辑，我们并不需要进行过多关心。但是在ListView中情况就不一样了，因为这就意味着layoutChildren()过程会执行两次，而这个过程当中涉及到向ListView中添加子元素，如果相同的逻辑执行两遍的话，那么ListView中就会存在一份重复的数据了。因此ListView在layoutChildren()过程当中做了第二次Layout的逻辑处理，非常巧妙地解决了这个问题，下面我们就来分析一下第二次Layout的过程。</p>
<p>时间直接进入layoutChildren()，因为OnLayout里面几乎什么都没有。<br>第一次和第二次的流程其实差不多，不过具体细节就有所不同了~<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">layoutChildren</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> blockLayoutRequests = mBlockLayoutRequests;</div><div class="line">        <span class="keyword">if</span> (blockLayoutRequests) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mBlockLayoutRequests = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">super</span>.layoutChildren();</div><div class="line"></div><div class="line">            invalidate();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mAdapter == <span class="keyword">null</span>) &#123;</div><div class="line">                resetList();</div><div class="line">                invokeOnItemScrollListener();</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childrenTop = mListPadding.top;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childrenBottom = mBottom - mTop - mListPadding.bottom;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();</div><div class="line"></div><div class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> delta = <span class="number">0</span>;</div><div class="line"></div><div class="line">            View sel;</div><div class="line">            View oldSel = <span class="keyword">null</span>;</div><div class="line">            View oldFirst = <span class="keyword">null</span>;</div><div class="line">            View newSel = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Remember stuff we will need down below</span></div><div class="line">            <span class="keyword">switch</span> (mLayoutMode) &#123;</div><div class="line">            <span class="keyword">case</span> LAYOUT_SET_SELECTION:</div><div class="line">                index = mNextSelectedPosition - mFirstPosition;</div><div class="line">                <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; childCount) &#123;</div><div class="line">                    newSel = getChildAt(index);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> LAYOUT_FORCE_TOP:</div><div class="line">            <span class="keyword">case</span> LAYOUT_FORCE_BOTTOM:</div><div class="line">            <span class="keyword">case</span> LAYOUT_SPECIFIC:</div><div class="line">            <span class="keyword">case</span> LAYOUT_SYNC:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> LAYOUT_MOVE_SELECTION:</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="comment">// Remember the previously selected view</span></div><div class="line">                index = mSelectedPosition - mFirstPosition;</div><div class="line">                <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; childCount) &#123;</div><div class="line">                    oldSel = getChildAt(index);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Remember the previous first child</span></div><div class="line">                oldFirst = getChildAt(<span class="number">0</span>);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (mNextSelectedPosition &gt;= <span class="number">0</span>) &#123;</div><div class="line">                    delta = mNextSelectedPosition - mSelectedPosition;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Caution: newSel might be null</span></div><div class="line">                newSel = getChildAt(index + delta);</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="keyword">boolean</span> dataChanged = mDataChanged;</div><div class="line">            <span class="keyword">if</span> (dataChanged) &#123;</div><div class="line">                handleDataChanged();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Handle the empty set by removing all views that are visible</span></div><div class="line">            <span class="comment">// and calling it a day</span></div><div class="line">            <span class="keyword">if</span> (mItemCount == <span class="number">0</span>) &#123;</div><div class="line">                resetList();</div><div class="line">                invokeOnItemScrollListener();</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mItemCount != mAdapter.getCount()) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The content of the adapter has changed but "</span></div><div class="line">                        + <span class="string">"ListView did not receive a notification. Make sure the content of "</span></div><div class="line">                        + <span class="string">"your adapter is not modified from a background thread, but only from "</span></div><div class="line">                        + <span class="string">"the UI thread. Make sure your adapter calls notifyDataSetChanged() "</span></div><div class="line">                        + <span class="string">"when its content changes. [in ListView("</span> + getId() + <span class="string">", "</span> + getClass()</div><div class="line">                        + <span class="string">") with Adapter("</span> + mAdapter.getClass() + <span class="string">")]"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            setSelectedPositionInt(mNextSelectedPosition);</div><div class="line"></div><div class="line">            AccessibilityNodeInfo accessibilityFocusLayoutRestoreNode = <span class="keyword">null</span>;</div><div class="line">            View accessibilityFocusLayoutRestoreView = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">int</span> accessibilityFocusPosition = INVALID_POSITION;</div><div class="line"></div><div class="line">            <span class="comment">// Remember which child, if any, had accessibility focus. This must</span></div><div class="line">            <span class="comment">// occur before recycling any views, since that will clear</span></div><div class="line">            <span class="comment">// accessibility focus.</span></div><div class="line">            <span class="keyword">final</span> ViewRootImpl viewRootImpl = getViewRootImpl();</div><div class="line">            <span class="keyword">if</span> (viewRootImpl != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">final</span> View focusHost = viewRootImpl.getAccessibilityFocusedHost();</div><div class="line">                <span class="keyword">if</span> (focusHost != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">final</span> View focusChild = getAccessibilityFocusedChild(focusHost);</div><div class="line">                    <span class="keyword">if</span> (focusChild != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (!dataChanged || isDirectChildHeaderOrFooter(focusChild)</div><div class="line">                                || focusChild.hasTransientState() || mAdapterHasStableIds) &#123;</div><div class="line">                            <span class="comment">// The views won't be changing, so try to maintain</span></div><div class="line">                            <span class="comment">// focus on the current host and virtual view.</span></div><div class="line">                            accessibilityFocusLayoutRestoreView = focusHost;</div><div class="line">                            accessibilityFocusLayoutRestoreNode = viewRootImpl</div><div class="line">                                    .getAccessibilityFocusedVirtualView();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="comment">// If all else fails, maintain focus at the same</span></div><div class="line">                        <span class="comment">// position.</span></div><div class="line">                        accessibilityFocusPosition = getPositionForView(focusChild);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            View focusLayoutRestoreDirectChild = <span class="keyword">null</span>;</div><div class="line">            View focusLayoutRestoreView = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">            <span class="comment">// Take focus back to us temporarily to avoid the eventual call to</span></div><div class="line">            <span class="comment">// clear focus when removing the focused child below from messing</span></div><div class="line">            <span class="comment">// things up when ViewAncestor assigns focus back to someone else.</span></div><div class="line">            <span class="keyword">final</span> View focusedChild = getFocusedChild();</div><div class="line">            <span class="keyword">if</span> (focusedChild != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// <span class="doctag">TODO:</span> in some cases focusedChild.getParent() == null</span></div><div class="line"></div><div class="line">                <span class="comment">// We can remember the focused view to restore after re-layout</span></div><div class="line">                <span class="comment">// if the data hasn't changed, or if the focused position is a</span></div><div class="line">                <span class="comment">// header or footer.</span></div><div class="line">                <span class="keyword">if</span> (!dataChanged || isDirectChildHeaderOrFooter(focusedChild)</div><div class="line">                        || focusedChild.hasTransientState() || mAdapterHasStableIds) &#123;</div><div class="line">                    focusLayoutRestoreDirectChild = focusedChild;</div><div class="line">                    <span class="comment">// Remember the specific view that had focus.</span></div><div class="line">                    focusLayoutRestoreView = findFocus();</div><div class="line">                    <span class="keyword">if</span> (focusLayoutRestoreView != <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="comment">// Tell it we are going to mess with it.</span></div><div class="line">                        focusLayoutRestoreView.dispatchStartTemporaryDetach();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                requestFocus();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Pull all children into the RecycleBin.</span></div><div class="line">            <span class="comment">// These views will be reused if possible</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> firstPosition = mFirstPosition;</div><div class="line">            <span class="keyword">final</span> RecycleBin recycleBin = mRecycler;</div><div class="line">            <span class="keyword">if</span> (dataChanged) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">                    recycleBin.addScrapView(getChildAt(i), firstPosition+i);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                recycleBin.fillActiveViews(childCount, firstPosition);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Clear out old views</span></div><div class="line">            detachAllViewsFromParent();</div><div class="line">            recycleBin.removeSkippedScrap();</div><div class="line"></div><div class="line">            <span class="keyword">switch</span> (mLayoutMode) &#123;</div><div class="line">            <span class="keyword">case</span> LAYOUT_SET_SELECTION:</div><div class="line">                <span class="keyword">if</span> (newSel != <span class="keyword">null</span>) &#123;</div><div class="line">                    sel = fillFromSelection(newSel.getTop(), childrenTop, childrenBottom);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    sel = fillFromMiddle(childrenTop, childrenBottom);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> LAYOUT_SYNC:</div><div class="line">                sel = fillSpecific(mSyncPosition, mSpecificTop);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> LAYOUT_FORCE_BOTTOM:</div><div class="line">                sel = fillUp(mItemCount - <span class="number">1</span>, childrenBottom);</div><div class="line">                adjustViewsUpOrDown();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> LAYOUT_FORCE_TOP:</div><div class="line">                mFirstPosition = <span class="number">0</span>;</div><div class="line">                sel = fillFromTop(childrenTop);</div><div class="line">                adjustViewsUpOrDown();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> LAYOUT_SPECIFIC:</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> selectedPosition = reconcileSelectedPosition();</div><div class="line">                sel = fillSpecific(selectedPosition, mSpecificTop);</div><div class="line">                <span class="comment">/**</span></div><div class="line">                 * When ListView is resized, FocusSelector requests an async selection for the</div><div class="line">                 * previously focused item to make sure it is still visible. If the item is not</div><div class="line">                 * selectable, it won't regain focus so instead we call FocusSelector</div><div class="line">                 * to directly request focus on the view after it is visible.</div><div class="line">                 */</div><div class="line">                <span class="keyword">if</span> (sel == <span class="keyword">null</span> &amp;&amp; mFocusSelector != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">final</span> Runnable focusRunnable = mFocusSelector</div><div class="line">                            .setupFocusIfValid(selectedPosition);</div><div class="line">                    <span class="keyword">if</span> (focusRunnable != <span class="keyword">null</span>) &#123;</div><div class="line">                        post(focusRunnable);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> LAYOUT_MOVE_SELECTION:</div><div class="line">                sel = moveSelection(oldSel, newSel, delta, childrenTop, childrenBottom);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">if</span> (childCount == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (!mStackFromBottom) &#123;</div><div class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> position = lookForSelectablePosition(<span class="number">0</span>, <span class="keyword">true</span>);</div><div class="line">                        setSelectedPositionInt(position);</div><div class="line">                        sel = fillFromTop(childrenTop);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> position = lookForSelectablePosition(mItemCount - <span class="number">1</span>, <span class="keyword">false</span>);</div><div class="line">                        setSelectedPositionInt(position);</div><div class="line">                        sel = fillUp(mItemCount - <span class="number">1</span>, childrenBottom);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (mSelectedPosition &gt;= <span class="number">0</span> &amp;&amp; mSelectedPosition &lt; mItemCount) &#123;</div><div class="line">                        sel = fillSpecific(mSelectedPosition,</div><div class="line">                                oldSel == <span class="keyword">null</span> ? childrenTop : oldSel.getTop());</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mFirstPosition &lt; mItemCount) &#123;</div><div class="line">                        sel = fillSpecific(mFirstPosition,</div><div class="line">                                oldFirst == <span class="keyword">null</span> ? childrenTop : oldFirst.getTop());</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        sel = fillSpecific(<span class="number">0</span>, childrenTop);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Flush any cached views that did not get reused above</span></div><div class="line">            recycleBin.scrapActiveViews();</div><div class="line"></div><div class="line">            <span class="comment">// remove any header/footer that has been temp detached and not re-attached</span></div><div class="line">            removeUnusedFixedViews(mHeaderViewInfos);</div><div class="line">            removeUnusedFixedViews(mFooterViewInfos);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (sel != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// The current selected item should get focus if items are</span></div><div class="line">                <span class="comment">// focusable.</span></div><div class="line">                <span class="keyword">if</span> (mItemsCanFocus &amp;&amp; hasFocus() &amp;&amp; !sel.hasFocus()) &#123;</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">boolean</span> focusWasTaken = (sel == focusLayoutRestoreDirectChild &amp;&amp;</div><div class="line">                            focusLayoutRestoreView != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                            focusLayoutRestoreView.requestFocus()) || sel.requestFocus();</div><div class="line">                    <span class="keyword">if</span> (!focusWasTaken) &#123;</div><div class="line">                        <span class="comment">// Selected item didn't take focus, but we still want to</span></div><div class="line">                        <span class="comment">// make sure something else outside of the selected view</span></div><div class="line">                        <span class="comment">// has focus.</span></div><div class="line">                        <span class="keyword">final</span> View focused = getFocusedChild();</div><div class="line">                        <span class="keyword">if</span> (focused != <span class="keyword">null</span>) &#123;</div><div class="line">                            focused.clearFocus();</div><div class="line">                        &#125;</div><div class="line">                        positionSelector(INVALID_POSITION, sel);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        sel.setSelected(<span class="keyword">false</span>);</div><div class="line">                        mSelectorRect.setEmpty();</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    positionSelector(INVALID_POSITION, sel);</div><div class="line">                &#125;</div><div class="line">                mSelectedTop = sel.getTop();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> inTouchMode = mTouchMode == TOUCH_MODE_TAP</div><div class="line">                        || mTouchMode == TOUCH_MODE_DONE_WAITING;</div><div class="line">                <span class="keyword">if</span> (inTouchMode) &#123;</div><div class="line">                    <span class="comment">// If the user's finger is down, select the motion position.</span></div><div class="line">                    <span class="keyword">final</span> View child = getChildAt(mMotionPosition - mFirstPosition);</div><div class="line">                    <span class="keyword">if</span> (child != <span class="keyword">null</span>) &#123;</div><div class="line">                        positionSelector(mMotionPosition, child);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mSelectorPosition != INVALID_POSITION) &#123;</div><div class="line">                    <span class="comment">// If we had previously positioned the selector somewhere,</span></div><div class="line">                    <span class="comment">// put it back there. It might not match up with the data,</span></div><div class="line">                    <span class="comment">// but it's transitioning out so it's not a big deal.</span></div><div class="line">                    <span class="keyword">final</span> View child = getChildAt(mSelectorPosition - mFirstPosition);</div><div class="line">                    <span class="keyword">if</span> (child != <span class="keyword">null</span>) &#123;</div><div class="line">                        positionSelector(mSelectorPosition, child);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// Otherwise, clear selection.</span></div><div class="line">                    mSelectedTop = <span class="number">0</span>;</div><div class="line">                    mSelectorRect.setEmpty();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Even if there is not selected position, we may need to</span></div><div class="line">                <span class="comment">// restore focus (i.e. something focusable in touch mode).</span></div><div class="line">                <span class="keyword">if</span> (hasFocus() &amp;&amp; focusLayoutRestoreView != <span class="keyword">null</span>) &#123;</div><div class="line">                    focusLayoutRestoreView.requestFocus();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Attempt to restore accessibility focus, if necessary.</span></div><div class="line">            <span class="keyword">if</span> (viewRootImpl != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">final</span> View newAccessibilityFocusedView = viewRootImpl.getAccessibilityFocusedHost();</div><div class="line">                <span class="keyword">if</span> (newAccessibilityFocusedView == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (accessibilityFocusLayoutRestoreView != <span class="keyword">null</span></div><div class="line">                            &amp;&amp; accessibilityFocusLayoutRestoreView.isAttachedToWindow()) &#123;</div><div class="line">                        <span class="keyword">final</span> AccessibilityNodeProvider provider =</div><div class="line">                                accessibilityFocusLayoutRestoreView.getAccessibilityNodeProvider();</div><div class="line">                        <span class="keyword">if</span> (accessibilityFocusLayoutRestoreNode != <span class="keyword">null</span> &amp;&amp; provider != <span class="keyword">null</span>) &#123;</div><div class="line">                            <span class="keyword">final</span> <span class="keyword">int</span> virtualViewId = AccessibilityNodeInfo.getVirtualDescendantId(</div><div class="line">                                    accessibilityFocusLayoutRestoreNode.getSourceNodeId());</div><div class="line">                            provider.performAction(virtualViewId,</div><div class="line">                                    AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS, <span class="keyword">null</span>);</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            accessibilityFocusLayoutRestoreView.requestAccessibilityFocus();</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (accessibilityFocusPosition != INVALID_POSITION) &#123;</div><div class="line">                        <span class="comment">// Bound the position within the visible children.</span></div><div class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> position = MathUtils.constrain(</div><div class="line">                                accessibilityFocusPosition - mFirstPosition, <span class="number">0</span>,</div><div class="line">                                getChildCount() - <span class="number">1</span>);</div><div class="line">                        <span class="keyword">final</span> View restoreView = getChildAt(position);</div><div class="line">                        <span class="keyword">if</span> (restoreView != <span class="keyword">null</span>) &#123;</div><div class="line">                            restoreView.requestAccessibilityFocus();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Tell focus view we are done mucking with it, if it is still in</span></div><div class="line">            <span class="comment">// our view hierarchy.</span></div><div class="line">            <span class="keyword">if</span> (focusLayoutRestoreView != <span class="keyword">null</span></div><div class="line">                    &amp;&amp; focusLayoutRestoreView.getWindowToken() != <span class="keyword">null</span>) &#123;</div><div class="line">                focusLayoutRestoreView.dispatchFinishTemporaryDetach();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            mLayoutMode = LAYOUT_NORMAL;</div><div class="line">            mDataChanged = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">if</span> (mPositionScrollAfterLayout != <span class="keyword">null</span>) &#123;</div><div class="line">                post(mPositionScrollAfterLayout);</div><div class="line">                mPositionScrollAfterLayout = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            mNeedSync = <span class="keyword">false</span>;</div><div class="line">            setNextSelectedPositionInt(mSelectedPosition);</div><div class="line"></div><div class="line">            updateScrollIndicators();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mItemCount &gt; <span class="number">0</span>) &#123;</div><div class="line">                checkSelectionChanged();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            invokeOnItemScrollListener();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (mFocusSelector != <span class="keyword">null</span>) &#123;</div><div class="line">                mFocusSelector.onLayoutComplete();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!blockLayoutRequests) &#123;</div><div class="line">                mBlockLayoutRequests = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>依然是在第22行，调用getChildCount()方法来获取子View的数量，只不过现在得到的值不会再是0了，而是ListView中的View数量，下面在第151行调用了RecycleBin的fillActiveViews()方法，这次效果可就不一样了，因为目前ListView中已经有子View了，这样所有的子View都会被缓存到RecycleBin的mActiveViews数组当中，后面将会使用到他们。</p>
<p>紧接着在第155行执行这个方法detachAllViewsFromParent();要知道这个方法在第一次layout中同样执行了，不过因为当是ListView中没有任何View所以这个方法和没执行一样。但是要知道现在我们屏幕上已经有了View。我们开看看这个方法的作用，这个方法会将所有ListView当中的子View全部清除掉，从而保证第二次Layout过程不会产生一份重复的数据。可能会问了，这样把已经加载好的View又清除掉，待会还要再重新加载一遍，这不是严重影响效率吗？不用担心，还记得我们刚刚调用了RecycleBin的fillActiveViews()方法来缓存子View吗，待会儿将会直接使用这些缓存好的View来进行加载，而并不会重新执行一遍inflate过程，因此效率方面并不会有什么明显的影响。</p>
<p>接下拉到了199行，现在我们的childCount 已经不是0，所以我们进入else的逻辑里面，执行fillSpecific（）方法<br>注释：<br><strong>Put a specific item at a specific location on the screen and then build<br>up and down from there.</strong><br>放置一个指定item在屏幕上的指定位置，然后从这个位置的上下开始构建其他的view.</p>
<p>接下来会进入到我们熟悉的fillDown（）中，然后会进入makeAndAddView（），不过这次我们来看一下，具体逻辑是什么样的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> View <span class="title">makeAndAddView</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">int</span> y, <span class="keyword">boolean</span> flow, <span class="keyword">int</span> childrenLeft,</span></span></div><div class="line">            <span class="keyword">boolean</span> selected) &#123;</div><div class="line">        <span class="keyword">if</span> (!mDataChanged) &#123;</div><div class="line">            <span class="comment">// Try to use an existing view for this position.</span></div><div class="line">            <span class="keyword">final</span> View activeView = mRecycler.getActiveView(position);</div><div class="line">            <span class="keyword">if</span> (activeView != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// Found it. We're reusing an existing child, so it just needs</span></div><div class="line">                <span class="comment">// to be positioned like a scrap view.</span></div><div class="line">                setupChild(activeView, position, y, flow, childrenLeft, selected, <span class="keyword">true</span>);</div><div class="line">                <span class="keyword">return</span> activeView;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Make a new view for this position, or convert an unused view if</span></div><div class="line">        <span class="comment">// possible.</span></div><div class="line">        <span class="keyword">final</span> View child = obtainView(position, mIsScrap);</div><div class="line"></div><div class="line">        <span class="comment">// This needs to be positioned and measured.</span></div><div class="line">        setupChild(child, position, y, flow, childrenLeft, selected, mIsScrap[<span class="number">0</span>]);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> child;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在第5行中我们会尝试着回去一个ActiveView，当然我们现在是可以获取到的，我们不会向下走到16行，而是直接走setupChild(activeView, position, y, flow, childrenLeft, selected, true)方法中，这里注意了，最后一个元素是true，这个参数表明当前的View是之前被回收过的，我们进入这个方法中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupChild</span><span class="params">(View child, <span class="keyword">int</span> position, <span class="keyword">int</span> y, <span class="keyword">boolean</span> flowDown, <span class="keyword">int</span> childrenLeft,</span></span></div><div class="line">            <span class="keyword">boolean</span> selected, <span class="keyword">boolean</span> isAttachedToWindow) &#123;</div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"setupListItem"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isSelected = selected &amp;&amp; shouldShowSelector();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> updateChildSelected = isSelected != child.isSelected();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> mode = mTouchMode;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isPressed = mode &gt; TOUCH_MODE_DOWN &amp;&amp; mode &lt; TOUCH_MODE_SCROLL</div><div class="line">                &amp;&amp; mMotionPosition == position;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> updateChildPressed = isPressed != child.isPressed();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> needToMeasure = !isAttachedToWindow || updateChildSelected</div><div class="line">                || child.isLayoutRequested();</div><div class="line"></div><div class="line">        <span class="comment">// Respect layout params that are already in the view. Otherwise make</span></div><div class="line">        <span class="comment">// some up...</span></div><div class="line">        AbsListView.LayoutParams p = (AbsListView.LayoutParams) child.getLayoutParams();</div><div class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</div><div class="line">            p = (AbsListView.LayoutParams) generateDefaultLayoutParams();</div><div class="line">        &#125;</div><div class="line">        p.viewType = mAdapter.getItemViewType(position);</div><div class="line">        p.isEnabled = mAdapter.isEnabled(position);</div><div class="line"></div><div class="line">        <span class="comment">// Set up view state before attaching the view, since we may need to</span></div><div class="line">        <span class="comment">// rely on the jumpDrawablesToCurrentState() call that occurs as part</span></div><div class="line">        <span class="comment">// of view attachment.</span></div><div class="line">        <span class="keyword">if</span> (updateChildSelected) &#123;</div><div class="line">            child.setSelected(isSelected);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (updateChildPressed) &#123;</div><div class="line">            child.setPressed(isPressed);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mChoiceMode != CHOICE_MODE_NONE &amp;&amp; mCheckStates != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (child <span class="keyword">instanceof</span> Checkable) &#123;</div><div class="line">                ((Checkable) child).setChecked(mCheckStates.get(position));</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getContext().getApplicationInfo().targetSdkVersion</div><div class="line">                    &gt;= android.os.Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class="line">                child.setActivated(mCheckStates.get(position));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ((isAttachedToWindow &amp;&amp; !p.forceAdd) || (p.recycledHeaderFooter</div><div class="line">                &amp;&amp; p.viewType == AdapterView.ITEM_VIEW_TYPE_HEADER_OR_FOOTER)) &#123;</div><div class="line">            attachViewToParent(child, flowDown ? -<span class="number">1</span> : <span class="number">0</span>, p);</div><div class="line"></div><div class="line">            <span class="comment">// If the view was previously attached for a different position,</span></div><div class="line">            <span class="comment">// then manually jump the drawables.</span></div><div class="line">            <span class="keyword">if</span> (isAttachedToWindow</div><div class="line">                    &amp;&amp; (((AbsListView.LayoutParams) child.getLayoutParams()).scrappedFromPosition)</div><div class="line">                            != position) &#123;</div><div class="line">                child.jumpDrawablesToCurrentState();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            p.forceAdd = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">if</span> (p.viewType == AdapterView.ITEM_VIEW_TYPE_HEADER_OR_FOOTER) &#123;</div><div class="line">                p.recycledHeaderFooter = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            addViewInLayout(child, flowDown ? -<span class="number">1</span> : <span class="number">0</span>, p, <span class="keyword">true</span>);</div><div class="line">            <span class="comment">// add view in layout will reset the RTL properties. We have to re-resolve them</span></div><div class="line">            child.resolveRtlPropertiesIfNeeded();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (needToMeasure) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childWidthSpec = ViewGroup.getChildMeasureSpec(mWidthMeasureSpec,</div><div class="line">                    mListPadding.left + mListPadding.right, p.width);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> lpHeight = p.height;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childHeightSpec;</div><div class="line">            <span class="keyword">if</span> (lpHeight &gt; <span class="number">0</span>) &#123;</div><div class="line">                childHeightSpec = MeasureSpec.makeMeasureSpec(lpHeight, MeasureSpec.EXACTLY);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                childHeightSpec = MeasureSpec.makeSafeMeasureSpec(getMeasuredHeight(),</div><div class="line">                        MeasureSpec.UNSPECIFIED);</div><div class="line">            &#125;</div><div class="line">            child.measure(childWidthSpec, childHeightSpec);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            cleanupLayoutState(child);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> w = child.getMeasuredWidth();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> h = child.getMeasuredHeight();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childTop = flowDown ? y : y - h;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (needToMeasure) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childRight = childrenLeft + w;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childBottom = childTop + h;</div><div class="line">            child.layout(childrenLeft, childTop, childRight, childBottom);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            child.offsetLeftAndRight(childrenLeft - child.getLeft());</div><div class="line">            child.offsetTopAndBottom(childTop - child.getTop());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mCachingStarted &amp;&amp; !child.isDrawingCacheEnabled()) &#123;</div><div class="line">            child.setDrawingCacheEnabled(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我们会在第45行调用attachViewToParent(child, flowDown ? -1 : 0, p)，在第一次Layout过程则是执行的else语句中的addViewInLayout()方法。这两个方法最大的区别在于，如果我们需要向ViewGroup中添加一个新的子View，应该调用addViewInLayout()方法，而如果是想要将一个之前detach的View重新attach到ViewGroup上，就应该调用attachViewToParent()方法。那么由于前面在layoutChildren()方法当中调用了detachAllViewsFromParent()方法，这样ListView中所有的子View都是处于detach状态的，所以这里attachViewToParent()方法是正确的选择。</p>
<p>经历了这样一个detach又attach的过程，ListView中所有的子View又都可以正常显示出来了，那么第二次Layout过程结束。</p>
<h2 id="滑动加载更多数据"><a href="#滑动加载更多数据" class="headerlink" title="滑动加载更多数据"></a>滑动加载更多数据</h2><p>到目前只还只加载了一小部分数据，如果要加载100条，那么剩余的应该怎么去加载呢？毫无疑问动态的去加载，那么接下来我们要看的就是onTouchEvent（）方法中的，这个onTouchEvent方法在ListView找不到，那么只会在AbsListView中了。仔细思考一下也对，对于ListView还是GridView来说，最终机制都是查不了多少的，真正不同的也就放置在子View的位置不同，他们的更新数据都是滑动更新，故抽象提取出来了。</p>
<p>这个方法依然不短，同时也没有注释，到这个时候，只有发挥自己已经学过的知识了。触摸一般分为三种，按下、滑动、抬起，短暂思考，最重要无疑是重点，所以我们主要看move操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isEnabled()) &#123;</div><div class="line">            <span class="comment">// A disabled view that is clickable still consumes the touch</span></div><div class="line">            <span class="comment">// events, it just doesn't respond to them.</span></div><div class="line">            <span class="keyword">return</span> isClickable() || isLongClickable();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mPositionScroller != <span class="keyword">null</span>) &#123;</div><div class="line">            mPositionScroller.stop();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mIsDetaching || !isAttachedToWindow()) &#123;</div><div class="line">            <span class="comment">// Something isn't right.</span></div><div class="line">            <span class="comment">// Since we rely on being attached to get data set change notifications,</span></div><div class="line">            <span class="comment">// don't risk doing anything where we might try to resync and find things</span></div><div class="line">            <span class="comment">// in a bogus state.</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        startNestedScroll(SCROLL_AXIS_VERTICAL);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mFastScroll != <span class="keyword">null</span> &amp;&amp; mFastScroll.onTouchEvent(ev)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        initVelocityTrackerIfNotExists();</div><div class="line">        <span class="keyword">final</span> MotionEvent vtev = MotionEvent.obtain(ev);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> actionMasked = ev.getActionMasked();</div><div class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">            mNestedYOffset = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        vtev.offsetLocation(<span class="number">0</span>, mNestedYOffset);</div><div class="line">        <span class="keyword">switch</span> (actionMasked) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class="line">                onTouchDown(ev);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class="line">                onTouchMove(ev, vtev);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</div><div class="line">                onTouchUp(ev);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL: &#123;</div><div class="line">                onTouchCancel();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_POINTER_UP: &#123;</div><div class="line">                onSecondaryPointerUp(ev);</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> x = mMotionX;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> y = mMotionY;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> motionPosition = pointToPosition(x, y);</div><div class="line">                <span class="keyword">if</span> (motionPosition &gt;= <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">// Remember where the motion event started</span></div><div class="line">                    <span class="keyword">final</span> View child = getChildAt(motionPosition - mFirstPosition);</div><div class="line">                    mMotionViewOriginalTop = child.getTop();</div><div class="line">                    mMotionPosition = motionPosition;</div><div class="line">                &#125;</div><div class="line">                mLastY = y;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN: &#123;</div><div class="line">                <span class="comment">// New pointers take over dragging duties</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> index = ev.getActionIndex();</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> id = ev.getPointerId(index);</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> x = (<span class="keyword">int</span>) ev.getX(index);</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> y = (<span class="keyword">int</span>) ev.getY(index);</div><div class="line">                mMotionCorrection = <span class="number">0</span>;</div><div class="line">                mActivePointerId = id;</div><div class="line">                mMotionX = x;</div><div class="line">                mMotionY = y;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> motionPosition = pointToPosition(x, y);</div><div class="line">                <span class="keyword">if</span> (motionPosition &gt;= <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">// Remember where the motion event started</span></div><div class="line">                    <span class="keyword">final</span> View child = getChildAt(motionPosition - mFirstPosition);</div><div class="line">                    mMotionViewOriginalTop = child.getTop();</div><div class="line">                    mMotionPosition = motionPosition;</div><div class="line">                &#125;</div><div class="line">                mLastY = y;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mVelocityTracker != <span class="keyword">null</span>) &#123;</div><div class="line">            mVelocityTracker.addMovement(vtev);</div><div class="line">        &#125;</div><div class="line">        vtev.recycle();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>我们会发现mov操作中里面直接调用了onTouchMove这个方法，我们进去看一下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onTouchMove</span><span class="params">(MotionEvent ev, MotionEvent vtev)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mHasPerformedLongPress) &#123;</div><div class="line">            <span class="comment">// Consume all move events following a successful long press.</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> pointerIndex = ev.findPointerIndex(mActivePointerId);</div><div class="line">        <span class="keyword">if</span> (pointerIndex == -<span class="number">1</span>) &#123;</div><div class="line">            pointerIndex = <span class="number">0</span>;</div><div class="line">            mActivePointerId = ev.getPointerId(pointerIndex);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mDataChanged) &#123;</div><div class="line">            <span class="comment">// Re-sync everything if data has been changed</span></div><div class="line">            <span class="comment">// since the scroll operation can query the adapter.</span></div><div class="line">            layoutChildren();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> y = (<span class="keyword">int</span>) ev.getY(pointerIndex);</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (mTouchMode) &#123;</div><div class="line">            <span class="keyword">case</span> TOUCH_MODE_DOWN:</div><div class="line">            <span class="keyword">case</span> TOUCH_MODE_TAP:</div><div class="line">            <span class="keyword">case</span> TOUCH_MODE_DONE_WAITING:</div><div class="line">                <span class="comment">// Check if we have moved far enough that it looks more like a</span></div><div class="line">                <span class="comment">// scroll than a tap. If so, we'll enter scrolling mode.</span></div><div class="line">                <span class="keyword">if</span> (startScrollIfNeeded((<span class="keyword">int</span>) ev.getX(pointerIndex), y, vtev)) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// Otherwise, check containment within list bounds. If we're</span></div><div class="line">                <span class="comment">// outside bounds, cancel any active presses.</span></div><div class="line">                <span class="keyword">final</span> View motionView = getChildAt(mMotionPosition - mFirstPosition);</div><div class="line">                <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(pointerIndex);</div><div class="line">                <span class="keyword">if</span> (!pointInView(x, y, mTouchSlop)) &#123;</div><div class="line">                    setPressed(<span class="keyword">false</span>);</div><div class="line">                    <span class="keyword">if</span> (motionView != <span class="keyword">null</span>) &#123;</div><div class="line">                        motionView.setPressed(<span class="keyword">false</span>);</div><div class="line">                    &#125;</div><div class="line">                    removeCallbacks(mTouchMode == TOUCH_MODE_DOWN ?</div><div class="line">                            mPendingCheckForTap : mPendingCheckForLongPress);</div><div class="line">                    mTouchMode = TOUCH_MODE_DONE_WAITING;</div><div class="line">                    updateSelectorState();</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (motionView != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// Still within bounds, update the hotspot.</span></div><div class="line">                    <span class="keyword">final</span> <span class="keyword">float</span>[] point = mTmpPoint;</div><div class="line">                    point[<span class="number">0</span>] = x;</div><div class="line">                    point[<span class="number">1</span>] = y;</div><div class="line">                    transformPointToViewLocal(point, motionView);</div><div class="line">                    motionView.drawableHotspotChanged(point[<span class="number">0</span>], point[<span class="number">1</span>]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> TOUCH_MODE_SCROLL:</div><div class="line">            <span class="keyword">case</span> TOUCH_MODE_OVERSCROLL:</div><div class="line">                scrollIfNeeded((<span class="keyword">int</span>) ev.getX(pointerIndex), y, vtev);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><em>到目前为止我看的是最新的Android7.0的源码，里面很大一部分结构已经被改变，正如题目所说我是跟着郭大神的文档走的，看来到这里只能靠自己的能力了。</em></p>
<p>可以看到，这个方法里面有了一个switch语句，是根据当前的TouchMode来选择的。我看在第52行，看到一个TOUCH_MODE_SCROLL这样的一个模式，我们跟踪进入到它下面的scrollIfNeeded((int) ev.getX(pointerIndex), y, vtev)这个方法中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scrollIfNeeded</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, MotionEvent vtev)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> rawDeltaY = y - mMotionY;</div><div class="line">        <span class="keyword">int</span> scrollOffsetCorrection = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> scrollConsumedCorrection = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (mLastY == Integer.MIN_VALUE) &#123;</div><div class="line">            rawDeltaY -= mMotionCorrection;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dispatchNestedPreScroll(<span class="number">0</span>, mLastY != Integer.MIN_VALUE ? mLastY - y : -rawDeltaY,</div><div class="line">                mScrollConsumed, mScrollOffset)) &#123;</div><div class="line">            rawDeltaY += mScrollConsumed[<span class="number">1</span>];</div><div class="line">            scrollOffsetCorrection = -mScrollOffset[<span class="number">1</span>];</div><div class="line">            scrollConsumedCorrection = mScrollConsumed[<span class="number">1</span>];</div><div class="line">            <span class="keyword">if</span> (vtev != <span class="keyword">null</span>) &#123;</div><div class="line">                vtev.offsetLocation(<span class="number">0</span>, mScrollOffset[<span class="number">1</span>]);</div><div class="line">                mNestedYOffset += mScrollOffset[<span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> deltaY = rawDeltaY;</div><div class="line">        <span class="keyword">int</span> incrementalDeltaY =</div><div class="line">                mLastY != Integer.MIN_VALUE ? y - mLastY + scrollConsumedCorrection : deltaY;</div><div class="line">        <span class="keyword">int</span> lastYCorrection = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mTouchMode == TOUCH_MODE_SCROLL) &#123;</div><div class="line">            <span class="keyword">if</span> (PROFILE_SCROLLING) &#123;</div><div class="line">                <span class="keyword">if</span> (!mScrollProfilingStarted) &#123;</div><div class="line">                    Debug.startMethodTracing(<span class="string">"AbsListViewScroll"</span>);</div><div class="line">                    mScrollProfilingStarted = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mScrollStrictSpan == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// If it's non-null, we're already in a scroll.</span></div><div class="line">                mScrollStrictSpan = StrictMode.enterCriticalSpan(<span class="string">"AbsListView-scroll"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (y != mLastY) &#123;</div><div class="line">                <span class="comment">// We may be here after stopping a fling and continuing to scroll.</span></div><div class="line">                <span class="comment">// If so, we haven't disallowed intercepting touch events yet.</span></div><div class="line">                <span class="comment">// Make sure that we do so in case we're in a parent that can intercept.</span></div><div class="line">                <span class="keyword">if</span> ((mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) == <span class="number">0</span> &amp;&amp;</div><div class="line">                        Math.abs(rawDeltaY) &gt; mTouchSlop) &#123;</div><div class="line">                    <span class="keyword">final</span> ViewParent parent = getParent();</div><div class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</div><div class="line">                        parent.requestDisallowInterceptTouchEvent(<span class="keyword">true</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> motionIndex;</div><div class="line">                <span class="keyword">if</span> (mMotionPosition &gt;= <span class="number">0</span>) &#123;</div><div class="line">                    motionIndex = mMotionPosition - mFirstPosition;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// If we don't have a motion position that we can reliably track,</span></div><div class="line">                    <span class="comment">// pick something in the middle to make a best guess at things below.</span></div><div class="line">                    motionIndex = getChildCount() / <span class="number">2</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> motionViewPrevTop = <span class="number">0</span>;</div><div class="line">                View motionView = <span class="keyword">this</span>.getChildAt(motionIndex);</div><div class="line">                <span class="keyword">if</span> (motionView != <span class="keyword">null</span>) &#123;</div><div class="line">                    motionViewPrevTop = motionView.getTop();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// No need to do all this work if we're not going to move anyway</span></div><div class="line">                <span class="keyword">boolean</span> atEdge = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">if</span> (incrementalDeltaY != <span class="number">0</span>) &#123;</div><div class="line">                    atEdge = trackMotionScroll(deltaY, incrementalDeltaY);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// Check to see if we have bumped into the scroll limit</span></div><div class="line">                motionView = <span class="keyword">this</span>.getChildAt(motionIndex);</div><div class="line">                <span class="keyword">if</span> (motionView != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// Check if the top of the motion view is where it is</span></div><div class="line">                    <span class="comment">// supposed to be</span></div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> motionViewRealTop = motionView.getTop();</div><div class="line">                    <span class="keyword">if</span> (atEdge) &#123;</div><div class="line">                        <span class="comment">// Apply overscroll</span></div><div class="line"></div><div class="line">                        <span class="keyword">int</span> overscroll = -incrementalDeltaY -</div><div class="line">                                (motionViewRealTop - motionViewPrevTop);</div><div class="line">                        <span class="keyword">if</span> (dispatchNestedScroll(<span class="number">0</span>, overscroll - incrementalDeltaY, <span class="number">0</span>, overscroll,</div><div class="line">                                mScrollOffset)) &#123;</div><div class="line">                            lastYCorrection -= mScrollOffset[<span class="number">1</span>];</div><div class="line">                            <span class="keyword">if</span> (vtev != <span class="keyword">null</span>) &#123;</div><div class="line">                                vtev.offsetLocation(<span class="number">0</span>, mScrollOffset[<span class="number">1</span>]);</div><div class="line">                                mNestedYOffset += mScrollOffset[<span class="number">1</span>];</div><div class="line">                            &#125;</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="keyword">final</span> <span class="keyword">boolean</span> atOverscrollEdge = overScrollBy(<span class="number">0</span>, overscroll,</div><div class="line">                                    <span class="number">0</span>, mScrollY, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, mOverscrollDistance, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">                            <span class="keyword">if</span> (atOverscrollEdge &amp;&amp; mVelocityTracker != <span class="keyword">null</span>) &#123;</div><div class="line">                                <span class="comment">// Don't allow overfling if we're at the edge</span></div><div class="line">                                mVelocityTracker.clear();</div><div class="line">                            &#125;</div><div class="line"></div><div class="line">                            <span class="keyword">final</span> <span class="keyword">int</span> overscrollMode = getOverScrollMode();</div><div class="line">                            <span class="keyword">if</span> (overscrollMode == OVER_SCROLL_ALWAYS ||</div><div class="line">                                    (overscrollMode == OVER_SCROLL_IF_CONTENT_SCROLLS &amp;&amp;</div><div class="line">                                            !contentFits())) &#123;</div><div class="line">                                <span class="keyword">if</span> (!atOverscrollEdge) &#123;</div><div class="line">                                    mDirection = <span class="number">0</span>; <span class="comment">// Reset when entering overscroll.</span></div><div class="line">                                    mTouchMode = TOUCH_MODE_OVERSCROLL;</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">if</span> (incrementalDeltaY &gt; <span class="number">0</span>) &#123;</div><div class="line">                                    mEdgeGlowTop.onPull((<span class="keyword">float</span>) -overscroll / getHeight(),</div><div class="line">                                            (<span class="keyword">float</span>) x / getWidth());</div><div class="line">                                    <span class="keyword">if</span> (!mEdgeGlowBottom.isFinished()) &#123;</div><div class="line">                                        mEdgeGlowBottom.onRelease();</div><div class="line">                                    &#125;</div><div class="line">                                    invalidateTopGlow();</div><div class="line">                                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (incrementalDeltaY &lt; <span class="number">0</span>) &#123;</div><div class="line">                                    mEdgeGlowBottom.onPull((<span class="keyword">float</span>) overscroll / getHeight(),</div><div class="line">                                            <span class="number">1</span>.f - (<span class="keyword">float</span>) x / getWidth());</div><div class="line">                                    <span class="keyword">if</span> (!mEdgeGlowTop.isFinished()) &#123;</div><div class="line">                                        mEdgeGlowTop.onRelease();</div><div class="line">                                    &#125;</div><div class="line">                                    invalidateBottomGlow();</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    mMotionY = y + lastYCorrection + scrollOffsetCorrection;</div><div class="line">                &#125;</div><div class="line">                mLastY = y + lastYCorrection + scrollOffsetCorrection;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mTouchMode == TOUCH_MODE_OVERSCROLL) &#123;</div><div class="line">            <span class="keyword">if</span> (y != mLastY) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> oldScroll = mScrollY;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> newScroll = oldScroll - incrementalDeltaY;</div><div class="line">                <span class="keyword">int</span> newDirection = y &gt; mLastY ? <span class="number">1</span> : -<span class="number">1</span>;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (mDirection == <span class="number">0</span>) &#123;</div><div class="line">                    mDirection = newDirection;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> overScrollDistance = -incrementalDeltaY;</div><div class="line">                <span class="keyword">if</span> ((newScroll &lt; <span class="number">0</span> &amp;&amp; oldScroll &gt;= <span class="number">0</span>) || (newScroll &gt; <span class="number">0</span> &amp;&amp; oldScroll &lt;= <span class="number">0</span>)) &#123;</div><div class="line">                    overScrollDistance = -oldScroll;</div><div class="line">                    incrementalDeltaY += overScrollDistance;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    incrementalDeltaY = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (overScrollDistance != <span class="number">0</span>) &#123;</div><div class="line">                    overScrollBy(<span class="number">0</span>, overScrollDistance, <span class="number">0</span>, mScrollY, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">                            <span class="number">0</span>, mOverscrollDistance, <span class="keyword">true</span>);</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> overscrollMode = getOverScrollMode();</div><div class="line">                    <span class="keyword">if</span> (overscrollMode == OVER_SCROLL_ALWAYS ||</div><div class="line">                            (overscrollMode == OVER_SCROLL_IF_CONTENT_SCROLLS &amp;&amp;</div><div class="line">                                    !contentFits())) &#123;</div><div class="line">                        <span class="keyword">if</span> (rawDeltaY &gt; <span class="number">0</span>) &#123;</div><div class="line">                            mEdgeGlowTop.onPull((<span class="keyword">float</span>) overScrollDistance / getHeight(),</div><div class="line">                                    (<span class="keyword">float</span>) x / getWidth());</div><div class="line">                            <span class="keyword">if</span> (!mEdgeGlowBottom.isFinished()) &#123;</div><div class="line">                                mEdgeGlowBottom.onRelease();</div><div class="line">                            &#125;</div><div class="line">                            invalidateTopGlow();</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rawDeltaY &lt; <span class="number">0</span>) &#123;</div><div class="line">                            mEdgeGlowBottom.onPull((<span class="keyword">float</span>) overScrollDistance / getHeight(),</div><div class="line">                                    <span class="number">1</span>.f - (<span class="keyword">float</span>) x / getWidth());</div><div class="line">                            <span class="keyword">if</span> (!mEdgeGlowTop.isFinished()) &#123;</div><div class="line">                                mEdgeGlowTop.onRelease();</div><div class="line">                            &#125;</div><div class="line">                            invalidateBottomGlow();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (incrementalDeltaY != <span class="number">0</span>) &#123;</div><div class="line">                    <span class="comment">// Coming back to 'real' list scrolling</span></div><div class="line">                    <span class="keyword">if</span> (mScrollY != <span class="number">0</span>) &#123;</div><div class="line">                        mScrollY = <span class="number">0</span>;</div><div class="line">                        invalidateParentIfNeeded();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    trackMotionScroll(incrementalDeltaY, incrementalDeltaY);</div><div class="line"></div><div class="line">                    mTouchMode = TOUCH_MODE_SCROLL;</div><div class="line"></div><div class="line">                    <span class="comment">// We did not scroll the full amount. Treat this essentially like the</span></div><div class="line">                    <span class="comment">// start of a new touch scroll</span></div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> motionPosition = findClosestMotionRow(y);</div><div class="line"></div><div class="line">                    mMotionCorrection = <span class="number">0</span>;</div><div class="line">                    View motionView = getChildAt(motionPosition - mFirstPosition);</div><div class="line">                    mMotionViewOriginalTop = motionView != <span class="keyword">null</span> ? motionView.getTop() : <span class="number">0</span>;</div><div class="line">                    mMotionY =  y + scrollOffsetCorrection;</div><div class="line">                    mMotionPosition = motionPosition;</div><div class="line">                &#125;</div><div class="line">                mLastY = y + lastYCorrection + scrollOffsetCorrection;</div><div class="line">                mDirection = newDirection;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>代码依然不短，我们往里面看在66行处发现trackMotionScroll(deltaY, incrementalDeltaY)，好吧我们找回了正轨~。名字的意思是跟踪滑动轨迹，我们进去感受一下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">trackMotionScroll</span><span class="params">(<span class="keyword">int</span> deltaY, <span class="keyword">int</span> incrementalDeltaY)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = getChildCount();</div><div class="line">        <span class="keyword">if</span> (childCount == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> firstTop = getChildAt(<span class="number">0</span>).getTop();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> lastBottom = getChildAt(childCount - <span class="number">1</span>).getBottom();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Rect listPadding = mListPadding;</div><div class="line"></div><div class="line">        <span class="comment">// "effective padding" In this case is the amount of padding that affects</span></div><div class="line">        <span class="comment">// how much space should not be filled by items. If we don't clip to padding</span></div><div class="line">        <span class="comment">// there is no effective padding.</span></div><div class="line">        <span class="keyword">int</span> effectivePaddingTop = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> effectivePaddingBottom = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> ((mGroupFlags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) &#123;</div><div class="line">            effectivePaddingTop = listPadding.top;</div><div class="line">            effectivePaddingBottom = listPadding.bottom;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">         <span class="comment">// FIXME account for grid vertical spacing too?</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> spaceAbove = effectivePaddingTop - firstTop;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> end = getHeight() - effectivePaddingBottom;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> spaceBelow = lastBottom - end;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> height = getHeight() - mPaddingBottom - mPaddingTop;</div><div class="line">        <span class="keyword">if</span> (deltaY &lt; <span class="number">0</span>) &#123;</div><div class="line">            deltaY = Math.max(-(height - <span class="number">1</span>), deltaY);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            deltaY = Math.min(height - <span class="number">1</span>, deltaY);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (incrementalDeltaY &lt; <span class="number">0</span>) &#123;</div><div class="line">            incrementalDeltaY = Math.max(-(height - <span class="number">1</span>), incrementalDeltaY);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            incrementalDeltaY = Math.min(height - <span class="number">1</span>, incrementalDeltaY);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> firstPosition = mFirstPosition;</div><div class="line"></div><div class="line">        <span class="comment">// Update our guesses for where the first and last views are</span></div><div class="line">        <span class="keyword">if</span> (firstPosition == <span class="number">0</span>) &#123;</div><div class="line">            mFirstPositionDistanceGuess = firstTop - listPadding.top;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mFirstPositionDistanceGuess += incrementalDeltaY;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (firstPosition + childCount == mItemCount) &#123;</div><div class="line">            mLastPositionDistanceGuess = lastBottom + listPadding.bottom;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mLastPositionDistanceGuess += incrementalDeltaY;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> cannotScrollDown = (firstPosition == <span class="number">0</span> &amp;&amp;</div><div class="line">                firstTop &gt;= listPadding.top &amp;&amp; incrementalDeltaY &gt;= <span class="number">0</span>);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> cannotScrollUp = (firstPosition + childCount == mItemCount &amp;&amp;</div><div class="line">                lastBottom &lt;= getHeight() - listPadding.bottom &amp;&amp; incrementalDeltaY &lt;= <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (cannotScrollDown || cannotScrollUp) &#123;</div><div class="line">            <span class="keyword">return</span> incrementalDeltaY != <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> down = incrementalDeltaY &lt; <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> inTouchMode = isInTouchMode();</div><div class="line">        <span class="keyword">if</span> (inTouchMode) &#123;</div><div class="line">            hideSelector();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> headerViewsCount = getHeaderViewsCount();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> footerViewsStart = mItemCount - getFooterViewsCount();</div><div class="line"></div><div class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (down) &#123;</div><div class="line">            <span class="keyword">int</span> top = -incrementalDeltaY;</div><div class="line">            <span class="keyword">if</span> ((mGroupFlags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) &#123;</div><div class="line">                top += listPadding.top;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">                <span class="keyword">final</span> View child = getChildAt(i);</div><div class="line">                <span class="keyword">if</span> (child.getBottom() &gt;= top) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    count++;</div><div class="line">                    <span class="keyword">int</span> position = firstPosition + i;</div><div class="line">                    <span class="keyword">if</span> (position &gt;= headerViewsCount &amp;&amp; position &lt; footerViewsStart) &#123;</div><div class="line">                        <span class="comment">// The view will be rebound to new data, clear any</span></div><div class="line">                        <span class="comment">// system-managed transient state.</span></div><div class="line">                        child.clearAccessibilityFocus();</div><div class="line">                        mRecycler.addScrapView(child, position);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> bottom = getHeight() - incrementalDeltaY;</div><div class="line">            <span class="keyword">if</span> ((mGroupFlags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) &#123;</div><div class="line">                bottom -= listPadding.bottom;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = childCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">                <span class="keyword">final</span> View child = getChildAt(i);</div><div class="line">                <span class="keyword">if</span> (child.getTop() &lt;= bottom) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    start = i;</div><div class="line">                    count++;</div><div class="line">                    <span class="keyword">int</span> position = firstPosition + i;</div><div class="line">                    <span class="keyword">if</span> (position &gt;= headerViewsCount &amp;&amp; position &lt; footerViewsStart) &#123;</div><div class="line">                        <span class="comment">// The view will be rebound to new data, clear any</span></div><div class="line">                        <span class="comment">// system-managed transient state.</span></div><div class="line">                        child.clearAccessibilityFocus();</div><div class="line">                        mRecycler.addScrapView(child, position);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mMotionViewNewTop = mMotionViewOriginalTop + deltaY;</div><div class="line"></div><div class="line">        mBlockLayoutRequests = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</div><div class="line">            detachViewsFromParent(start, count);</div><div class="line">            mRecycler.removeSkippedScrap();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// invalidate before moving the children to avoid unnecessary invalidate</span></div><div class="line">        <span class="comment">// calls to bubble up from the children all the way to the top</span></div><div class="line">        <span class="keyword">if</span> (!awakenScrollBars()) &#123;</div><div class="line">           invalidate();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        offsetChildrenTopAndBottom(incrementalDeltaY);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (down) &#123;</div><div class="line">            mFirstPosition += count;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> absIncrementalDeltaY = Math.abs(incrementalDeltaY);</div><div class="line">        <span class="keyword">if</span> (spaceAbove &lt; absIncrementalDeltaY || spaceBelow &lt; absIncrementalDeltaY) &#123;</div><div class="line">            fillGap(down);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mRecycler.fullyDetachScrapViews();</div><div class="line">        <span class="keyword">if</span> (!inTouchMode &amp;&amp; mSelectedPosition != INVALID_POSITION) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childIndex = mSelectedPosition - mFirstPosition;</div><div class="line">            <span class="keyword">if</span> (childIndex &gt;= <span class="number">0</span> &amp;&amp; childIndex &lt; getChildCount()) &#123;</div><div class="line">                positionSelector(mSelectedPosition, getChildAt(childIndex));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mSelectorPosition != INVALID_POSITION) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> childIndex = mSelectorPosition - mFirstPosition;</div><div class="line">            <span class="keyword">if</span> (childIndex &gt;= <span class="number">0</span> &amp;&amp; childIndex &lt; getChildCount()) &#123;</div><div class="line">                positionSelector(INVALID_POSITION, getChildAt(childIndex));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mSelectorRect.setEmpty();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mBlockLayoutRequests = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        invokeOnItemScrollListener();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个方法接收两个参数，deltaY表示从手指按下时的位置到当前手指位置的距离，incrementalDeltaY则表示据上次触发event事件手指在Y方向上位置的改变量，那么其实我们就可以通过incrementalDeltaY的正负值情况来判断用户是向上还是向下滑动的了。如第34行代码所示，如果incrementalDeltaY小于0，说明是向下滑动，否则就是向上滑动。</p>
<p>下面将会进行一个边界值检测的过程，可以看到，从第76行开始，当ListView向下滑动的时候，就会进入一个for循环当中，从上往下依次获取子View，第47行当中，如果该子View的bottom值已经小于top值了，就说明这个子View已经移出屏幕了，所以会调用RecycleBin的addScrapView()方法将这个View加入到废弃缓存当中，并将count计数器加1，计数器用于记录有多少个子View被移出了屏幕。那么如果是ListView向上滑动的话，其实过程是基本相同的，只不过变成了从下往上依次获取子View，然后判断该子View的top值是不是大于bottom值了，如果大于的话说明子View已经移出了屏幕，同样把它加入到废弃缓存中，并将计数器加1。<br>紧接着当着判断结束之后再134行会有offsetChildrenTopAndBottom(incrementalDeltaY)，并将incrementalDeltaY作为参数传入，这个方法的作用是让ListView中所有的子View都按照传入的参数值进行相应的偏移，这样就实现了随着手指的拖动，ListView的内容也会随着滚动的效果。</p>
<p>在第141行最后一个View被移除了屏幕，就会调用fillGap()方法的，那么我们可以认为这个方法就是来加载屏幕外的数据的</p>
<p>fillGap()是一个抽象方法，那么我们马上意识到，它的具体实现肯定是在ListView中完成的了。回到ListView当中，fillGap()方法的代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillGap</span><span class="params">(<span class="keyword">boolean</span> down)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = getChildCount();</div><div class="line">        <span class="keyword">if</span> (down) &#123;</div><div class="line">            <span class="keyword">int</span> paddingTop = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> ((mGroupFlags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) &#123;</div><div class="line">                paddingTop = getListPaddingTop();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> startOffset = count &gt; <span class="number">0</span> ? getChildAt(count - <span class="number">1</span>).getBottom() + mDividerHeight :</div><div class="line">                    paddingTop;</div><div class="line">            fillDown(mFirstPosition + count, startOffset);</div><div class="line">            correctTooHigh(getChildCount());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> paddingBottom = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> ((mGroupFlags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) &#123;</div><div class="line">                paddingBottom = getListPaddingBottom();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> startOffset = count &gt; <span class="number">0</span> ? getChildAt(<span class="number">0</span>).getTop() - mDividerHeight :</div><div class="line">                    getHeight() - paddingBottom;</div><div class="line">            fillUp(mFirstPosition - <span class="number">1</span>, startOffset);</div><div class="line">            correctTooLow(getChildCount());</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>down参数用于表示ListView是向下滑动还是向上滑动的，可以看到，如果是向下滑动的话就会调用fillDown()方法，而如果是向上滑动的话就会调用fillUp()方法。那么这两个方法我们都已经非常熟悉了，内部都是通过一个循环来去对ListView进行填充，所以这两个方法我们就不看了，但是填充ListView会通过调用makeAndAddView()方法来完成，又是makeAndAddView()方法，但这次的逻辑再次不同了，所以我们还是回到这个方法瞧一瞧：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> View <span class="title">makeAndAddView</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">int</span> y, <span class="keyword">boolean</span> flow, <span class="keyword">int</span> childrenLeft,  </span></span></div><div class="line">        <span class="keyword">boolean</span> selected) &#123;  </div><div class="line">    View child;  </div><div class="line">    <span class="keyword">if</span> (!mDataChanged) &#123;  </div><div class="line">        <span class="comment">// Try to use an exsiting view for this position  </span></div><div class="line">        child = mRecycler.getActiveView(position);  </div><div class="line">        <span class="keyword">if</span> (child != <span class="keyword">null</span>) &#123;  </div><div class="line">            <span class="comment">// Found it -- we're using an existing child  </span></div><div class="line">            <span class="comment">// This just needs to be positioned  </span></div><div class="line">            setupChild(child, position, y, flow, childrenLeft, selected, <span class="keyword">true</span>);  </div><div class="line">            <span class="keyword">return</span> child;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="comment">// Make a new view for this position, or convert an unused view if possible  </span></div><div class="line">    child = obtainView(position, mIsScrap);  </div><div class="line">    <span class="comment">// This needs to be positioned and measured  </span></div><div class="line">    setupChild(child, position, y, flow, childrenLeft, selected, mIsScrap[<span class="number">0</span>]);  </div><div class="line">    <span class="keyword">return</span> child;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不管怎么说，这里首先仍然是会尝试调用RecycleBin的getActiveView()方法来获取子布局，只不过肯定是获取不到的了，因为在第二次Layout过程中我们已经从mActiveViews中获取过了数据，而根据RecycleBin的机制，mActiveViews是不能够重复利用的，因此这里返回的值肯定是null,我们继续走到了obtainView中，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function">View <span class="title">obtainView</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">boolean</span>[] isScrap)</span> </span>&#123;  </div><div class="line">    isScrap[<span class="number">0</span>] = <span class="keyword">false</span>;  </div><div class="line">    View scrapView;  </div><div class="line">    scrapView = mRecycler.getScrapView(position);  </div><div class="line">    View child;  </div><div class="line">    <span class="keyword">if</span> (scrapView != <span class="keyword">null</span>) &#123;  </div><div class="line">        child = mAdapter.getView(position, scrapView, <span class="keyword">this</span>);  </div><div class="line">        <span class="keyword">if</span> (child != scrapView) &#123;  </div><div class="line">            mRecycler.addScrapView(scrapView);  </div><div class="line">            <span class="keyword">if</span> (mCacheColorHint != <span class="number">0</span>) &#123;  </div><div class="line">                child.setDrawingCacheBackgroundColor(mCacheColorHint);  </div><div class="line">            &#125;  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            isScrap[<span class="number">0</span>] = <span class="keyword">true</span>;  </div><div class="line">            dispatchFinishTemporaryDetach(child);  </div><div class="line">        &#125;  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;  </div><div class="line">        child = mAdapter.getView(position, <span class="keyword">null</span>, <span class="keyword">this</span>);  </div><div class="line">        <span class="keyword">if</span> (mCacheColorHint != <span class="number">0</span>) &#123;  </div><div class="line">            child.setDrawingCacheBackgroundColor(mCacheColorHint);  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> child;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在第四行我们会主动请求获取一个ScrapView，这个时候我们是有的，我们进入第七行，getView方法中直接将ScrapView传入，看来这个就是我们在getView中复用的convertView了。</p>
<p>到此ListView分析完毕，尽管是跟着郭神的博客走，但我是先独自很认真的看了一遍，再一个人尝试着独立分析，当中难免有不会的地方，然后再看博客，就会豁然开朗，理解更上一层楼了。写了这么多尤其还是自己主观的“独立”完成了，虽然没有把源码彻底看完，但是收获的东西真的不是一般的多，不仅收获到知识，更多的知道了下次该如何看源码，这个样的文章我还会出几篇，等我轻车熟路了，就说不写分析过程，直接写自己的探索结果了。源码不是一遍就可以看懂的，要反复认证的看才可以，毕竟是别人的东西，深得要领是有一定难度的。</p>
<p>说一下感受，看源码真是一个体力加脑力的活，你的专注力要持续的跟上，才可以见到庐山真面目啊！！！很佩服那些看源码的，真是真功夫！</p>
<p>最后附上参照博客地址<a href="http://blog.csdn.net/guolin_blog/article/details/44996879" target="_blank" rel="external"> Android ListView工作原理完全解析，带你从源码的角度彻底理解</a></p>
]]></content>
      
        <categories>
            
            <category> 2017-3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随笔（2）]]></title>
      <url>http://yoursite.com/2017/03/11/%E9%9A%8F%E7%AC%94%EF%BC%882%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>我总是喜欢想一些乱七八糟的东西，很多时候都会有一些其他人认为不可思议的行动。我总是在尝试着各种各样我没有接触过的事情，虽然有些事情会很恐怖、会很危险，但正由于这样的事情，让我发现了各种各样的世界，让我看见了在我眼中真正的世界（好吧，这句话虽然有些浮夸，但确实是最真实的想法），渐渐的我无比热爱自己的生活。</p>
<p>也不知道什么时候，我一个大老爷们有些迷上了写字这个东西。也不知道为什么，对于自己的新想法、新思路，总有一种冲动，在笔记本上记录一下它的发展过程。交到一个真正的朋友，我更愿意用文字来和他沟通。在学习一些新东西的时候，总会在一个时间段之后写篇文档总结一下，我总是提倡共同前进的伙伴也一块来做，但很少有人拿这个东西当回事，让它一直做下去。生活上能用来文字处理的事情，我都不太愿意用其他方式。我都有点认为只有文字才是人类最究极的沟通方式。</p>
<p>创建一个属于自己的博客，在上面把自己写过的文章部署上去，对于我来说，这种方式恰到好处，自己平时乱七八糟写的东西大都不用在电脑里面等着被遗忘，最终丢入回收站的厄运。偶尔没意思了，也可以稍微看一下，只能说回头看自己的感觉很舒服，很惬意，至少我还能知道我做了一些什么东西，当然前提是你一直在努力的往前走。在搭建自己博客的时候，我有意的没有加入让搜索引擎可以检索到我的页面，或许对于一个程序员来说，闭门造轮子是一件不好的事情，大概可能主要是对于自己目前的技术还不是太满意，毕竟人们总是喜欢把自己竟可能好的一面展现给别人看，未来等着时机成熟了肯定会转到其他平台的。</p>
<p>我目前还是一名大二学生，学校老师很开明，对于有能力独自学习的同学给予充分的自由，好吧（继续说就有点夸自己的意思了），那个同学就是我，不过对此我从不认为这是我应该得到的，只能感激老师们的善良及其对我的信任。我现在课程很少，也就一节体育课，还有一门数学课（这个是我主观想去的），我有很多的时间去独自管理，当然在上学期我也旷了很多课，只是没有此刻如此清爽的感觉，和上学期遇到的问题一样，时间安排方面有些不的当的地方。总是在技术方面死命的往前走，虽然也意识到要放缓脚步，让知识积淀一些，基础牢靠了这样走的才会稳当。对于这件事情上感觉自己已经控制不住了的样子，当然本源还在自己认识不到位导致的。事情的转机就是现在，有了博客之后，主观上面就愿意去在上面写一些东西，更愿意把自己的知识拿出来放上去，弄成一个专栏会很有成就感。好处简直太多，坏处的话也就只能说更加辛苦了一下，坚持下去总是对自己没有坏处的。<br>上面写的让我回想起某广告的钙片，自从吃了它，腰不酸了，腿不疼了，一口气上六楼楼梯，也不累了。这个钙片我好像找到了。 d=====(￣▽￣*)b </p>
<p>先给自己制定一个小目标———一个月不断更。上传的内容主要还是技术性的为主，像这个样乱七八糟的就当缓解心情了。</p>
<p>本来还打算解释一下我博客的标题为什么是JianRan的，没想到扯了这么多其他东西的，不过这也符合，这个专栏的宗旨嘛~，乱七八糟随便写。</p>
]]></content>
      
        <categories>
            
            <category> 2017-3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 乱七八糟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[栈与队列（二）]]></title>
      <url>http://yoursite.com/2017/03/10/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>承接上文<a href="https://jinfangzhang.github.io/2017/03/08/栈与队列（一）/" target="_blank" rel="external">栈与队列（一）</a>，上文我们说了有四个方面的应用，还差几个，这篇给彻底补全</p>
<hr>
<h2 id="栈混洗"><a href="#栈混洗" class="headerlink" title="栈混洗"></a>栈混洗</h2><p>什么是栈混洗？<br>有三个栈，分别是A、B、S, 栈A中有a1– an的若干元素，a1在栈顶，an在栈顶、B和S都是空栈。<br>在这里我们只允许，将A的顶元素弹出并压入S,或将S的顶元素弹出压入B。<br>若经过一系列以上操作，A中元素全部转入B中，则称之为A的一个栈混洗（stack permutation）<br><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdi078c54ij30gs03bt98" alt=""> 中间的栈为S。<br>在这里我们把<strong>[</strong>an ,a(n-1)….,a1<strong>&gt;</strong>,看做一个栈内的所有元素，其中”<strong>[</strong>“代表栈顶，”<strong>&gt;</strong>“代表栈顶。<br>同一个输入序列，可以有多种栈混洗。就拿上图来说。<strong>&lt;</strong>1，2，3<strong>]</strong>的输入列可以有<strong>[</strong> 1，2，3<strong>&gt;</strong>,<br><strong>[</strong> 3，2，1<strong>&gt;</strong>等多种栈混洗，只要遵循上述规则。</p>
<p>那么问题就来了，一个长度为n的序列可以有多少种栈混洗？最多不可能多于$n!$,好吧,我看了一些资料，知道最后的结果是为<br>$$\frac {2n!} {(n+1)!n!}$$<br>这个数也叫做卡特兰数。感觉分析如何得出的没有什么意义，在此我们先忽略导出步骤。我们把 “先前的栈” 的$3$带入公式，发现我们共有5种栈混洗，而 $3!$ 为6,我们在这三个数的全排列中有一种栈混洗是无法获得的那就<strong>[</strong>3，1，2<strong>&gt;</strong></p>
<p>那么问题又来了，既然一个长度为n的序列的栈混洗数量不是$n!$，那么我们如何来鉴别这个栈混洗是否由之早先的栈序列获得的呢？<br>答案在其实上面我们已经给出。只要当前的栈混洗不存在<strong>[···</strong>J，···I，···K，···<strong>&gt;</strong>(之前的序列是···I,···J,···K···)，这样的序列那么我们的的栈混洗就是存在的</p>
<p>与我们之前说的括号匹配问题，其实实属同一种东西。在括号匹配的时候，对于我们可见的只有中间的栈S而已，我们有多少push操作，对应的就有多少pop操作，我们的栈中只存左括号，当栈外有右括号的时候我们就弹栈。换句话说我们有多少种该情况下的栈混洗我们就有多少种括号匹配的数量。</p>
<h2 id="中缀表达式（延迟缓冲）"><a href="#中缀表达式（延迟缓冲）" class="headerlink" title="中缀表达式（延迟缓冲）"></a>中缀表达式（延迟缓冲）</h2><p>重新提一下延迟缓冲的概念：线性扫描算法中，在预读足够长之后，方能确定可处理的前缀</p>
<p>中缀表达式就是咱们平时算术式，举一个例子：3<em>32+9</em>（3+1），这个就是所谓的中缀表达式。那么我们的目的就是用算法的形式来计算这样的式子。对于如此的简单的算式对于咱们人类来说只能说不要太简单了，我们知道”+，-，*，/“的优先级，我们知道括号有强制运算的作用。当看到一个算式的时候，我们可以随意以各种方式来计算，对于死板的计算机来说就有些复杂了。</p>
<p>初次看到如此算式，我们都不清楚如何来计算，计算机不像人类，对于它来讲，从左到右顺序扫描，慢慢求解，对于它是简单的，也是我们容易思考得到的。读取的方式有了，我们还欠缺的是，不知道此时看到的加号是否应该执行，可能它后面就有个“*”号或者“/’。那么我们只有在依次扫描过程中，先将不确定的留着，等着我们后面扫描，知道我们认为这个地方肯定是这么计算之后，我们才计算。</p>
<p>拿这个例子来说3<em>32+9</em>（3+1）<br>从左到右依次扫描，扫描到“3”，发现是数字，我们存起来，因为一个数字不可以单独计算（除非这个算式只有一个数字的）；接下来我们发现是“<em>”，没有条件运算；“3” ，不满足条件运算；“2”，还是数字！应该存入的是32而不是单独的3和2了，依然不满足条件运算；“+”，这个比之前“ \</em> ”的优先级低，说明可以运算，将运算结果96存入，把运算过的数据撤销；“+”，不可运算，存入；“9”，不可运算，存入；“（”，不满足条件，存入；“3”，不满足条件，存入；“+”，不满足条件，存入；”1“，不满足条件，存入；”）“，满足条件，计算$ 3+1$，将参加运算的数据撤销，将4存入，到现在为止，我们处理到”）“，这个地方的数据还没有处理，接下来正要处理的右括号和已经存入的左括号匹配，这两个撤销，我们到现在存入的数据为$96+9<em>4$,我们现在算式已经处理完成了，可以确保“ \</em> ”可以运算，计算$9*4$，将处理过的数据撤销，将36存入；好吧现在里面只有两个数的加法$96+36$，将运算结果132存入。到此我们计算完毕。</p>
<p>在这个过程当中我们发现，可能我在上面判断是否有条件计算的过程没有说，这个过程其实就是比较两个算符的优先级，当是后者的优先级高时，我们进行存入操作，当小于后者时，我们认为可以计算了，所以我们欠缺的其实是一张优先级表而已。大部分运算符只能处理两个数据，“！”等是个特例，不过我们都是可以确认我们的计算数据个数的。而且我们发现，在处理过程当中符号和数据应该分开存储更加清爽，同时也方便了很多。当然存储数据的地方是栈，我们细想起来，我们的操作不就是<strong>压栈</strong>和<strong>弹栈</strong>两种操作吗？存入操作就是在栈顶push，要取的数据也在栈顶。我们算法思路已经清晰。接下来就是算法具体思路如下：<br><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdi09c9csuj30yf0kvwz9" alt=""><br>这是运算符优先级表。<br><img src="http://ww1.sinaimg.cn/large/006o5OgAly1fdi0abrn0vj315w0mc1j1" alt=""></p>
<h2 id="栈式运算"><a href="#栈式运算" class="headerlink" title="栈式运算"></a>栈式运算</h2><p><em>其实这个标题和中缀表达式是连着的。</em></p>
<p>我们对于上面计算方式，其实也是可以改进的，为什么我们要识别符号的优先级呢？为什么不能见到算符算就好了，对于这样的需求，我们伟大的科学家已经解决！ 解决方案就是先把算式转换成逆波兰表达式。<br>具体步骤，我们依然以上面的算式为例。<br><strong>起始（1）:</strong>3*32+9*（3+1）<br><strong>（2）:</strong>((3*32)+(9*(3+1)))—&gt;能加多少括号就加多少括号<br><strong>（3）:</strong>((3,32)*(9 (3,1)+)*)+   —&gt;把符号移到对应括号的右边<br><strong>（4）完成：</strong>$3,32,*9,3,1+*+<br>然后使用中缀表达式的解法来解，即可</p>
]]></content>
      
        <categories>
            
            <category> 2017-3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[汇编语言基础（一）]]></title>
      <url>http://yoursite.com/2017/03/09/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<hr>
<p>因为某些课程的需要，并且学校还不会开设这门课程，那么只好自己动手丰衣足食了<br>以下内容仅仅是基础当中的基础</p>
<hr>
<h2 id="指令和数据"><a href="#指令和数据" class="headerlink" title="指令和数据"></a>指令和数据</h2><p>大家都清楚计算机里面的数据只有两种形式0和1。计算机是由电路组成的，电路只有开关两种状态，存储信息同样也只要高电平和低电平两种表示状态。从人理解计算机的角度来讲，计算机里面的信息分为两种，一种是命令，一种是数据，我们可以通过命令对数据进行操纵。但是对于计算机来说，不过是命令还是数据其本质都是0和1，也就是信息。关键就看计算机怎么看待这个信息了。<br>1000100111011000 -&gt;89D8H（数据）<br>1000100111011000 -&gt;mov ax,bx（程序）</p>
<p>对于汇编语言来说，他是最接近底层的语言，仅仅封装了一些助记符。对于机器来说，不同类型的机器，可能拥有不一样的汇编语言。所以我们此刻讲到的汇编是以8086CPU来讲的。</p>
<h2 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h2><p>存储器被划分为若干个存储单元，每个存储单元从0开始顺序编号，例如有128个存储单元，编号从0~127.</p>
<p>那么一个存储单元能存储多少信息呢？我们知道计算机的最小单位是bit，也就是一个二进制位。8个bit组成一个Byte，即8个二进制位。一个存储存储器有128个存储单元，那么就可以存储128 Byte。</p>
<h2 id="CPU对存储器的读写"><a href="#CPU对存储器的读写" class="headerlink" title="CPU对存储器的读写"></a>CPU对存储器的读写</h2><p>CPU要从内容中读数据，首先要指定存储单元的地址，另外，在一台计算机当中，可不只有存储器这一种器件。CPU还要在读写数据时还要指明，他要对哪个器件进行操作，进行哪种操作，是从中读数据还是取数据。可见，CPU要想进行数据的读写，必须和外部器件，进行下面三类信息的交互<br>· 存储单元的地址（地址信息）<br>· 器件的选择，读或写的命令（控制信息）<br>· 读或写的数据（数据信息）<br>这三种信息是通过三类导线进行连接的。地址总线、控制总线、数据总线。</p>
<p>举一个例子，CPU从3号存储单元中读取数据的过程<br>1）CPU通过地址线将<strong>地址信息3</strong>发出<br>2）CPU通过控制线发出内存读命令，选中存储器芯片，并通知它，将要从中读取数据。<br>3）存储器将3号单元中的数据8通过数据线送入CPU</p>
<p>每个CPU芯片都有许多管脚，也可以说，这些管教引出总线。一个CPU可以引出3种总线，这三种总线宽度标志着这个CPU的不同方面的性能<br>·地址总线的宽度决定了CPU的寻址能力<br>·数据总线的宽度决定CPU与其他器件进行数据传送时的一次数据传送量<br>·控制总线的宽度决定CPU对系统其他器件的控制能力。</p>
]]></content>
      
        <categories>
            
            <category> 2017-3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 汇编语言基础 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[栈与队列（一）]]></title>
      <url>http://yoursite.com/2017/03/08/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><em>今天开始新一部分的内容&lt;数据结构&gt;，因为博客在我学习数据结构期间才搭建好，所以内容方面可能断断续续的，不过这些我以后都会调整好的</em><br>（这个本来是昨天要提交的，无奈太晚只能留到明天，保证没有下次了）</p>
<hr>
<p><em>今天开始新一部分的内容&lt;数据结构&gt;，因为博客在我学习数据结构期间才搭建好，所以内容方面可能断断续续的，不过这些我以后都会调整好的</em><br>（这个本来是昨天要提交的，无奈太晚只能留到明天，保证没有下次了）</p>
<hr>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p><strong>栈的特点</strong>：是先进后出（FILO），而且每一次出去（弹栈）的元素或者每一次进入（压栈）的元素都只能对栈顶元素进行操作。（好吧在这里本来想插入图片的，先略过这个东西）</p>
<p>既然研究数据结构本身会提供一些抽象的接口便于使用</p>
<ol>
<li>push(): 压栈</li>
<li>pop():  弹栈</li>
<li>top():  在不弹栈的基础上获取栈顶元素内容<br>因为我们的栈是可以基于向量或者链表实现的，所以一些基本方法，如size()、empty()以及其他开放的接口均直接沿用</li>
</ol>
<p>到以上算是栈的特点，它的输入输出数据的规则和一些暴露在外部接口。</p>
<p>接下来我们来说说，根据栈这种FILO的原则有哪些应用呢？<br>总的来说可以分为四大类：<br>· 逆序输出(conversion)：输出次序与处理过程颠倒；递归深度和输出长度不容易预支<br>· 递归嵌套(stack permutation +parenthesis)：具有自相似性的问题可递归描述，但分支位置和嵌套深度不固定<br>· 延迟计算(evaluation)：线性扫描算法模式中，在预读足够长之后，方能确定可处理的前缀<br>· 栈式计算(RPN)：基于栈结构的特定计算模式</p>
<ol>
<li><p>进制转换（逆序输出）<br>对于一个任意十进制的数字，如果想转换成其他进制，只需每一次除以进制位数，取余，最终被除数为零停止，然后以逆序的形式读出，这个就是该进制下的这个数字的对应表示。具体思想我以上已经表述清楚，但是很多时候大家会求出来的是一个正序的数，而我们要的是逆序。对于这样一个问题，我们请用栈来解决问题<br>算法实现：</p>
<blockquote>
<pre><code>void convert(Stck&lt;char&gt; &amp;S,int n, int base){
    static char digit[]={&apos;0&apos;,&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;,&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;,&apos;F&apos;};
    //常用的进制都是十进制的，这是为了提交数据表示能力
    while(n&gt;0){
        s.push(digit[n%base]);//余数入栈，到时候只需要一次弹栈即可以获得相对应的进制
        n/=base;//n更新为其对base的除商
    }
}
</code></pre></blockquote>
</li>
<li><p>括号匹配（递归嵌套）</p>
<p>我们乍一看貌似没有什么思路，咱们可以慢慢来思考，首先对于一个如此的算式“(（2+3）+（2+3）+（2+5））”，咱先把一些不必要的东西去除，只留下括号，“（（）（）（））”，主要为了突出问题的本质。我们从最左边开始，依次的深入，我们会发现，最里层的括号，左边括号紧挨着的 就是他的右半边括号，然后我们可以忽略这对匹配好的括号，我们依次向外递推，每向外推出一层，就会有一对括号匹配，直到匹配所有。那我怎么去使用栈？，从左往右依次遍历括号，遇见一个左括号就进行压栈，然后这样我们逐步的就到了算式的“最底层”,然后遇见一个右括号就进行弹栈，遇见一个就进行弹栈，最终当栈里面没有元素了的同时算式里面的括号已经没有了，现在我们可以说这个算式括号匹配的：<br>依照我们的思路算法不难写出，以下是算法实现：</p>
<blockquote>
<pre><code>bool paren(char exp[],int lo,int hi){
    Stack&lt;char&gt; S; //我们使用栈进行记录
    for(int i = lo; i&lt; hi;i++)
        if(&apos;(&apos;==exp[i]) S.push(exp[i]);//遇左括号：则进栈
        else if(！S.empty())S.pop;//遇到右括号，栈非空弹栈
        else return false;//否则（遇到右括号时已空），不匹配
    return S.empty;//最终，栈空当且仅当匹配

}
</code></pre></blockquote>
</li>
</ol>
<p>反思一下，可能会注意到，我们完全可以不使用栈，而仅使用计数器（单纯靠数字）就可以完成。但这个真的可行吗？<br>答案是不可以的。</p>
<p>单纯的靠左括号和右括号来识别而忽略括号的类型，这样做显然不可以，我们不仅仅只有小括号，我们还有中括号，还有大括号等等。我们在弹栈的同时，还要进行括号类型的匹配。</p>
]]></content>
      
        <categories>
            
            <category> 2017-3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java(一)]]></title>
      <url>http://yoursite.com/2017/03/07/Java-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>经典真是需要反复阅读，反复感受才可以</p>
<hr>
<p><em>在这里我会把之前看过但是没有意识到，或者自己不能理解，且十分有价值的东西罗列</em></p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ol>
<li><p>万物皆对象<br>世界上任何东西都可以被当作为对象，对于建立对象这个过程，叫做抽象，把事物从物质世界给提取出来，将这件事情的关键信息拿出来，然后对于提取的东西进行分装之后就成了对象。</p>
</li>
<li><p>程序是对象的集合，它们通过发送消息来告知彼此要做的<br>更具体来说，可以把信息想象成为特定对象的方法和调用请求。就向人与人之间交流一样，每个人都可以看做一个对象，我们通过用语言这种信息来进行彼此的交流。</p>
</li>
<li><p>每个对象都有自己的存储（有其他对象所构成的存储）<br>换句话说，就是允许对象里面有对象，不过想想也对，万物皆对象，把一件事物一些必要信息提取出来，这个信息从本质上来说就是对象。</p>
</li>
<li><p>每个对象都拥有类型<br>每个对象都有属于他的类别，人和狗都属于动物，人、狗、石头都属于物质。世界上所有的东西最终都可以归为一类。就好像Java中所有对象都自动继承Object类一样。</p>
</li>
<li><p>某一特定类型的所有对象都可以接受同样的信息<br>每一种中生物之间，都用彼此想通的语言作为交流工具</p>
</li>
</ol>
<p>说来说去面向对象的语言、就好像一个虚拟但又完整的世界</p>
<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>每一个对象都有每一个对象的功能，每个对象都能提供一种“服务”</p>
<p>在面向对象语言中，封装的思想随时随地的体现着<br>既然是说封装，对象就能好比一个人，对于一个人来讲肯定有些愿意提供给外部进行使用的“功能”，也有一些不愿意对外部使用的“功能”，而且其中还有一部分功能只愿意在某些私密的场合。基于这种解释，对于权限的使用就大致清楚了，private可能是谁都不愿意说的小秘密或者是自己在做某一些事情当中一些独到的地方，这类的信息只允许自己查阅，public相当于自己的工作技能差不多，在工地上我可以向外界提供搬砖这个功能。protected和包权限更像是只愿意在某个特定的环境下才愿意拿出来的。</p>
<p>从纯服务角度来说，对于客户，我只需要你的服务，客户并不需要知道这个服务里面的具体实现细节，对于客户来讲，这些细节还存在一定的干扰性，而且是根本没有意义的一些东西，那么对于一项好的服务来说，客户需要什么就提供什么，不要把其他乱七八糟加进来，做好相应的封装，只提供客户需要的信息。</p>
<p>当然对于private、public、protected、默认权限 来说解释各种各样，但是无疑是再次封装<br> （对于语言的基本认识大概如此）</p>
<hr>
<h2 id="绑定、静态绑定、动态绑定的概念"><a href="#绑定、静态绑定、动态绑定的概念" class="headerlink" title="绑定、静态绑定、动态绑定的概念"></a>绑定、静态绑定、动态绑定的概念</h2><ul>
<li>绑定</li>
</ul>
<p>绑定指的是一个方法的调用与方法所在的类(方法主体)关联起来。<br>对java来说，绑定分为静态绑定和动态绑定；或者叫做前期绑定和后期绑定。</p>
<ul>
<li>静态绑定</li>
</ul>
<p>在程序<strong>执行前</strong>方法已经被绑定，针对java简单的可以理解为程序编译期的绑定；<br>java当中的方法只有final，static，private和构造方法是前期绑定</p>
<ul>
<li>动态绑定</li>
</ul>
<p>在<strong>运行时</strong>根据具体对象的类型进行绑定。提供了一些机制，可在运行期间判断对象的类型，并分别调用适当的方法。也就是说，编译器此时依然不知道对象的类型，但方法调用机制能自己去调查，找到正确的方法主体。</p>
<p>就简单介绍到这里，因为是绪论，就不讲太多，留给后面的章节。</p>
]]></content>
      
        <categories>
            
            <category> 2017-3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java编程思想 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随想(1)]]></title>
      <url>http://yoursite.com/2017/03/05/%E9%9A%8F%E6%83%B3%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>搭建自己博客的想法已经持续了很长时间，但是总是给自己各种各样的理由推脱，无非是事情多，时间紧，或者之后的一段时间直接忘掉了，反正都没有付诸于行动。</p>
<p>付费阅读很是火热（可能已经火了好久我才注意到），自己关注的微信公众号，都推出了自己的小密圈，于是抱着对于自身的好奇，当然还有对于作者充分的信任，我选择加入了一个（帅张）。里面交流的虽然不是很火热，不像QQ群一样(一会一大推的消息)，但里面总是给人一种非常轻松，少去了很多浮躁的气息。而且里面分享的内容质量也很高。对于目前的我来说，总是能找到一些属于的养料进行吸收。</p>
<p>通过公众号接触张哥，感觉是一个性情十足的汉子，同时也是在IT行业优秀的前辈。</p>
<p>在里面，张哥写了一个分享叫&lt;为什么要写博客&gt;，之前也在公众号里面推送过类似的文章，同样这类的文章看的其实也有七八篇。先忽视在其他地方看到的。就这样的一位“开拓者”总是很用心的分享给我们他成功的方法。我是非常幸运，也是十分感激的。前方明明有一个比自己优秀多的人告诉自己前方的道路这样走会更快更好，自己偏偏要自己去摸索走各种弯路最终还是回到了这个上来。每次看到相应的博客，总是当时恍然大悟，茅塞顿开的感觉，然后呢？就没有了。这大概也是如今很多人通病所在。</p>
<p>在加入小密圈的同时，我也在<em>得到</em>这样一个应用上面订阅了吴军老师专栏，里面的第一篇【发刊词】就提说到了这样一个问题。几年前Google举办一次商业活动，免费向合作伙伴发放入场券，拿到入场券的人都确认要来，但是到活动开始的时候，只来了一半的人。第二点Google每张入场券收取50美元，这当前只占Google所付出费用的小部分，但是这一次，大家因为掏了50美元，都来了，基于这个教训，我们意识到，一个人只有付出（哪怕只有一点点），才会珍惜他换来的。才会比较重视的主动的去思考一些内容。事实证明这样真的是很有效的。</p>
<p>“道理我都懂，但是之后就没了下文”，这大概也就是我与真正优秀的人的差距了，别人做到了，而我却只说到了。生活中的例子不胜枚举，和我一同学习Android的同学，之前我就早就当面十分详尽的阐述了要注重看一手资料，要看Google官方文档，但是他就自己偏执一词，给出各种的理由，但是经过一个寒假的时间，才缓缓意识到这个问题，现在才慢慢开始看。这样的问题自己身上就多的数不清楚了。很多事情我们只是看到了，而没有意识到，然而自己的思想里面，非要站在一个制高点说“我意识到了”。只有当付出代价之后，你才会意识到一件事情的重要性，之后就会说，要是我当初做了，就怎么怎么样了，然而却完全没有时间改变。我很庆幸我自己真正意识到了这个问题，通过“付费”，这样一种代价很低的形式，庆幸自己没有让你自己用时间明白这一切，到时候就真的完了。</p>
<p>已经使得到和<em>小密圈</em>一段时间，渐渐的已经熟悉的这么一个环境，聚集了一群志同道合的人，聊起天来也会感到分外轻松。我也不是一味夸许付费阅读有多好，但是“付费”的的确确过滤出了一个更好的环境，一个更有品质的环境。在小密圈中各路的前辈总是会乐意分享出自己阅读过程中有价值的文章给我们，同时也可以和向我一样处于同等阶段的同学们，互相了解。不是说非要通过付费的方式来可以获得，但是这个过程绝对会浪费比这种形式多出好几本的时间。在<em>得到</em>里面更多的是向学习优秀的人（更确切的说是卓越），如何去思考一些事情，知道大咖们在关注什么，可以通过他们来了解一些带有他们思考的前沿。方方面面的东西都可以帮助自己成长。开始尝试自己不曾做过的，开始主动的去步入一个新的世界（说了如此对于我付费阅读的优点，终究是属于自己的，我说的这些抽象出来都是所谓的事情，纯粹来说，这一件事情本身没有什么意义，所有意义都是人为赋予的且对于自己来说是唯一的）</p>
</blockquote>
<p>通过这样一个途径让我开始做一些之前没有的事情，就拿刚做的来说，搭建博客并且开始写博客，以此为起点我要开始做一些之前带有抵触情</p>
<ul>
<li>持续的写技术博客</li>
<li>主动看纯英文文档</li>
<li>开始使用第三方库</li>
<li>尝试看常用第三方源码</li>
</ul>
<p>到目前为止，我已经拥有了自己的博客。</p>
<p>这次博客用了不到一天的时间，没有过度的修饰，毕竟当前还是用来写文章，记录文章的。过多花哨的功能除更加美观外基本没有什么过多的作用。同时创建自己博客的初衷，不仅仅是做技术记录，单纯的技术博客，更多的是想记录下我的生活而不是仅仅是我的职业。刚开始文章各方面无论是语言表述方面还是排版方面都是很有欠缺的，希望自己通过这样一个小的平台来逐步提升自己，作为一个大学生来说，最基本的除具备未来职业的基本专业知识外，还要拥有良好的表达能力和写作能力。到我毕业之后希望给自己交一份不错的答卷。</p>
]]></content>
      
        <categories>
            
            <category> 2017-3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 乱七八糟 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
